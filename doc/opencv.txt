Netgen: Mesh Generator


GNU goptical

http://en.wikipedia.org/wiki/Focal_length
http://en.wikipedia.org/wiki/Homography_%28computer_vision%29
http://www.cvchina.info

摄像机焦距与单凸透镜焦距不同，后者是平行光的焦点，前者是成像屏到镜头距离，后者在1倍焦距和2倍焦距直接。

/usr/lib/pymodules/python2.7/matplotlib //Python图形框架
/share/matplotlib/sample_data/axes_grid/bivariate_normal.npy //python-matplotlib-data  实验数据
matplotlib的例子使用这些数据的地址不对

PIL: Python Imaging Library

SciPy Stack:
python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose

一系列C函数和少量C++类构成
1 安装
参考：http://docs.opencv.org/trunk/doc/tutorials/introduction/linux_install/linux_install.html
1.1 依赖
cmake(>2.8.7) libgtk2.0-dev pkg-config libavcodec-dev libavformat-dev libswscale-dev(ffmpeg dev packages)
python-dev python-numpy libtbb2(opt) libtbb-dev(opt) libjpeg-dev libpng-dev 
libtiff-dev libjasper-dev(opt) libdc1394-22-dev(opt)

1编译
 	2.4.x(最新3.x)
 	//2012-05-02 OPENCV 2.4.0
	//2014-10-02 OPENCV 2.4.10
	//2014-08-21 OPENCV 3.0 ALPHA
	//2014-11-11 OPENCV 3.0 BETA
	
 	cd build
	cmake -D CMAKE_BUILD_TYPE=Release -D BUILD_EXAMPLES=1  ..
	make -j8 (VERBOSE=1 example_convexhull)

	CMAKE_BUILD_TYPE=Release\Debug
	CMAKE_INSTALL_PREFIX=/usr/local
	BUILD_EXAMPLES=1 编译例程, 配置结果 C/C++ Examples: NO变为YES，但sample/c 需sample/c/build_all.sh
	WITH_FFMPEG=OFF 不用ffmpeg
	cpp例子在 build/bin/cpp-example-xxx
	BUILD_DOCS 编译文档v

	modules/python/ 生成cv2.so
	make install，安装/usr/local/lib/python2.7/dist-packages/cv2.so(python cv2模块)
	python-opencv包提供cv2模块，是这个源码编译的发布版。
	cv2是OpenCV Python接口，采用NumPy数组对象表示图像
	
	Linking CXX shared library libopencv_highgui.so:
	.../libavcodec.a recompile with -fPIC,  --enable-pic 重编ffmpeg( 要disable汇编，否则有几个汇编文件好像还是不能pic)
	
	CODEC_ID_H264 找不到，使用ffmpeg2.8，3.0不行  CODEC_ID_H264和 AV_CODEC_ID_H264 的区别


首次cmake : ICV: Downloading ippicv_linux_20141027.tgz...  //是什么

python库(cv2)默认编译，加-D BUILD_opencv_python=OFF
--   Python:
--     Interpreter:       /usr/bin/python2 (ver 2.7.6)
--     Libraries:         /usr/lib/x86_64-linux-gnu/libpython2.7.so (ver 2.7.6) (无python-dev显示NO)
--     numpy:             /usr/lib/python2.7/dist-packages/numpy/core/include (ver 1.8.2)
--     packages path:     lib/python2.7/dist-packages
变为：
--   Python:
--     Interpreter:       /usr/bin/python2 (ver 2.7.6)


Canny 函数
Finds edges in an image using the [Canny86] algorithm.
[Canny86] John F. Canny于 1986 年开发出来的

RNG: Random Number Generator

http://www.nmtree.net/2014/12/21/detecting-barcodes-images-python-opencv.html

----
In 3.0 beta:
About 40 commonly used image processing functions have been optimized using vector NEON instructions, 
OpenCV 3.0 beta run faster on ARM chips. Big thanks to Ilya Lavrenov for the amazing job!

1. 项目架构的改变。
最初OpenCV是相对整体的项目，以整体形式构建，过去一直很好。
然而，随着功能的增加，算法发布前的几分钟，一个pull请求提交到我们的仓库，
我们决定像其他大项目一样，抛弃整体架构，使用内核+插件形式。

除了我们的主仓库和增加的”test data“仓库，我们还有了http://github.com/itseez/opencv_contrib，
这里有很多让人兴奋的功能，包括你们已经知道的面部识别和文本探测，
还包括文本识别、新的边缘检测器、充满艺术感的修复、深度图处理、新的光线流和追踪算法等。

opencv与opencv_contrib区别：

他们都由我们的持续集成系统维护，尽管opencv_contrib的单元测试并不常规运行。
全部或者一些额外的模块可以用我们的构建系统构建，把OPENCV_EXTRA_MODULES_PATH=/modules传递给CMake。
contrib的文档是自动生成的，可以在docs.opencv.org/master获得，它会在OpenCV 3.0 beta版本的时候更加完善、并发布。
主OpenCV是Itseez支持的代码，有非常稳定的API以及一点点创新。
opencv_contrib是大多数实验性代码放置的地方，一些API可能会改变，我们欢迎贡献者贡献你们新的精彩算法。


http://docs.opencv.org/master/modules/imgproc/doc/filtering.html


莱娜图:瑞典模特莱娜(Lenna)，刊于1972年11月号《花花公子》，在数字图像处理研究中颇为知名

MATLAB (matrix laboratory) 



./modules/imgproc/src/imgwarp.cpp
cvWarpPerspective 透视图变幻
 
cvGetPerspectiveTransform :
Calculates a perspective transform from four pairs of the corresponding points.

homography ['hɒməgrɑ:fɪ] n.单应性
单应矩阵

projective geometry

warpPerspective :
Applies a perspective transformation to an image

不同语言封装形式不同

C++: void warpPerspective(InputArray src, OutputArray dst, InputArray M, Size dsize, int flags=INTER_LINEAR, int borderMode=BORDER_CONSTANT, const Scalar& borderValue=Scalar())

Python: cv2.warpPerspective(src, M, dsize[, dst[, flags[, borderMode[, borderValue]]]]) → dst

C: void cvWarpPerspective(const CvArr* src, CvArr* dst, const CvMat* map_matrix, int flags=CV_INTER_LINEAR+CV_WARP_FILL_OUTLIERS, CvScalar fillval=cvScalarAll(0) )


仿射变幻  affinis


测试图片 H:
p *H->data.fl@9

24.5289459,		-7.57143879,	138.725388, 
-1.55757523,	8.46959305, 	259.227539, 
-0.00245827273, -0.0289331246, 	1


C: cvFindChessboardCorners
python2 : cv2.findChessboardCorners


guwb例子用的 cvCalibrateCamera2  (why 2?)  内部用张正友方法

棋盘，有的文献也叫标定板

计算棋盘 3264 x 2448 像素图片，需要相当长的时间，几十秒

奇怪，我用python2 calibration 3张不同角度的棋盘 测出来的值，与我用尺子测试出的很接近（这次测量很成功）
但是用1张图片运算的值，差之千里呀！
1

用cpp目录下的left*.jpg 测试，一组出来的值，与单张完全不同，并且不是多张取平均！
那这样说，gu用1张测试，不准的


iphone 5/6 官方资料像素1.5um，计算出焦距像素数约3000，折合焦距1.5um*3000=4.5mm
iphone 4s 查看图片信息，焦距4.3mm

Sony IMX-145 is an 8 Mp 1.4um pixel pitch CMOS Image Sensor found inside the iPhone 4S

焦距像素数 4.3mm/1.4um=3071

我用尺子测量计算出的结果3084，张正友2997，反而前者更准确呀！
图像变1280x960后， 焦距对应变为 3071/2.55 = 1204
一组棋盘图像张正友计算出：1219 和 1205 可以说相当准确。那一组到底需要几张呢？
实测 6张不同角度的很准确，5张，4张都不好

focal length (equivalent 35mm  等效135画幅，什么意思)

广角镜头：
28mm广角镜头视角76，一般35mm镜头视角62
鱼眼镜头，焦距短于16mm，视角接近180

关于cali函数：

CV_IMPL double cvCalibrateCamera2( const CvMat* objectPoints,
                    const CvMat* imagePoints, const CvMat* npoints,
                    CvSize imageSize, CvMat* cameraMatrix, CvMat* distCoeffs,
                    CvMat* rvecs, CvMat* tvecs, int flags, CvTermCriteria termCrit )

得到摄像机内参数矩阵，畸变系数，旋转向量和平移矩阵。

objectPoints, //世界坐标点
imagePoints,//图像坐标点

const CvMat* point_counts, //每张图像的中的角点数

CvSize image_size,
//输出参数

CvMat* intrinsic_matrix,   //内参数矩阵

CvMat* distortion_coeffs,//畸变系数

CvMat* rotation_vectors=NULL,//旋转向量

CvMat* translation_vectors=NULL,//平移向量


旧的
void cvCalibrateCamera( int image_count, int* _point_counts,
    CvSize image_size, CvPoint2D32f* _image_points, CvPoint3D32f* _object_points,
    float* _distortion_coeffs, float* _camera_matrix, float* _translation_vectors,
    float* _rotation_matrices, int flags )


畸变参数，python版本为啥返回5个值，而c版本资料说返回4个值


cvInitUndistortMap


 p /f *H->data.fl@9



0.600667417, 		-0.275650829, 		180, 
2.48689958e-14, 	-0.250634313, 		555.900024, 
4.51028104e-17, 	-0.00061153539, 	1

M21和M31 能相当于0吗？  实际计算，相当于0 ，数值已经非常非常小了

iphone c270 视角60度以内

取摄像头数据：
==========

cvCreateFileCapture
cvCreateCameraCapture

cvQueryFrame

OpenNI  体感相关开源

编译
gcc -ggdb `pkg-config --cflags opencv` -o xx xx.c `pkg-config --libs opencv`

透视 灭点


im = array(Image.open('1.bmp').convert('L'))

ITU-R 601-2 luma transform:
L = R * 299/1000 + G * 587/1000 + B * 114/1000
实际验证 convert('L') 取地板值

matplotlab显示单通道使用伪颜色加强对比度（使用LUT 颜色查找表，默认使用 jet（颜色表名字））

set_cmap() : Set the default colormap 改变颜色表

set_cmap('gray') 就正常了
还有hot  binary 等可选



广角摄像头1

棋盘在正中间不行
9张图
[ 688.98691529    0.          714.75829164]
[   0.          689.33594128  380.96566753]
[   0.            0.            1.        ]
distortion coefficients: 
[-0.38627861  0.88472483 -0.00289528 -0.00253503 -2.39805735]

11张图
[ 687.05009781    0.          721.10542716]
[   0.          687.23870661  381.41401888]
[   0.            0.            1.        ]

distortion coefficients:  
[-0.38622734  0.91748419 -0.00289719 -0.00383258 -2.45918134]


棋盘在一边，可以
OK!!!
6张图
[[ 820.06125809    0.          611.96268851]
 [   0.          789.30607968  363.44476769]
 [   0.            0.            1.        ]]
distortion coefficients:  
[-0.26326066 -0.07021735  0.00490787  0.02119395  0.07780517]

8张图

虽然数据不同，但也ok

[[ 849.30860411    0.          599.69184411]
 [   0.          808.58547818  349.5403397 ]
 [   0.            0.            1.        ]]
distortion coefficients:  
[-0.30689907  0.01616183  0.00400601  0.01824489  0.02907918]


HIGHGUI ERROR: V4L/V4L2: VIDIOC_S_CROP  //设置图像分辨率失败，使用了默认分辨率

cvSetCaptureProperty 不灵，最后直接修改 cap_v4l.cpp中的 默认宽高，重新编译安装即可

矫正后，画面范围有所缩小

图像拼接技术

局部图像特征提取算法
SIFT 尺度不变特征变换 scale invariant feature transform  图像局部描述子
SURF speeded up robust feature 是改进版sift，特点是快速
ORB  ORiented Brief(Binary Robust Independent Elementary Features)


./find_obj.py
numpy.random.random() 调用了
./numpy/random/mtrand/mtrand.pyx
random_sample

Standard Normal distribution
标准正态分布

正态分布（Normal distribution）又名高斯分布（Gaussian distribution）
标准正态分布又称为u分布，是以0为均数、以1为标准差的正态分布，记为N（0，1）

numpy:
def standard_normal(self, size=None):

Returns samples from a Standard Normal distribution (mean=0, stdev=1).


"
I am working on video stabilization topic. Now, I want to smooth motion parameter (scale, translation, rotation) by using second order Butterworth low pass filter in C++ with the same cutting frequency 66.67 Hz. My data is 1D. I am looking forward Butterworth low pass filter in C++ to smooth data.
"

几个最基本核滤波器相关类

2D图像滤波器基础类BaseFilter：dst(x,y) = F(src(x,y), src(x+1,y)... src(x+wdith-1,y), src(y+1,x)... src(x+width-1, y+height-1) ); 相关的调用函数为getLinearFilter、getMorphologyFilter

单行核滤波器基础类BaseRowFilter：dst(x,y) = F(src(x,y), src(x+1,y),...src(x+width-1,y));相关的调用函数为getLinearRowFilter、getMorphologyRowFilter

单列核滤波器基础类BaseColumnFilter：dst(x,y) = F(src(x,y), src(x,y+1),...src(x,y+width-1));相关的调用函数为getColumnSumFilter、getLinearColumnFilter、getMorphologyColumnFilter

类FilterEngine：该类可以应用在对图像的任意滤波操作当中，在OpenCV滤波器函数中扮演着很重要的角色，相关的函数有createBoxFitler、createDerivFitlter、createGaussianFilter、createLinearFilter、createMorphologyFilter、createSeparableLinearFilter

基于这些类有一些基本的滤波器bilateralFilter、blur、boxFilter

还有一些形态学操作如：dilate、erode、morphologyEx

还有基于核和图像卷积的滤波器filter2D

还有一些典型的滤波器如GaussianBlur、medianBlur、Laplacian、pyrMeanShiftFiltering、sepFilter2D

还有Sobel、Scharr运算符

其他一些函数有borderInterpolate、buildPyramid、copyMakeBorder、createBoxFilter、createDirivFilter、createGaussianFliter、createLinearFilter、createMorphologyFilter、createSeparableLinearFilter、getDerivKernels、getGaussianKernel、getKernelType、getStructuringElement、pyrDown、pyrUp

还老版本的滤波器cvSmooth

OpenCV 的 C++ 接口和 Matlab 相似。用 OpenCV 2.49 实现 Guided Filter 时几乎是直接照抄作者公开的 Matlab 代码
http://www.tuicool.com/articles/Mv2iiu

cvSmooth

GaussianBlur

//德国人编写人脸对比的牛逼程序
http://docs.opencv.org/modules/contrib/doc/facerec/tutorial/facerec_video_recognition.html

python2例子 dft.py

注意：
cv2.log(1.0 + magnitude)   //这里的log是以e为底的

cv2.normalize() //大概作用能明白，但算法是？

dft.py: 
cv2.normalize(log_spectrum, log_spectrum, 0.0, 1.0, cv2.NORM_MINMAX)
若不归一，而是
#log_spectrum 是浮点，显示图片时按照0-1显示，所以都大于1，显示白色
log_spectrum = log_spectrum.astype(np.uint8)
#转换为整数，数值偏小，显示图片纯黑色
#下面处理后，就能初步看出那个fft频谱图的样子了，但不明显，说明数据有损失
log_spectrum = log_spectrum*5

dft频谱图，亮的地方表示幅值大，那为什么最大值在四个角落，而不是集中在左上角呢？跟DCT那样

---画图走
highgui/src/window_gtk.cpp

