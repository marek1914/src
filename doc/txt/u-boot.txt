bootargs 传给内核的参数
常见环境变量：
serverip
ipaddr

tftp 0x20200000 rom_emmc_boot.bin
mmc write.boot 1 0x20200000 0 $(filesize)

tftp 0x20200000 rom_emmc_boot.bin 
Using  device
TFTP from server 192.168.1.108; our IP address is 192.168.1.200
Filename 'rom_emmc_boot.bin'.
Load address: 0x20200000
Loading: 
done
Bytes transferred = 75776 (12800 hex)

mmc write.boot 1 0x20200000 0 $(filesize) //自动执行$(filesize)可以，但单独粘贴到命令行
//这样写却不行，必须$filesize 或${filesize}   我猜是mstar在mstar命令中自己处理的
148 blocks written: OK

u-boot文档 14.2.17.1. 

Old, simple command line parser 
NOTE: Older versions of U-Boot used "$(...)" for variable substitution. 
Support for this syntax is still present in current versions, but will be removed soon. 
Please use "${...}" instead, for compatible with the Hush shell, too.


环境变量可保存在nor/nand/eeprom中
如#define CONFIG_ENV_IS_IN_NAND 1  编译env_nand.c
变量存储: key=value\0key=value\0
没有数组记录各字符串地址（如main环境变量），递进检查
64k/份*2（顺序可能不同）

make env编译tools/env，生成fw_(printenv/saveenv)
/etc/fw_env.config，根据定义的env区，和mtd分区情况修改。
linux下更新u-boot环境变量


U-Boot

1 start.S  _start  /* entry point */

1 开始
	Das U-Boot(简称U-Boot,Universal Boot Loader)德国DENX开发
	http://www.denx.de/wiki/view/DULG/Manual
	http://ftp.denx.de/pub/u-boot
	git://git.denx.de/u-boot.git
	doc/README.xx描述各模块

	The 10 Golden Rules of design: 
	1. Keep it Small
	2. Keep it Fast
	3. Keep it Simple
	4. Keep it Portable
	5. Keep it Configurable
	6. Keep it Debuggable
	7. Keep it Usable
	8. Keep it Maintainable
	9. Keep it Beautiful
	10.Keep it Open

2 编译
	1) clean:删除一般性中间文件
	   clobber: clean 和 .map .hex等更进一步的文件
	   mrproper或distclean: clobber unconfig
	   unconfig: 删除config.h等
	2) ndk9编译：结论：ndk 不能编译u-boot
	   不依赖glibc

     3) sandbox:

		install libssl-dev(evp.h) device-tree-compiler(dct command)
		make sandbox_defconfig all
		./u-boot
	根makefile的结构貌似并不是很好，可以修改各个结构的东西，这是什么思想

3 版本
	2008/08/12发布v1.3.4，后版本用日期表示，第1个：v2008.10

	VERSION = 2008
	PATCHLEVEL = 10
	SUBLEVEL =
	EXTRAVERSION =
	4字段同kernel，EXTRAVERSION是给用户用的，如设为-foobar

SPL: Secondary Program Loader

>help bootm

1 2015/03出现tag: v2015.04-rc1/v2015.04-rc2 是v2015.04的候选版本
2 一版本/3个月
3 1个master分支，靠tag发布版本号

4 目录
  原各cpu在跟目录以lib_xx形式存在，2010/4/13 g8fe77a 移到arch/$ARCH，随后发布v2010.06

用go启动kernel不标准

设置ATAGS以及传递正确的machine ID

u-boot调试可变为内存运行版

5 启动过程
bootcmd是启动入口，如

bootcmd=tftp 0x82000000 uImage;bootm 0x82000000
bootcmd=bootm address // 使用默认地址(见默认地址解释)

bootm 0x100000 0x240000 (initrd) 
bootargs console=ttyS0,115200n8 root=/dev/ram rw mem=32M

默认地址：
CFG_LOAD_ADDR(old) or CONFIG_SYS_LOAD_ADDR(new)
最后一次内存操作的地址，如tftp（这种思路）

2008/10/16 6d0f6bcf337c5261c08fabe12982178c2c489d76 rename CFG_ macros to CONFIG_SYS
2014/06/30 dd84058d24ff54d6b32818ffe44aeb4bba2cfae6 
kconfig: add board Kconfig and defconfig files
根目录添加configs/，增加类似kernel的xx_defconfig 文件

bootcmd可用读写nand/Nor Flash的命令拷贝zImage/uImage到内存，或直接在Nor Flash里执行（data区怎么处理呢？原来分析过itron的boot在nor执行的情况，有一段拷贝data的代码，那是人为写的，那kernel呢？）

bootargs最终转换成ATAG_CMDLINE


kernel逻辑：
	/* Retreive command line */
	p = of_get_flat_dt_prop(node, "bootargs", &l);
	if (p != NULL && l > 0)
		strlcpy(cmd_line, p, min((int)l, COMMAND_LINE_SIZE));

#ifdef CONFIG_CMDLINE
#ifndef CONFIG_CMDLINE_FORCE
	if (p == NULL || l == 0 || (l == 1 && (*p) == 0))
#endif
		strlcpy(cmd_line, CONFIG_CMDLINE, COMMAND_LINE_SIZE);
#endif /* CONFIG_CMDLINE */

如果不 CMDLINE_FORCE 则有 bootargs 就用，没有就用kernel里写死的

root=/dev/mtdblock2
root=/dev/cardblksd2 rw
root=/dev/ram rw
root=/dev/nfs (还需nfsroot=serverip:nfs_dir)

console=ttyS0,115200n8
console=ttyAMA0,115200 //hisi

mem=1024M (并不是所有平台都指定了)

noinitrd

mtdparts(详见MTD.txt)

On some platforms, there is no way for the boot loader to pass arguments to the kernel. You can supply some command-line options at build time

a20:
bootcmd=run setargs_nand boot_normal
setargs_nand=setenv bootargs console=${console} root=${nand_root} ...
boot_normal=boota 40007800 //boota是allwiner自己实现的，垃圾！
kernel从flash拷贝到内存哪里实现？

第1行打印编译时间

Detlev Zundel denx工程师现已离职
Experience: Managing Director /DENX Software Engineering /2007 – December 2014 (7 years)
Manage team of Software Engineers. Acquire and carry out embedded Linux projects. Do customer trainings. Develop new business opportunities.

每个makefile都包含一个 include $(SRCTREE)/rules.mk

include目录 asm是一个链接  链到 asm-mips 其他的都没有用（指asm开头的）cpu目录 只留一个mips目录即可

make文件：Makefile；shell脚本：mkconfig
$(obj).boards.depend:  //$(obj) 用来指定编译文件的输出路径。

交叉编译器设置逻辑：
在arch/arm/config.mk中：
CROSS_COMPILE ?= arm-linux-
这是原始版默认值，外面赋值会覆盖

Makefile：
# set default to nothing for native builds
ifeq ($(HOSTARCH),$(ARCH)) //非交叉编译时
CROSS_COMPILE ?=   //清空交叉编译器，不是设置的地方
endif


3 Make系统与配置

boards.cfg
Target ARCH CPU  Board-name  Vendor SoC Options

自动生成：
include/config.h 
include/config.mk

./mkconfig: echo "/* Automatically generated - do not edit */" >>config.h 

make clean  CROSS_COMPILE="mips-linux-gnu-"

4 命令
1) defenv 恢复默认配置

加入IR支持替代recovery键

POST  Power-On-Self-Test 
Makefile : LIBS += post/libpost.a 没有链接这个库却编译了
net目录编译了  
libfdt生成1个.a

ATAG 标签（新解释 Arm TAG ）

tag 是有一个结构体的（在arm目录，其他结构不这样吗？）

struct tag_header {
	u32 size;
	u32 tag;
};

struct tag {
	struct tag_header hdr;
	union {
		struct tag_core		core;
		struct tag_mem32	mem;
		struct tag_videotext	videotext;
		struct tag_ramdisk	ramdisk;
		struct tag_initrd	initrd;
		struct tag_serialnr	serialnr;
		struct tag_revision	revision;
		struct tag_videolfb	videolfb;
		struct tag_cmdline	cmdline; //bootargs
		/* Acorn specific*/
		struct tag_acorn	acorn;
		/* DC21285 specific*/
		struct tag_memclk	memclk;
	} u;
};

8 Hisi fastboot由u-boot修改而来，不是android的fastboot（支持usb操作）

等待按键进入命令行的时间：
可任意键进入或设定，a20是s

3 spi里有u-boot可以更新，sd card启动盘方式，sdcard当成raw设备，不识别任何文件系统。
1). sf erase 0 400000  //串行flash擦除4M Usage: sf erase offset len ，默认十六进制 
2). usb reset  //(Re)start USB...  触发u盘识别。默认插上u盘不自动识别的。
3). fatload usb 0:1 82000000 spi.bin   // spi.bin放到u盘根目录，拷贝到82000000 打印：reading spi.bin   ...
4). sf write 82000000 0 400000    //写串行flash完成
4 参数区写在单独的flash分区，一个一个的字符串。


文件系统那里 reiserfs 应该没用
include 目录的头文件一般不能删除 比如ata.h竟然都回用到

为什么nand启动的时候程序编译地址在a2000000  不能像串行Flash一样映射到bfc00000 吗？

small后，网络，文件系统 usb都关闭了,nandFlash启动时，使用CS1而非CS0，这与a2000000编译地址吻合

nand_spl 支持nand flash启动
onenand_ipl  支持从onenand(三星开发的结合了nand和nor技术的flash)启动的代码

tools   //制作 S-Record(motorola烧写格式)，u-boot镜像等的工具
example //u-boot上运行的小示例程序
api 一些扩展应用的独立的api
api_example api的示例程序
  
三个变量分别用r0,r1,r2传给内核，巧妙利用函数指针传递参数

u-boot 系统支持多片nand Flash

tools/生成mkimage (u-boot-tools包亦提供）

m3 u-boot是压缩的
Systemp Started
Boot From SPI0x12345678
ucl decompress
decompress finished

e3slp u-boot跳转内核入口后串口1无启动信息，串口0有
修改内核源码目录文件arch\mips\emma\nec-emma3slx\setup.c
在函数emma3slx_sio_setup() 增加代码如下：
	up.line		= 1;
	up.mapbase		= EMMA_PUART1_BASE + 3;
	up.membase		= ioremap_nocache(up.mapbase, 0x40 << up.regshift);
	up.irq			= EMMA_IRQ_PUART1;
	up.private_data	= (void *)(up.membase + (0x1F << up.regshift));
	early_serial_setup(&up);


--nxp--
12 写uldr.bin:
   ymodem下载uldr_padded_64k.bin和uboot.bin(RAM运行),tftp下载自己的uldr.bin uboot.bin vmlinux.bin等
   自己编译的uldr.bin 和u-boot.bin 分别写到Nor Flash 0x00000000 和 0x00100000

   erase 0 100000  起始地址+结束地址

	tftp uldr.bin(try this first to make sure TFTP is working)
	nor erase 0x0 0x100000

	tftp uldr.bin
	nor write 0x0 0x100000

	nor erase 0x100000 0x80000

	tftp u-boot.bin
	nor write 0x100000 0x80000

	tftp vmlinux.bin
	nor write kernel
   uldr.bin最大64K，怎么留了1M空间呢？ 可能128M Flash 是1M的扇区吧。
   cpu内部最高地址位置有64k SRAM空间。插跳线启动系统打印CC，这应该是内部ROM中的程序。
   用y-modem下载uldr.bin到内部64k ram区域，通过特殊处理正好64k
   下载完成后，uldr自动运行,uldr中对ddr进行初始化,(不论ddr是256M还是512M,都可以用同一个uldr.bin,所以512M开始可能被
   初始化成256M),再通过y-modem下载u-boot到外部DDR中,自动运行.然后就是上面的过程了.

bootdelay 设为0无法进入提示符，需CONFIG_ZERO_BOOTDELAY_CHECK

monitor范例：
U-Boot 2011.09-rc1-00000-gb837250-dirty (Oct 31 2014 - 21:00:42) Allwinner Technology

#define CONFIG_IDENT_STRING	 " Allwinner Technology "

命令：
version - print monitor, compiler and linker version

sun7i 编译：

make sun7i_config 仅配置；make sun7i 配置并编译（不好，没有改变文件也会重编译，因为重新配置了）

make 还是有几个文件重编译，都是包含#include <version.h> 的
比如有的cpu的start.S要引用U_BOOT_VERSION_STRING（干什么？）


#define RVECENT(f,n) \
   b f; nop
一个跳转指令 跳转到reset函数


m3
Image Name:   Linux-2.6.34-g4ca2551
Created:      Wed Jul 23 11:06:39 2014
Image Type:   ARM Linux Kernel Image (lzma compressed)
Data Size:    3949512 Bytes = 3856.95 kB = 3.77 MB
Load Address: 80008000
Entry Point:  80008000

yanwenyou ppc:
   Image Name:   Linux-2.6.27.7
   Image Type:   PowerPC Linux Kernel Image (gzip compressed)
   Data Size:    1529391 Bytes =  1.5 MB
   Load Address: 00400000
   Entry Point:  004005ac
   Verifying Checksum ... OK  //这个确定是u-boot打印
   Uncompressing Kernel Image ... OK //这是哪里打印呢？


common/cmd_bootm.c : 
printf ("Uncompressing %s ... ", type_name);  //代表是u-boot 而不是kernel？

./arch/arm/boot/compressed/misc.c: putstr("Uncompressing Linux...");  //这里打印吗？

s805:
Booting kernel from Legacy Image at 12000000 ...
   Image Name:   Linux-3.10.33
   Image Type:   ARM Linux Kernel Image (lzo compressed)
   Data Size:    5830002 Bytes = 5.6 MiB
   Load Address: 00208000
   Entry Point:  00208000
   Verifying Checksum ... OK
    Ramdisk start addr = 0x12590000, len = 0xdb5a0
    Flat device tree start addr = 0x1266b800, len = 0x522f magic=0xedfe0dd0
   Uncompressing Kernel Image ... OK

ymodem

烧写uldr.bin\uboot.bin

烧写uldr.bin :
tftp uldr.bin
nor erase 0 100000  //nor erase +偏移量 +大小
nor write 0 100000 

烧写u-boot.bin:
tftp u-boot.bin
nor erase 100000 80000
nor write 100000 80000

烧写kernel:
tftp 8000 vmlinux.bin
nor erase 180000 500000
nor write kernel

设置uboot_cmdline和bootargs:(set = setenv ^_^)
set uboot_cmdline 1  //1，bootargs参数有效 (nxp)
set uboot_cmdline 0  //0，bootargs参数无效
set XX "..." //参照bootargs设置方法
set bootargs $XX  //方便切换

Flattened Image Tree (FIT): doc/U-Boot Verified Boot

printf vs puts，在yan uboot cpu_init.c中printf打印不出(?)，要用puts
U-BOOT Magic Number  在u-boot.bin的开始4字节，好像不是跳转指令
读 README.nand-boot-ppc440  理解nand启动

s805:
u-boot.bin
u-boot-comp.bin
ddr_init.bin

System not configured 

spi flash 操作：
#sf probe 2 (选中flash)
#sf read 82500000 820000 100000
#sf write 82000000 100000 10

-------------
2016.04版本
%_defconfig: $(obj)/conf
        $(Q)$< $(silent) --defconfig=arch/$(SRCARCH)/configs/$@ $(Kconfig)
//注意这里
# Added for U-Boot (backward compatibility)
%_config: %_defconfig
        @:

2012.04版本
%_config::      unconfig
        @$(MKCONFIG) -A $(@:_config=)
这里是源码的笔误，没用到双冒号的含义

linaro gcc4.7 编译s805 uboot fail：
In function `__aeabi_ldiv0':
(.text+0x6): undefined reference to `raise'


arm uboot要求 -mabi=apcs-gnu ，-gnueabi的不行

Uboot是非GNU/Linux程序（bare-metal）
arm-linux-gnueabi是GNU/Linux工具链，是编译Linux的，编Uboot会出现：
当出现被0除的情况时，会调用__aeabi_ldiv0（即eabi版本的__div0），
当GNU/Linux中，会触发系统的SIGFPE，进而调用到对应的raise(3)函数。
而Uboot不是Linux程序，没有对应的raise()函数，所以报错找不到。

解决：
1 找非gnueabi编译器，如Sourcery G++ Lite 2010q1-188，android/arm-eabi-
2 修改uboot，加上对应的（随便写个空的）__aeabi_ldiv0或raise函数

arm-none-eabi-(codesourcery)和 arm-eabi-(android) 不出raise错误，但后者FPEXC寄存器不认

其实：s805 uboot中有./arch/arm/lib/eabi_compat.c：
int raise (int signum)
{
    printf("raise: Signal # %d caught\n", signum);
    return 0;
}

