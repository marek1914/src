git - the stupid content tracker

ProGit

146个命令(link or perl or shell):
add                       credential-store          init-db                   prune                     shortlog
add--interactive          daemon                    instaweb                  prune-packed              show
am                        describe                  log                       pull                      show-branch
annotate                  diff                      ls-files                  push                      show-index
apply                     diff-files                ls-remote                 quiltimport               show-ref
archive                   diff-index                ls-tree                   read-tree                 stage
bisect                    diff-tree                 mailinfo                  rebase                    stash
bisect--helper            difftool                  mailsplit                 receive-pack              status
blame                     difftool--helper          merge                     reflog                    stripspace
branch                    fast-export               merge-base                relink                    submodule
bundle                    fast-import               merge-file                remote                    subtree
cat-file                  fetch                     merge-index               remote-ext                symbolic-ref
check-attr                fetch-pack                merge-octopus             remote-fd                 tag
check-ignore              filter-branch             merge-one-file            remote-ftp                unpack-file
check-mailmap             fmt-merge-msg             merge-ours                remote-ftps               unpack-objects
check-ref-format          for-each-ref              merge-recursive           remote-http               update-index
checkout                  format-patch              merge-resolve             remote-https              update-ref
checkout-index            fsck                      merge-subtree             remote-testsvn            update-server-info
cherry                    fsck-objects              merge-tree                repack                    upload-archive
cherry-pick               gc                        mergetool                 replace                   upload-pack
clean                     get-tar-commit-id         mktag                     request-pull              var
clone                     grep                      mktree                    rerere                    verify-pack
column                    hash-object               mv                        reset                     verify-tag
commit                    help                      name-rev                  rev-list                  web--browse
commit-tree               http-backend              notes                     rev-parse                 whatchanged
config                    http-fetch                p4                        revert                    write-tree
count-objects             http-push                 pack-objects              rm
credential                imap-send                 pack-redundant            send-pack
credential-cache          index-pack                pack-refs                 sh-i18n--envsubst
credential-cache--daemon  init                      patch-id                  shell

[]可选
<refspec> :reference specify

1 git archive --format=zip v2.6 >foo.zip
2 revert 多次要自上而下执行否则可能冲突
3 git log xxfile , --pretty=oneline 只显示一行
4 git format-patch  commit1..commit2 (先提交..后提交，生成多个patch)  
4 git am 
5 git checkout --theirs , --ours //bin conflict
6 git stash //改动被还原
7 git clone -l -s -n . ../copy   本地复制仓库，都是链接
8 git gc
9 git reset --merge
10 kernel/u-boot/ffmpeg/android的版本管理思想
11 git help -w commit  //html help
12 公司gerrit用--depth无法推送
13 show-ref : List .git/refs
14 git push <remote rep> :<remote branch> //删除分支
15 push中 '+'的用法
16 git-rebase //shell
17 pack-refs //refs打包到1个文件
--mirror
--depth n //截断最后n次提交
--ff  fast forward

git branch
-t, --track //设定跟踪关系，为了处理不同名
[branch "xxx"]
  remote = origin
  merge = refs/heads/xxx

//在没有V367R302Hebei本地分支的情况下
git checkout V367R302Hebei   (1.7不支持，1.9支持 20160615  tvos2.0 repo start 命令)
Checking out files: 100% (143/143), done.
Branch V367R302Hebei set up to track remote branch V367R302Hebei from origin.
Switched to a new branch 'V367R302Hebei'

git checkout -b gao origin/gao  //track, 亦可不同名如 origin/jie
git branch gao origin/gao       //track, 亦可不同名如 origin/jie
Branch gao set up to track remote branch gao from origin.

实际问题：1个本地仓库跟踪2个远程仓库如github/master origion/master 而本地分支只能有1个master，所以要跟踪origion/master 就不能用master了

pull无参，pull远程track分支，不看同名
非当前分支即使有track关系，也仅fetch不merge

push默认推同名分支
git config push.default tracking后默认推track分支
此时若无跟踪关系提示：
The current branch <name> is not tracking anything.

不同名且无track，提示
fatal: No destination configured to push to.

=======
git branch -vv
git config --list  检查已有配置项
git config user.name 检查特定配置项的值

git reset [--hard] sha
git branch -d name 删除本地分支 
git fetch origin fawn  如何 fetch 一个仓库的一个分支
git svn

git remote

git remote add xxx git://ip/xx.git (git fetch --all)
git remote rename 改remote名
git remote rm 删除remote 

You are in 'detached HEAD' state. 需要:
  git checkout -b new_branch_name
可以look around, experiment change and commit
此时创建新分支只需git checkout -b new_branch 而不必git checkout -b new_branch origin/xxx

reflog 相当于垃圾箱

强行fast-forward
$ git merge --ff-only xxx 
fatal: Not possible to fast-forward.
git merge gaohui xiaoniu  把另外2个分支合并到当前分支
git merge --no-ff yurongfu

git-push - Update remote refs along with associated objects
git push 中也有 fast forward 
git status

个性化git:
　　[alias]
　　co = checkout
　　ci = commit -a
　　br = branch
　　oneline = log --pretty=oneline --since='2 days ago'
　　onelog = log -p -1

2 git config
	--system /etc/gitconfig #all user
	--global ~/.gitconfig   #current user
	.git/config

	git config --global core.editor vim
	git config --global user.name
	git config --global user.email

git help config : push.default 

git config push.default nothing
会在.git/config 里面添加
[push]
	default = nothing
此时不能push

tree的sha是目录的sha，commit是tree sha + 提交信息生成的sha

gitg按committer时间排序，显示author时间
98  v2.7无法git push --tags，加了tag提交权限也不行。
Previously only "Push Annotated Tag" rights were required to create tags, currently one needs to have "Create Reference" rights as well
须开 Create Reference 权限。
101 gerrit2.7  删除tag失败。
git push --mirror
remote: You need 'Push' rights with the 'Force Push'

或
git push origin :refs/tags/testxxx
remote: Processing changes: refs: 1, done    
To ssh://gaojie@192.168.7.32:29418/CDN/scheduler
 - [deleted]         testxxx

需要在Push权限处勾选Force Push 开关
git push origin :refs/tags/gaojie
删除远程分支
git push origin :refs/heads/foo  需 force push 权限 需要把我加入的相应组中，否则，管理员也不灵。
git push origin master --force 删除远程某次提交

github:
https://help.github.com/articles/syncing-a-fork/

push an existing repository:

git remote add github git@github.com:2000000/u-boot.git
git push -u github master
config被改变
git push --tag github 将原仓库tag推上去

~/.repoconfig/

git config --global url.ssh://username@ip:29418.insteadof ssh://120.25.200.39
~/.gitconfig :
[url "ssh://xx@ip:29418"]
        insteadof = ssh://ip


===gerrit===
java -jar gerrit.war init -d review_site

ReviewDB.h2.db //数据库文件
ReviewDB.trace.db //操作命令记录
单独分支设置权限
http/ssh 2种协议
备份 git etc db 目录

第1个用户为管理员(google openid)
./etc/gerrit.config [auth]改为LDAP(需安装ldap) 

gerrit.sh stop/start/restart

Bouncy Castle Crypto v144

[theme]
trimColor = e1c3f1

2) ldap lam(LDAP Account Manager Web前台) 难配

[anth]  使用http的配置方法
增加字段：
[ldap]
	    server = ldap://localhost
	    groupBase = ou=group,dc=vision-com,dc=com
	    accountBase = ou=People,dc=vision-com,dc=com
	    accountFullName = cn

	1 操作数据库删除组和用户
	2 隐藏仓库：General-State-Active/Read Only/Hidden
	2 Gitweb代码位于./usr/share/gitweb/gitweb.cgi
	[gitweb]
		cgi = /var/www/git/gitweb.cgi

默认使用H2 db
远程登录： ssh -p 29418 user@my_server gerrit gsql

1 删除组和项目
Google做法：rename "zzz DELETE THIS 1" 
and then use a DB query to delete all groups where name LIKE 'zzz DELETE THIS %'. 
Ugly, but it allows us to batch delete every once in a while.

2.7在all-projects -> Global Capabilities添加Access Database权限（默认关闭）

java -jar bin/gerrit.war gsql (local)
ssh -p 29418 192.168.7.32 gerrit gsql (remote)

ssh -p 29418 ip gerrit create-project --name new/project //创建工程

git config remote.origin.push refs/heads/*:refs/for/*


28 'Gitweb' is a Git web interface. It is written in Perl.and can be used as a CGI script
   其中一个功能是提供RSS输入，用于跟踪项目的开发进展

97 要在gerrit中有权使用gitweb，需要对/refs/* 开read权限，  /refs/head/*开read还不行。gerrit2.7 还需要对/refs/meta/config开通读权限
我对refs/* 都开了读权限了，应该没有必要再单独开通refs/meta/config开通啊？

你是用apache来启的gitweb？直接用gerrit内置gitweb没这个问题啊
Gitweb实际上是用perl写的CGI脚本，一般都是在Apache中使用。在Gerrit中，它也可以直接被
调用转换成HTML显示。

我此前有写过一篇关于搭建gitweb服务的文章（http://blog.csdn.net/benkaoya/article/details/8094295），
在这篇文章中介绍的是http正向代理，需要设置Apache的配置文件httpd.conf和gitweb配置文件gitweb.conf。

而要在Gerrit中使用gitweb来浏览版本库，并不需要设置上面提到的两个配置文件。可以参考gerrit
帮助手册中Gerrit Code Review- Gitweb Integration章节。我简要总结下操作步骤：


普通用户要看到gitweb 需要开通权限：
Access Control
Access controls for internally managed gitweb page views are enforced using the standard project READ +1 permission.

Read +1	Read
Read +2	Read & Push (refs/for/refs/…)
Read +3	Read & Push (refs/for/refs/…) & Push Merge Commit

Apache 配置
1 虚拟主机 （反向代理） 
VirtualHost
v2.8 使用http 认证方式没有成功

Gerrit如果要用http认证，就必须使用反向代理
注意：
安装gerrit过程中有 y/N  Y/n  大写的表示默认
不行，不搞http 反向代理了。

htpasswd - Manage user files for basic authentication
htpasswd  is  used  to  create  and  update the flat-files used to store usernames 
and password for basic authentication of HTTP users.

my gerrit runs on the inbuild jetty countainer

Jetty:开源servlet容器

Gerrit打开两个端口: 29418是Gerrit SSH端口；8080是Gerrit Web端口，若已被占用需要更换。
netstat -ltpn

Authentication method          [OPENID/?]: ldap
LDAP server                    [ldap://localhost]: 192.168.7.31 
LDAP username                  : 
Account BaseDN                 [DC=168,DC=7,DC=31]: 
Group BaseDN                   [DC=168,DC=7,DC=31]: 


配置ldap+lam（很短时间就弄好，应该比较简单）

Suffix People > cyldap > com

No Unix groups found in LDAP! Please create one first
This is easy. Just create a group before creating users.


Bouncy Castle Crypto

---------
20131127 ldap最小配置成功
[auth]
        type = LDAP
[ldap]
        server = ldap://192.168.7.31
        accountBase = ou=People,dc=cyldap,dc=com
        groupBase = ou=People,dc=cyldap,dc=com

[auth] type = http时，使用打包在gerrit.war里的jetty http服务器

V2.4.2配置
1 all-projects  Administrators  Anonymous Users对refs/* 都有读权限，这显然不行，
需要编辑，关闭 Anonymous Users的读权限。
删掉之后，非管理员登录后，什么项目都看不到了

我的帐号也显示Anonymous Coward <gaojie@cyclecentury.com>  匿名的懦夫，有意思，那么怎么才能显示真名呢？
I know how to solve the problem, in Settings | Contact Information, set the full name.
但是我用LDAP  setting里面根本不让设置。

[ldap]
        server = ldap://localhost
        groupBase = ou=group,dc=vision-com,dc=com
        accountBase = ou=People,dc=vision-com,dc=com
        accountFullName = cn  //显示中文名字，Coward消失

我发现ldap创建新用户时候，要先设置密码在保存用户信息，才能创建成功。

分组信息如果保存在本地，那么一旦升级，H2数据库如果不能升级，这些数据就无法导出，
但是现在怎么无法关联ldap的用户组呢？

新安装gerrit2 比较注册一个用户（添加public key信息）和没有注册用户的区别。区别文件就是:ReviewDB.h2.db
我这个文件里面能找到 我的public key 信息，明文保存。

跟踪了一下 gerrit上创建一个工程，提交一个修改，审核， submiti 各个过程， gerrit目录的变化。
ReviewDb.h2.db都又变化。提交后仓库的pack目录有内容，refs/changes目录有内容。后者只是一个sha号码，
真正的代码应该在前者。
看来各个用户的public key信息， review时候的一些注释信息等，比如我查到了

LDAP 方式登录gerrit2  也是第一个登录者是管理员权限。
组信息不在gerrit里面而是在ldap里。

gerrit2 2.4.2 
组名字改成了“空”那个组仍然存在。gerrit2.4.2 没有在webui层提供删除组的接口，只能通过
直接操作H2 数据库了。目前，创建的组是无法删除的，只能修改名字。

known_hosts 记录的是服务器的公钥,在服务器/etc/ssh/ssh_host_rsa_key.pub中
然后 ssh -p 29418 gaojie@192.168.1.52 gerrit create-project --empty-commit --name test-proj 创建工程的时候
使用gerrit2 用户下面的public key  拷贝到known_hosts中 。

这个时候我如果重新安装了gerrit，就会在gerrit目录重新生成rsa key  再执行
ssh -p 29418 gaojie@192.168.1.52 gerrit create-project --empty-commit --name test-proj
提示：
It is also possible that a host key has just been changed. （raskey改变了）
The fingerprint for the RSA key sent by the remote host is
d5:ed:6e:b7:b0:b1:91:96:f7:ca:40:b9:3d:42:e4:ce.
RSA host key for [192.168.1.52]:29418 has changed and you have requested strict checking.
删除gerrit2安装生成的rsa key

但是创建项目还是错误：
Agent admitted failure to sign using the key. （需要添加id_rsa到ssh-agent ： ssh-add id_rsa 。 ssh-agent负责 passphrase ）
Permission denied (publickey).
执行 ssh-add id_rsa  就可以创建项目了。

All-Projects 里面默认所有人对所有项目可读
里面3个权限 Allow  Deny Block 后2个有什么区别？

仓库注释信息存放在 xx.git/description 文件里

gerrit控制的进一步思考
namespaces的概念。
refs/tags/*
refs/meta/config
refs/heads/*
refs/for/refs/*  （2.7装完，在all-project里有这个 只知道有/refs/for/*,为啥又refs?）

仓库组权限信息在哪里存储呢？
有仓库，没有组了，但是仓库的权限里面还显示那些组，只是点击提示出错。应该不在数据库里，
因为重装gerrit，仍然有这些信息

默认的label Code-Review
-2 +2 Administrators
-2 +2 Project Owners
-1 +1 Registered Users

=================
Gerrit Code Review - Change-Ids

20131225 使用新部署的2.7 李啸提交review 提示 
ERROR: missing Change-Id in commit message footer
需要：在项目 general选项卡中“Require Change-Id in commit message:”选择
true/false/inherit(因为all-project此选项是true，所以这里也是true)改成false就可以提交了，
要理解change-id的作用

gerrit 里面的 full Name 应该从哪里设置呢？一直是空的

管理员无法提交review?,向refs/for/分支提交，直接就进入主仓库了，然后又提示没有对象可以
提交到for分支（因为已经提交到主仓库了） 这倒也合理，都是管理员了，谁还能review我的。
可是，管理员也需要review啊! bug

-------------
关于Full Name
2.4 登录的时候貌似需要输入全名，在setting里面也可以修改
2.7 没有这个选项，到处提示 匿名的诺夫。setting处无法修改
在2.7 的文档里面看到：因为没有安装Bouncy Castle Crypto API（安装过程中没有下载成功）
并且用法也不是很清晰，能否通过直接修改数据库呢?

update ACCOUNTS set FULL_NAME='xxx' where ACCOUNT_ID='1000099';

修改数据库固然可以，正确做法是
[ldap]
accountFullName = 或者 (设置为空，就可以在web上修改了)
accountFullName = cn （原来的1.4就是这么设置的）

98 20130513 死活配置不上，提示：
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
泥马，折腾4小时没搞定，见鬼，这个问题配置无数，头一次不成功。怀疑跟系统安装时，用户取
为user：user有关。 
执行 ssh-add 搞定。
ssh://gaojie@192.168.1.4....   前面的用户名如果省略默认为主机名字，如果不同就需要
特别指定。

99 gerrit名字加不上的时候，可以用id号加

100 安装V2.7 一个仓库最基本权限 read push push merge commit

提交review的时候
git push origin master:refs/for/master (注意 冒号前不能有空格 否则会出错)

权限管理思想，优雅的设置

apk  apk-admin 2个组

修改继承自属性
gerrit set-project-parent - Change the project permissions are inherited from.

ssh -p 29418 192.168.7.32  gerrit set-project-parent --parent appStore commons
ssh -p 29418 192.168.7.32  gerrit 显示可用命令

上面操作在zhmj电脑上不行，提示public key没有权限。开始怀疑她用的是git bash工具，但
其他操作ok，后来加了用户名就可以了，即：
ssh -p 29418 zhangmj@192.168.7.32  gerrit


单独的一次提交“Dependencied”是空的
如果连续提交了多次，都没有review，此项就会出现内容：
Depends On: 依赖于谁
Needed By:  被谁需要

V2.4 要给refs/for分配push /push merge权限才可以提交review

删除项目
只适用于V2.1.3
Project
1. access gerrit sql database
   cmd: ssh -p 29418 150.236.40.165 gerrit gsql
2. gerrit> delete from projects where name=<project name>;
3. gerrit> delete from ref_rights where project_name=<project name>;
4. go to folder /gerrit/review_site/git, remove <project name>.git

Step 1:
ecdshawk@mtvserver2:/project/ecds/gerrit/review_site/db>ssh -p 29418 150.236.40.165 gerrit gsql

Step 2:
gerrit> delete from projects where name='rmproject';

Step 3:
gerrit> delete from ref_rights where project_name='rmproject';

Step 4：
删除项目目录

更改android仓库路径名，需要：
1 修改所有继承仓库的路径（因为被继承的仓库路径也变了）
2 修改manifest仓库里面的相对路径（提交时要手动修改config内的路径）
3 修改repo内路径init sync（其他仓库的路径会自动更新）

[gerrit]
        basePath = git
        canonicalWebUrl = http://192.168.1.4:8088  //2.4.2中这行很重要 必须这样写
[ldap]
        server = ldap://localhost
        groupBase = ou=group,dc=vision-com,dc=com
        accountBase = ou=People,dc=vision-com,dc=com
        accountFullName = cn

ldap 和 LDAP Account Manager

[gerrit]
	basePath = git
	canonicalWebUrl = http://192.168.7.32:8081/
[database]
	type = h2
	database = db/ReviewDB
[auth]
	type = LDAP
[ldap]
	server = ldap://192.168.7.31
	accountBase = ou=People,dc=cyldap,dc=com
	groupBase = ou=People,dc=cyldap,dc=com
	accountFullName = cn
[sendemail]
	smtpServer = localhost
[container]
	user = root
	javaHome = /usr/lib/jvm/java-6-openjdk-amd64/jre
[sshd]
	listenAddress = *:29418
[httpd]
	listenUrl = http://*:8081/
[cache]
	directory = cache
[gitweb]
	cgi = /usr/share/gitweb/gitweb.cgi

我可以通过设置gerrit的 Access 使得某些人可以直接提交，当然只有管理员账户有权这样做。

比如我把Administrator组设置为可以对refs/heads/* 可以push。就可以直接提交了

能够review需要很多设置，这些设置要inherit frome all-projects

HEAD:refs/for/master 或者写成 master:refs/for/master  ：前后不能有空格

需要Code-Review 和 Verified 2个状态都打勾才可以。
输入 passphrase 与否，文件生成的格式不同。写了passphrase应该是对密钥又加了一次密码。

For more information about SSH key passphrases
Enter passphrase (empty for no passphrase): usernamexxx

Register New Email:
输入新邮箱后，会发邮件，需要去邮箱中点击链接

