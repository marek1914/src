http://www.fourcc.org/
YUV pixel formats
Video Codecs


Icecast is a streaming media (audio/video) server which currently supports Ogg (Vorbis and Theora), Opus, WebM and MP3 streams.

google webp 图片格式

--格式--
WAV :microsoft 开发(codecs and formats)，符合RIFF，类似AIFF , video/x-ms-wmv
--背--
H.262 / MPEG-2 Video editions
Edition	Release	Amendment	ISO/IEC standard	ITU-T
1st		1995	2000 		13818-2:1996		H.262 (07/95)
2nd		2000	2010 		13818-2:2000		H.262 (02/00)
3rd		2013 				13818-2:2013		H.262 (02/12)

ITU官网：
H.262 (02/00) :
  	Information technology - Generic coding of moving pictures and associated audio information: Video  
This edition of ITU-T H.262 consolidates H.262 (07/1995) and its Amendments 1 and 2 (11/1996), 3 and 4 (02/1998), 5 (05/1999), 6 (02/2000) and Corrigenda 1 and 2 (11/1996).

H.262 (02/12)

  	Information technology - Generic coding of moving pictures and associated audio information: Video  
The published text includes the modifications introduced by ITU-T H.262 (2012) Amd.1 (2013). This text was produced through a joint activity with ISO and IEC. According to the agreement with our partners, this document is only available through payment.

m2ts  蓝光盘ts包192字节，0x47前4字节 timestamp
Blu-ray Disc Audio-Video (BDAV) MPEG-2 Transport Stream (M2TS)

AAC分ADTS和LATM，若iphone无法播放需要在这2个之间切换

ASP兼容Divx？兼容h.263?

视频压缩标准：
ISO/IEC： MJPEG/Motion JPEG 2000 /MPEG-1 /MPEG-2 (Part 2) / MPEG-4  (Part 2/ASP / Part 10/AVC) / HEVC


ITU-T:
H.261: 视频编码里程碑(1990)
H.262: ISO/IEC 13818-2
H.263: 低码率视频编码标准，基于H.261和H.262。1998年H.263+(H.263v2)，2000年H.263++(H.263v3) (能高清吗)
H.264: AVC,MPEG-4 part 10
H.265: HEVC(High Efficiency Video Coding)

MPEG-1 :1992年，ISO/IEC-11172

MPEG-2 :1994年，ISO/IEC-13818
13818-1：(TS)
13818-2 视频
13818-3 音频

MPEG-4:ISO/IEC-14496

14496-2(ASP)

MPEG-H: ISO/IEC 23008
part-2  h.265

The video and audio data is encoded as described in H.262 | ISO/IEC 13818-2 and ISO/IEC 13818-3

MPEG-2解码器也能解MPEG-1。由于MPEG-2表现出色，做为DVD和有线电视标准，已能适用于HDTV，使得原打算为HDTV设计的 MPEG-3，没出世就被抛弃。

MKV:
Matroska
MKV只是Matroska媒体系列的其中一种文件。Matroska封装格式可把多种不同编码的视频及16条以上音频和语言不同的字幕封装到一个Matroska Media档内。

3GP是容器，Third Generation Partnership Project（3GPP）定义，用于3G手机。
是MPEG-4 Part 14的简化版，减少空间和带宽需求。
编码可用MPEG-4 Part 2、H.263或MPEG-4 Part 10 (AVC/H.264)等，声音支持AMR-NB、AMR-WB、AMR-WB+、AAC-LC或HE-AAC。
有2种标准：
3GPP（针对GSM手机.3gp）
3GPP2（针对CDMA手机.3g2）
2种分辨率：176×144 / 320×240

Matroska能容纳多种类型的音视频编码及字幕流，并且它能把非常高密的RealMedia及QuickTime文件也容纳在内，同时将它们的音频和视频重新组织起来
MKV播放器屏幕截图

FLAC(Free Lossless Audio Codec)

FLAC与ZIP分别在于FLAC可实时播放已压缩的音频数据。而且FLAC比ZIP这类无损压缩格式有更高的压缩比率。（FLAC大约五成压缩率，ZIP则一至两成压缩率。）

相比起其他无损压缩格式如Monkey's Audio（拓展名为.APE）及 Shorten，FLAC技术更先进，占用资源更低，虽然压缩率稍有不及Monkey's Audio，
所以，更多的平台及硬件产品支持FLAC，目前在中国大陆Monkey's Audio更为流行。

MPEG2-TS（Transport Stream又称TS、TP、MPEG-TS 或 M2T，扩展名.mpg）应用于即时传送节目。定义于MPEG-2 part1系统（ISO/IEC 13818-1 or H.222.0）。

MKV是Matroska的一种Multimedia Container
Matroska的目标就是要取代旧式的媒体封装格式，其中最主要的目标就是AVI。

DIVX:视频MPEG-4、音频MP3，再以AVI档格式存在的制成品，较MPEG-2小，画质表现就介乎MPEG-1与MPEG-2之间。

MP3:MPEG-1 Layer 3

wmv,divx,xvid都可以说是MPEG-4的类型

.mp4使用mpeg4-14 系统层

DivX：wiki 	Media player／Codec／Media format （既是编解码器，也是封装格式）

一般的文件扩展名为.rm/.rvm

RealVideo is usually paired with RealAudio and packaged in a RealMedia (.rm) container.
realvideo 分版本有rv8 rv9 rv10

rmvb ：动态码率real video.

RealNetworks公司：RealAudio/RealVideo(压缩格式) RealPlayer（跨平台播放器）

RealPlayer 10是RealOne Player的替代版，加入RealAudio10及RealVideo10解码。


VC-1 / SMPTE.421M Spec

wiki H.264 vs VC-1：VC-1性能接近H264

VC-1 视频编码格式被 SMPTE 标准化 and implemented by Microsoft as Microsoft Windows Media Video (WMV) 9


MPEG-2 MP@HL MP@ML MP@LL  SP@ML
MPEG-4-AVC HP@L4.2 HP@L4.1
VC-1 AP@L3 MP@HL
MPEG4 ASP Part2   Divx/Xvid up to 1920x1080/60i resulution
H.263

On2（公司名）的 VP6 VP7 VP8

The SGX531 performance is rated at 500Mpels/sec and 16M polygons/sec.
PNX8471 能够做到 H264高清输出的同时，输出3D 1280x720p 30Hz的 randering update

Imagination Technologies PowerVR SGX 2D/3D graphics processor supporting dual independent displays

VC-1 H264 都是针对HD视频和广播设计的视频压缩技术，一些人选用H.264，另一些则倾向于VC-1

DTS (sound system)
theatre [ˈθiətə]
DTS(Digital Theatre System) 从技术上讲，DTS与Dolby Digital在内的其它声音处理系统是完全不同的

iPod录音文件是m4a

.MP4 versus .M4A file extensions

While the only official file extension defined by the standard is .mp4, various file extensions are commonly 
used to indicate intended content:

仅含mpeg-4音频的文件 .m4a. 

iTunes商店销售用FairPlay DRM加密的mpeg-4音频文件.m4p。
有声读物和podcast文件,包含章节信息, 图片等，也可用.m4a, 不过更常用的是 .m4b。
m4a不能加书签，.m4b能。iPhone使用.m4r而不是.m4a作为铃声(ringtones),其实也是MPEG-4 audio。
Raw MPEG-4 Visual bitstreams are named .m4v but this extension is also sometimes used for video in MP4 container format.

A tip; this can be caused by the m3u-file missing an #EXT-X-ENDLIST (indicating 
it is in fact a window over a live stream, rather than VOD-type content.

iPod支持	AAC(16-320 Kbps)、受保护的AAC(来自 iTunes Music Store)、MP3 (16-320 Kbps)、MP3 VBR、Audible、Apple Lossless、WAV、AIFF

Apple Lossless

百度视频是rmvb分割成2-4M的小块
音频:mpeg1 mpeg2 layer1/2  mpeg2-aac  mpeg4-aac mpeg4-he-aac  dd(ac3) dd+ lpcm

MPEG4:ASP divx VC-1  
mpeg2 AAC (13818-7
mpeg4 AAC/HE-AAC

解码格式：h.264、mpeg1/2、asp/divx/xvid

Nokia N82 描述:
MPEG-4 Part 2 (DivX/XviD), MPEG-4 Part 10 (H.264), RealVideo up to RealVideo 10
Apple Lossless苹果无损音频

ASF(Advanced Streaming Format)是专为在IP网上传送多媒体数据而设计，既可以传送视频文件，也可传送实时产生的节目。 

Advanced Systems Format (formerly Advanced Streaming Format, Active Streaming Format) is 
Microsoft's proprietary digital audio/digital video container format, especially meant for 
streaming media. ASF is part of the Windows Media framework.以前叫 streaming format 现在叫 system format

webm

flv文件做直播
flv有2类：flv 和 f4v 类似mp4，是 iso14496-12 的一个实现
可以用 video format analizer 打开

onMetaData
videodatarate : 8字节double类型

ffmpeg 将rtmp协议解析完成，输出flv文件

vorbis 

android 的音效都是.ogg 文件
apt-get install oggz-tools

oggz

RFC3533 : The Ogg Encapsulation Format

"Ogg" is derived from "ogging", jargon(行话，黑话) from the computer game Netrek:
  Ogging: This is the art of killing a carrier, or potential carrier, by a suicide run

xiph.Org:
The Xiph.Org Foundation is a non-profit corporation dedicated to protecting the foundations of Internet multimedia from control by private interests. Our purpose is to support and develop free, open protocols and software to serve the public, developer and business markets.

Vorbis audio compression

Vorbis is a lossy audio compression, commonly used in conjunction with the Ogg container format and it is therefore often referred to as Ogg Vorbis. 

.opus

Developed by IETF codec working group
Contained by Ogg, Matroska, WebM, MPEG-TS

Standard RFC 6716

Sample rates:
NB (narrowband)			4 kHz 	8 kHz
MB (medium-band)		6 kHz 	12 kHz
WB (wideband)			8 kHz 	16 kHz
SWB (super-wideband)	12 kHz 	24 kHz
FB (fullband)			20 kHz 	48 kHz (其实可以采到24k，但超过20k的部分不去编码)

Bitrates from 6 kb/s to 510 kb/s
Sampling rates from 8 kHz (narrowband) to 48 kHz (fullband)
Frame sizes from 2.5 ms to 60 ms
Support for both constant bitrate (CBR) and variable bitrate (VBR)
Audio bandwidth from narrowband to fullband
Support for speech and music
Support for mono and stereo
Support for up to 255 channels (multistream frames)
Dynamically adjustable bitrate, audio bandwidth, and frame size
Good loss robustness and packet loss concealment (PLC)
Floating point and fixed-point implementation

Linear Prediction

分析得出：
一个ogg包里面会包含多个opus包

=== mp4 ===
重要4工具：
Elecard Stream Analyzer
Elecard Video Format Analyzer (免费)
Elecard StreamEye
H264Visa

FourCC:Four-Character Codes
95个可打印字符 总共  95^4 = 81450625个可用组合

文档 iso14496-12  -14   apple的qtff

分析工具 Elecard video Format Analyzer。 elecard公司有很多专业的视频分析工具，但只有这个是免费的。
其他的经典工具还有 Elecard Stream Analyzer  Elecard StreamEye

mdat没有结构，内部数据靠其他结构解析

box名并不能完全对应解释的缩写

Elecard Stream Analyzer
可分析annexB格式ES流，且不分扩展名.264 .h264 .bin 都识别，
实测，最少pps+sps+I，仅sps+pps，不认。

FourCC

.mp4 是14496-12(ISO base media file format) 定义格式的一种实现。
可在mp4中嵌入任何形式数据，各种音视频编码，常见H.264和AAC。
M4V/F4V等与mp4类似，进行扩展或缩水。

3GP是MPEG-4 Part 12的一种实现 (a.k.a MPEG-4/JPEG2000 ISO Base Media file format), 
类似MP4 使用.3gp和.3g2，3GP也能存储非MPEG-4数据 (H.263, AMR)

.m4a : mp4 audio  

ffmpeg qt-fast，可以把MOOV移到MDAT前面

box存放文件宽高、时长、码率、编码格式、帧列表、关键帧列表，对应时戳和在文件中的位置

ftyp :file type 文件类型
mvhd :movie header 文件总体信息，如时长，创建时间等  (ffmpeg mov_read_mvhd)
mdhd :media header 定义TimeScale，trak需要通过TimeScale转换成真实时间
moov :metadata container
stbl :sample table，是container box,包含stsd stts等
stsd :sample descriptions 包含dref box进行sample数据检索信息。编码类型，宽高，长度，采样等信息
stts :time to sample (用于计算dts)
stsc :sample to chunk,sample和chunk的映射表
stss :sync sample 关键帧列表
stco :chunk offset
ctts :composition(布置) time to sample  用于有B帧情况
dinf :Data Information 解释如何定位媒体信息，是container box，dinf一般包含一个dref
dref :data reference ,下面包含若干url或urn
stsz :sample size
mdat :media data

ctts: This box provides the offset between decoding time and composition time
composition time 即pts

CT(n) = DT(n) + CTTS(n)  //显示时间=解码时间+ctts相应index的值

mdia->mdhd-> timescale 是时间基准，有的1000，有的2500，反正不是之前的90000
mdia->mdhd-> duration 以时间基为单位
stss->sample_number[x] 表示第几个帧是关键帧，例如why.mp4：
sample_number[1] 0x00000001
sample_number[2] 0x0000002c
sample_number[3] 0x00000052
sample_number[4] 0x00000076
用elecard eye 看，这些帧都是红色的I帧

stts: why.mp4
mdhd-> timescale = 1000 duration=205746 i.e. 205s

entry_count  2878
sample_count[1] 1
sample_delta[1] 42  (ms)
sample_count[2] 1
sample_delta[2] 41  (ms)
sample_count[3] 3
sample_delta[3] 42
...
1*42+1*41+3*42+... = 205746

帧率24，1000/24=41.6667

将sample进行分组即chunk， sample是媒体数据存储的单位，存储在chunk中，chunk和sample均可互不相同，见图sample&chunk.txt

sample :all the data associated with a single timestamp

why.mp4  size: 154311368
format Analyzer分析: mdat size:154166274 offset:0x236c6 = 145094
154166274 + 145094 = 154311368
而前面的145094包含 ftyp 24 + moov 145070
moov里2个trak最大

st->index_entries (AVIndexEntry结构体)
ff_index_search_timestamp() 此函数利用2分法，查找seek与物理位置对应关系

在 mov_read_seek() 加上xx_ANY 标志，某mp4流 12s，0s和9s处2个I帧，在0-9s之间seek时，会重新播放，加此标志后可以seek，只是seek到0-9s花屏

ffmpeg转mp4，mdat在前moov在后，猜测ffplay http播放不行，因为要找到文件头（moov）需要下载到最后，实际并非如此

每个box前面有4字节box长度，检测到mdat长度后，会跳过去直接读后面的moov

关系：
14496-12(iso base file format) <---> Apple Quicktime File Format(.mov)
14496-12 <--- mpeg4 file format 14496-14 (.mp4)
14496-12 <--- 3gpp file format(.3gp)
14496-12 <--- MJPEG2000 File Format 15444-3 (.mj2)

base file format Derived from the QuickTime file format defined by Apple Computer(第一行双向箭头的原因)

文件由一系列称为box或atom的对象组成

http://wiki.multimedia.cx/index.php?title=QuickTime_container

视频track的数量就是帧数，如hint后的 why.mp4 205.75s x 24帧/s = 4938 这与工具看到的 stco字段数基本相符
原始why.mp4 offset 没有那么多，而是靠stsc 分了组。组里的size加起来与offset对应 ，每组12或13个帧(与gop无关)
why.mp4转ts，gop为 43 38 36 32 35 ...

entry_size的个数是帧个数

stco/co64（用于大文件） 与 stsc 条目

stsd.avc1.avcC 包含了pps和sps，因为ts中每个I帧前的这2组都一样，所以mp4中只保存了一份（mp4比ts小的一个因素）
（why.mp4 转换为ts，在mp4的这个区域搜到了pps和sps）

白雪公主与猎人.mp4 视频部分是mpeg-4 不是h264.  stsd.mp4v.esds (无法用ffmpeg转为ts格式，ts只能h264和h262)
mdia->mdhd-> timescale = 2397 
stts = 100
100/2397 = 0.041718815 即41.7ms，帧率24

ffmpeg /mov.c

MKTAG('s','t','c','o'), mov_read_stco
mpeg-4 视频格式的mp4文件，帧之间靠 000001b6 分隔，类似于ts流的0x00000001分隔
而why.mp4 是4字节帧长度，这个长度要传入到264解码器中
sidamingbu.ts (IPBBPBBPBB...) 转换为mp4 为  i b p 存储顺序进一步调查，与ts不同了
并且带着pps sps aud  这与why.mp4 不同
gu  avc1  与另外一个的区别？  忘记录了
avcc
mp4的atom ：FIYP MOOF MOOV MRFA
mp4的ffmpeg信息：
Input #0, mov,mp4,m4a,3gp,3g2,mj2, from 'xx.mp4':
  Metadata:
    major_brand     : mp42
    minor_version   : 0
    compatible_brands: mp42isomavc1
  Duration: 00:00:30.04, start: 0.000000, bitrate: 2576 kb/s
    Stream #0:0(und): Audio: aac (LC) (mp4a), 48000 Hz, stereo, fltp, 63 kb/s (default)
    Metadata:
      handler_name    : Sound Media Handler
    Stream #0:1(und): Video: h264 (High) (avc1), yuv420p(tv, bt709), 1920x1080 [SAR 1:1 DAR 16:9] ...
    Metadata:
      handler_name    : Video Media Handler
      encoder         : AVC Coding

--
libavcodec/mpegvideo.h:    int msmpeg4_version;   ///< 0=not msmpeg4, 1=mp41, 2=mp42, 3=mp43/divx3 4=wmv1/7 5=wmv2/8
msmpeg4 :Microsoft MPEG-4 ??  查看wikipedia： Windows Media Video 字段

=== end mp4 ===


=== jpeg ===
使用SIMD的jpeg库:libjpeg-turbo

Joint Photographic Experts Group

bmp 0x36字节头，接着左下角像素，顺序BGR

libjpeg
cjpeg(压缩) djpeg(解压缩) 是libtool生成的.libs下2个可执行文件的shell封装
直接运行.lib下的djpeg提示找不到libjpeg.so动态库
但是用cjpeg脚本无法gdb

JFIF: JPEG File Interchange Format，JPEG档案交换格式

改静态链接：

V=1 显示编译详情

./djpeg -bmp xx.jpg > xx.bmp
./djpeg -bmp -outfile 1.bmp  1.jpg (优选)

./configure  --enable-maintainer-mode 才能使修改makefile.am生效，
要编译静态链接的cjpeg，修改makefile.am为：
#cjpeg_LDADD      = libjpeg.la
cjpeg_LDADD      = ./.libs/libjpeg.a
或：
cjpeg_LDADD      = -ljpeg
cjpeg_LDFLAGS    = -static
这2种方法虽能生成，但make -j4有问题，说明依赖关系没有建立好，
可以这样：
./configure --enable-shared=no

默认生成的CFLAGS是 -g -O2 (makefile.in中 @CFLAGS@展开)
可以 ./configure --enable-shared=no  CFLAGS=-g  这样去掉-O2


rdjpgcom/wrjpgcom是处理文件头基本信息：
./rdjpgcom   -verbose  1.jpg
JPEG image is 1440w * 900h, 3 color components, 8 bits per sample
JPEG process: Progressive

Progressive和baseline

jpeg baseline 最大尺寸 30720x17280
驱动只能支持 2048以内的解码. thinning modes  1/2 1/4 1/8 

逐行压缩
Rdbmp.c中读取原始数据

(*src_mgr->start_input) (&cinfo, src_mgr); 调用了rdbmp.c中的start_input_bmp
里面的   /* Allocate one-row buffer for returned data */
  source->pub.buffer = (*cinfo->mem->alloc_sarray)
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (biWidth * 3), (JDIMENSION) 1);

biWidth 是bmp一行的像素数，这里分配了能够存储1行像素的buffer

bmp 一行不足4字节对齐要补齐。

先从最后一行原始数据开始运算。

jpeg-turbo

turbojpeg 1.4.2 编译：
1 aclocal
2 autoreconf -i
3 configure
4 make


jsimd_ycc_extxrgb_convert_neon
colorid() == ext xrgb 

5个参数：
EXTERN(void) jsimd_ycc_extxrgb_convert_neon
        JPP((JDIMENSION out_width,
             JSAMPIMAGE input_buf, JDIMENSION input_row,
             JSAMPARRAY output_buf, int num_rows));

generate_jsimd_ycc_rgb_convert_neon extxrgb, 32, 1, 2, 3

配置:
./configure CC=arm-linux-androideabi-gcc --host=arm-linux


ycc转rgb的函数调用次数等于图片行数，output_width等于每行像素数。

Save as 16-bit 565 BMP has incorrect header size  可以有16bit bmp

-bmp           Select BMP output format (Windows style)
-os2           Select BMP output format (OS/2 style)
-pnm           Select PBMPLUS (PPM/PGM) output format (default)

GIMP 打开一个bmp，另存，选bmp，save，高级选项选择16bit

jpeg有4:2:2和4:2:0之分
MMAC_JPEG_SetDecBuff和MMAC_JPEG_GetDecBuff函数
 imgBuff(Y,C) = each sizeX  x  SizeY
 prgBuff(Y,Cb,Cr) each sizeX x Sizey *1.5 
4:2:2或4:2:0 在设置MMAC_BITBLT_Blit的参数的时候区分一下即可:
MMAC_BITBLT_YUV422_XY_MPEG1_UNPACKED_601或
MMAC_BITBLT_YUV420_XY_MPEG1_UNPACKED_601
其他几处的设置仍然是420

Lossless JPEG

Jpeg压缩过程
1 分配并初始化JPEG compression对象
2 指定压缩数据的目标如文件
3 设置压缩参数如image大小，颜色空间
4 jpeg_start_compress(...);
  while (scan lines remain to be written)
		jpeg_write_scanlines(...);
  jpeg_finish_compress(...);
5 释放JPEG compression object

Jpeg解压缩过程
1 分配并初始化JPEG decompression对象 jpeg_decompress_struct
2 指定数据源
3 调用jpeg_read_header() 获取image信息
4 设置解码参数
5 jpeg_start_decompress(...);
  while (scan lines remain to be read)
		jpeg_read_scanlines(...);
  jpeg_finish_decompress(...);
6 释放JPEG decompression 对象

jpeg_abort() 终止编解码过程
jpeg_destroy() 销毁编解码对象

jpeg库没有静态变量，所有状态都在compression/decompression对象中，所以可以用多个jpeg对象并行处理多个解压缩过程。

r -bmp -outfile 1.bmp 1.jpg

djpeg.c分析：
while (cinfo.output_scanline < cinfo.output_height) {
	num_scanlines = jpeg_read_scanlines(&cinfo, dest_mgr->buffer, dest_mgr->buffer_height); //jdapistd.c
	(*dest_mgr->put_pixel_rows) (&cinfo, dest_mgr, num_scanlines); //进入wrbmp.c : put_pixel_rows
}

mainp 变量

MCU(Minimum Coded Unit)

DCT顺序模式：编/解码一次扫描
DCT递进模式：编/解码需多次扫描，扫描效果从粗糙到精细，逐级递进

JPEG使用DCT、哈夫曼编码、顺序模式

压缩步骤：
1 8*8分块
2 DCT
3 quantization
4 Z形编码(zigzag scan)
5 使用差分脉冲编码调制(DPCM)对直流系数(DC)进行编码
6 使用行程长度编码(RLE)对交流系数(AC)进行编码。
7 熵编码 (哈夫曼编码和算术编码)

Huffman coding / arithmetic coding

比特平面编码，行程编码（游程编码，RLE），哈夫曼编码（huffman），LZW（lempel_ziv_welch）编码，算术编码，LZ78编码，无损预测编码

quantization:

Round()  四舍五入

JPEG 2000 ISO/IEC 15444 part1 到 part 14
part-1 :Core coding system
用wavelet不用dct (2nd-level CDF 9/7 wavelet transform)
===end jpeg ===


建议编码参数如下：

视频：
编码算法：H.264（必须）
编码档次：Main Profile或以上
宽高比：按照节目输入确定，保持宽高比（必须）
视频帧率：25（推荐），值为帧间隔的1/2（播放所需最优性能，必须）
关键帧间隔：50帧（推荐）
码率：CBR（必须）
平均码率和分辨率：按照方案确定。
GOP：关（必须）
B帧：关闭（提高解码效率）（必须）
反交错预处理：以播放效果无横条确定
 
音频：
编码算法：AAC_LC（必须）
声道：双声道
采样率：44.1khz
音频码率：96kbps（建议不要超过128kbps）
音频增益：视音频大小调节，建议不要超过15dB


=== hls ===
HTTP Live Streaming： http://tools.ietf.org/html/draft-pantos-http-live-streaming-13
 
切片3种：
MPEG-2 Transport Stream [ISO_13818]
MPEG audio elementary stream [ISO_11172] 独立音频
WebVTT (The Web Video Text Tracks Format) 字幕

#EXTINF:<duration>,<title>
#EXT-X-ENDLIST 标示列表结束
#EXT-X-PLAYLIST-TYPE: EVENT  时移功能
#EXTINF:[int/double]，表示这个片段的总时长，可通过它找见跳转位置的TS片段； 
#EXT-X-DISCONTINUITY，新时间点开始,数据流pts从0开始。准备换算，否则IMediaSeeking::SetPositions找不到。
有的M3U8没有这个字段，大部分是影片总长度比较小的（不绝对）

广告与正片无缝衔接

苹果bipbopall.m3u8 多码率二级表：
#EXTM3U
#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=200000
gear1/prog_index.m3u8
#EXT-X-STREAM-INF:PROGRAM-ID=1, BANDWIDTH=311111
gear2/prog_index.m3u8

ffplay播放多码率视频，当多Program处理，stream按照 #0，#1，#2...顺序排列。
默认播放二级表中第一条，通过-vst 2 -ast 3 可以指定播放第二条。

wowza sample.mp4的m3u8

#EXTM3U
#EXT-X-VERSION:3
#EXT-X-TARGETDURATION:13
#EXT-X-MEDIA-SEQUENCE:0
#EXTINF:11.25,
media_w1773380701_0.ts
#EXTINF:11.25,
media_w1773380701_1.ts
...
#EXTINF:1.541,
media_w1773380701_54.ts
#EXT-X-ENDLIST

dvr系统停止数据源，变成点播：

启动dvr
#EXTM3U
#EXT-X-VERSION:3
#EXT-X-ALLOW-CACHE:NO
#EXT-X-TARGETDURATION:4
#EXT-X-MEDIA-SEQUENCE:577569  //注意，这里标注第一条
#EXTINF:2.56,
media_w979079760_DVR_577569.ts
#EXTINF:2.56,
media_w979079760_DVR_577570.ts
...
#EXTINF:2.56,
media_w979079760_DVR_578035.ts

服务器 20分钟  2.56s一段  共467段

出错退出的时候只循环到427

把一个m3u8列表中的所以文件全部下载的好方法：gedit替换方式编译列表文件为绝对路径，用wget -i file下载
苹果http://devimages.apple.com/iphone/samples/bipbop/gear4/prog_index.m3u8 的片长就是整数，都是10s，能切这么准吗？不考虑I帧对齐？
协议中看，可能是round的结果

#EXT-X-MEDIA-SEQUENCE 定义第一个切片的序列号，每个ts文件在m3u8中有唯一的序列号，该序列号用于在MBR时切换码率进行对齐。

hlsenc.c : HLS segmenter

移动要求转码器 2s要有一个I帧，I帧稀疏跳转会有很多问题。

http的  X-Playback-Session-Id  这是apple的http扩展

—cache—
221.181.100.148/140_0_3736686_0.m3u8
这是一个2级地址表：
#EXTM3U\r\n
#EXT-X-VERSION:1\r\n
#EXT-X-STREAM-INF:PROGRAM-ID=1,BANDWIDTH=0\r\n
http://221.181.100.149/3000120544.m3u8?stbId=xxxx

继续请求221.181.100.149， 返回302，（说明这里是cache服务器）  仅在这里调度一次！！！！！！
返回：
Location:http://live.shyd.chinacache.net:80/xx/xx/3000120544.m3u8

向dns服务器请求 live.shyd.chinacache.net
dns Answers：
live.shyd.chinacache.net   hezi.shyd001.cncssr.chinacache.net  地址211.90.29.21

继续请求：
211.90.29.21:/xx/xx/3000120544.m3u8

==== wowza ====
http://[wowza-ip-address]:8088/enginemanager

点播地址：http://IP:1935/vod/mp4:sample.mp4/playlist.m3u8
过期提示：License key has expired

license文件位置：conf/Server.license 明文

同一个bin文件可以多次使用不同license。
SVRT3-hwjvQ-nRAbm-WhKn3-tBFAX-AdDDF-44uK744dyP4c 显示过期日 5月11日

安装目录:/usr/local/WowzaMediaServer 
基于Java技术 lib目录下是一些jar包

ios版测试网页：iphone  ipad 华为手机，都可以嵌入式播放。
nexus7 网页显示不支持hls，把地址直接复制到地址拦，可以直接转到gallery播放
FX-5 dongle ：可网页嵌入播放(rockchip rk3066方案 不会是软解吧)

并发测试软件 loadrunner

dlna能分享avi mkv 文件吗？
梳理，梳理，再梳理！
使用Wowza流服务器，使用例子网页
黑衣人.mp4 1920x1080 H.264+AAc  
Nexus7 直接访问网页显示
HTML5 or HLS is not supported in this browser
直接粘贴在地址栏，能转到gallery播放

vlc 里面显示视频格式mpgv 代表mpeg1/2   

User Agent Switcher
点“菜单栏”上的“工具”，在下拉菜单中选择“附加组件”
在“获取附加组件”中，搜索User Agent Switcher，点击“添加至Firefox”，然后在弹出的窗口点击“立即安装”
User-Agent: Mozilla/5.0 (iPhone; CPU iPhone OS 6_1_3 like Mac OS X)

BASIC 认证方法
iftop
iperf 独立测试网卡 8.5Gbps

dvr 存储路径
WowzaMediaServer/dvr/dvr/_definst_/cctv1.stream.0

0000_00_00  0000_10_00  0000_20_00  manifest.txt
10分钟一个目录

<WindowDuration>600</WindowDuration>
设置timeshift时间

timeshift 每段1.92s
每次请求都不同

media_w2138296121_DVR_0.ts
#EXTINF:1.92,
media_w2138296121_DVR_1.ts


#EXTINF:0.96,
media_w1158439516_DVR_0.ts
#EXTINF:1.92,
media_w1158439516_DVR_1.ts

在content/下生成cctv1.stream.flv 删除了还会重新生成。dvr启动后就开始了录制

组播流端口选择10000，wireshark显示ndmp 什么意思？

注：为什么wireshark不认rtp流，需要右键选Decode as 选rtp。
因为udp头里面没有表明rtp协议的地方，后面的数据只能认为纯data，rtp协议开头的交互
wireshark没有捕获到，好比从中间接听谈话，不知到对方在说什么一样

打入wowza的组播流原地址必须是192.169.0.x 也就是跟wowza服务器第二个网口地址在同一个网段
在调试瑞码视频监控器的时候发现不这样就不能工作

hls点播ts段10s，直播2.5s左右

用vlc模拟推送udp格式ts流
===end hls ===
