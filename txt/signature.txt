android 如何更换系统apk的签名

GPG
PGP

ubuntu系统：

id_rsa 私钥，可以ubuntu打开，显示一把钥匙（原来讨论的都是显示一个证书图标）
这个格式跟 apk签名用的testkey.pk8 各式是一样的！  问题来了，私钥256字节（2048bit）这个文件1.2k，其他是什么信息
id_ras.pub 公钥

id_ras.pub 去掉首尾信息，base64解码，得到 256+23, 粗略讲，23字节是头，包含 "ssh-rsa"这样的信息，具体：
vlc 变长编码：
0000000: 00 00 00 07 73 73 68 2d 72 73 61 00 00 00 03 01  ....ssh-rsa.....
0000010: 00 01 00 00 01 01 00 f0 3c 58 28 fb 91 ee 31 64  ........<X(...1d
0000020: 54 b3 ce d8 69 a8 aa 97 d2 b9 74 3d 8d 1b 42 e5  T...i.....t=..B.
0000030: 97 31 b4 b6 95 36 b6 31 e0 ad 2e 0f 6b ac 33 00  .1...6.1....k.3.
0000040: 2f 61 da 23 87 38 43 ba f0 3d d4 28 b0 a4 22 84  /a.#.8C..=.(..".
0000050: 09 6d 30 e2 c9 bf 56 94 ce f0 f7 de 2c 03 02 86  .m0...V.....,...
0000060: 20 55 6a de 80 b7 1d 24 12 d1 dd 6e 61 ef 1f 37   Uj....$...na..7
0000070: 1e 4e c6 1e 0f aa 40 c8 81 63 84 c7 7e 89 82 9a  .N....@..c..~...
0000080: 66 4a 32 d1 ae 58 72 08 fb a7 43 e0 67 bf 11 f6  fJ2..Xr...C.g...
0000090: f1 06 32 29 8c 60 45 73 a2 35 ba ac 93 68 b7 18  ..2).`Es.5...h..
00000a0: 9b 8f a8 30 e4 3a 1b ea 25 92 31 e3 8c dd 87 52  ...0.:..%.1....R
00000b0: d5 d6 fd 36 ae 72 d0 b3 f0 5e a6 c5 1d 5c 58 8a  ...6.r...^...\X.
00000c0: 0b ef 66 0a a3 bd fe b8 fe f3 98 68 51 67 b9 a7  ..f........hQg..
00000d0: 31 43 2f 74 21 61 4a 3e 61 8b d5 7a c0 27 01 ac  1C/t!aJ>a..z.'..
00000e0: e8 69 78 30 b2 d0 95 7d 29 7e d3 92 2b b6 b5 5b  .ix0...})~..+..[
00000f0: 58 a7 d0 27 31 71 3f 47 3e cc f3 42 41 da 35 19  X..'1q?G>..BA.5.
0000100: ef b4 09 80 bd 8b 4b 78 49 09 d6 69 19 cb 7a 53  ......KxI..i..zS
0000110: 66 50 93 c2 ad 05 59                             fP....Y

00 00 00 07  “ssh-rsa” 7个字符
00 00 00 03  01 00 01 （不知道什么含义）
00 00 01 01  256+1 字节 ，基本是256字节吧，不知道为啥多一个
问题：这个文件即便扩展名 .pem ubuntu也无法正常解析显示


猜测：指纹信息不会存储在私钥，或者证书文件中，因为可以随时计算出来

RFC 1421－1424
PEM : Privacy Enhanced Mail
ITU-T X.509 通用证书格式
testkey.x509.pem (base64编码) file显示：PEM certificate
删除
-----BEGIN CERTIFICATE-----
-----END CERTIFICATE-----
base64 -d testkey.x509.pem > xx.bin.pem
文件大小1.6k 变为 1.2k (base64 3byte变4byte)
两种形式都可以ubuntu打开


.pk8 private key 私钥

./build/target/product/security/platform.x509.pem

签名：
build/target/product/security/ : testkey.x509.pem(public) and testkey.pk8(private)

build/tools/signapk/SignApk.java :
生成signapk.jar，利用JarOutputStream包，类似jar打包程序

java -Xmx2048m -jar signapk.jar -w testkey.x509.pem testkey.pk8 /tmp/tmps7a8NL m200-ota-xxx.zip
对zip包重新签名，签名前是普通zip包，签名后变为jar包（file查看）

-Xmx2048m 对于签名很大的ota包需要，较小的apk不需要

java -jar signapk.jar testkey.x509.pem testkey.pk8 xx.apk xx-sign.apk
-w :wholefile 签名，ota需要，apk不需要

//可见
Usage: signapk [-w] publickey.x509[.pem] privatekey.pk8 [publickey2.x509[.pem] privatekey2.pk8 ...] input.jar output.jar

ota包：
openssl pkcs8 -in build/target/product/security/testkey.pk8 -inform DER -nocrypt (??)

/system/etc/security/otacerts.zip

make_key(shell)产生.pk8和.pem
development/tools/make_key testkey  '/C=US/ST=xx/L=xx/O=Android/OU=xx/CN=Android/emailAddress=xx@xx.com'
实测，C=US 必需是2个字母，应该是国家代码，否则错误

tmps7a8NL这个文件用完会自动删除（python的tmp文件机制），我在适当位置加time.sleep(50)，有充足时间把它拷贝了出来

apk:
META-INF/CERT.RSA(证书，扩展名改为.pem ubuntu可打开)
META-INF/CERT.SF
META-INF/MANIFEST.MF

OTA升级包：
签名增加文件:
META-INF/com/android/otacert  //ota certify，testkey.x509.pem复本 
META-INF/com/CERT.RSA    //证书，里面包含公钥和签名
META-INF/com/CERT.SF     //摘要的摘要(.sf signature file)
META-INF/com/MANIFEST.MF //文件摘要 （.mf minifest file）

问题：CERT.RSA ubuntu打开与testkey.x509.pem内容一样，条目没多没少，但大小确不同
也对，CERT.RSA包含了证书，还包含apk数据的签名，而testkey.x509.pem只是证书，那CERT.RSA中apk的签名怎么看不到呢？
实验测试2个不同文件的签名，CERT.RSA文件最后256Byte不同！正好2048bit，应该是签名

但CERT.RSA比testkey.x509.pem的bin形式多了518字节，除了这256字节的签名，还有大约256字节呢？

CERT.SF 是对MANIFEST.MF文件以及条目的再次SHA1SUM
第一组：
Signature-Version: 1.0
Created-By: 1.0 (Android SignApk)
SHA1-Digest-Manifest: K8BOP2Uc/qtZg1o5qwnsnk2RHVk=
是对MANIFEST.MF整个文件的sha1的base64
问题：对.MF整个文件做了摘要，就没必要对每个条目再做摘要呀！

zipalign优化

keytool jarsigner 是jdk工具
keytool -printcert -file xx

manifest.mf条目sha1例如：
Name: system/etc/alarm_blacklist.txt   
SHA1-Digest: zvVaepvlE9gkFke0RkPoYjXOlbo=
\r\n 注意这里要再追加回车换行
保存为windows类型换行，对这个文件sha1 再base64 得到cert.sf条目

进入解压目录，jar -cMf   ../sign-2.zip  * 也能生成（不知道能不能用）

file显示：Java Jar file data (zip)
普通zip显示：Zip archive data, at least v1.0 to extract

ota zip包解压再压缩不能升级（签名没有变，不是java格式）

系统属性apk需系统签名：INSTALL_FAILED_SHARED_USER_INCOMPATIBLE

生成key的过程：
1. 把pkcs8格式的私钥转换为pkcs12格式
$ openssl pkcs8 -in shared.pk8 -inform DER -outform PEM -out shared.priv.pem -nocrypt

2.生成pkcs12格式的密钥文件：

$ openssl pkcs12 -export -in shared.x509.pem -inkey shared.priv.pem -out shared.pk12 -name key
3.生成keystore：

$ keytool -importkeystore -deststorepass android -destkeypass android -destkeystore keystore -srckeystore shared.pk12 -srcstoretype PKCS12 -srcstorepass android -alias key


openssl pkcs8 -in platform.pk8  -inform DER -outform PEM -out platform.priv.pem -nocrypt
openssl pkcs12 -export -in platform.x509.pem -inkey platform.priv.pem -out platform.pk12 -name key


keytool -importkeystore -deststorepass android -destkeypass android -destkeystore keystore -srckeystore platform.pk12 -srcstoretype PKCS12 -srcstorepass android -alias key

docusign
电子签名(eSignature)的全球标准DocuSign发布电子签名交易管理平台

RSA 2种场景：
公钥加密、私钥解密：用于安全通信领域
私钥加密、公钥解密：用于数字签名

直接对数据加密用
openssl 写列命令


data too large for key size

http://stackoverflow.com/questions/7143514/how-to-encrypt-a-large-file-in-openssl-using-public-key

Public-key crypto is not for encrypting arbitrarily long files. One uses a symmetric cipher (say AES) to do the normal encryption. Each time a new random symmetric key is generated, used, and then encrypted with the RSA cipher (public key). The ciphertext together with the encrypted symmetric key is transferred to the recipient. The recipient decrypts the symmetric key using his private key, and then uses the symmetric key to decrypt the message.

The private key is never shared, only the public key is used to encrypt the random symmetric cipher.


Fingerprints are created by applying a cryptographic hash function to a public key. Since fingerprints are shorter than the keys they refer to, they can be used to simplify certain key management tasks

指纹：
Fingerprint: 8f:61:41:b3:97:dc:db:d4:c8:46:1a:33:8c:cb:1d:a7


libssl is part of the OpenSSL implementation of SSL. 

2级bootloader启动，1级引导2级，2级校验和加载应用

启动，检查签名并加载下级loader2 1级loader不可更改，2级loader支持升级、校验、恢复、加载应用软件


问题：
android系统的公钥或私钥 有存储吗？  存哪里？

验证一个.pem文件：

OpenSSL provides two primary libraries: libssl and libcrypto.
The libcrypto library provides the fundamental cryptographic routines 

openssl 集成众多密码算法及实用工具

openssl dgst -binary -sha1 123  >sha1.bin  生成bin格式


------ssh-----
public key fingerprint :  
ssh-keygen -lf /path/to/key.pub

ssh-keygen -t rsa -C "xx@xxx.com"

ssh-keygen -f "/home/username/.ssh/known_hosts" -R [192.168.1.52]:29418  删除
ssh-keygen -t rsa -C "username@cyclecentury.com" 同一机器2次运行内容不同
访问过的计算机公钥记录在~/.ssh/known_hosts，若被入侵可由此得知，OpenSSH4.0引入Hash Known Hosts，known_hosts内容以hash方式存放，
默认关闭，需在ssh_config加"HashKnownHosts yes" 开启
ssh-keygen协助管理hash了的known_hosts
ssh-keygen -F 计算机名称"找出相关的公钥：
ssh-keygen -F www.example.net

ssh-keygen -R 计算机名称 //删除该计算机公钥，
再"ssh 计算机名称"再进入该计算机，ssh重新下载新公钥。
ssh-keygen -H

bouncycastle  java加密算法包

The following commands were used to generate the test key pairs:

  development/tools/make_key testkey  '/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'
  development/tools/make_key platform '/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'
  development/tools/make_key shared   '/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'
  development/tools/make_key media    '/C=US/ST=California/L=Mountain View/O=Android/OU=Android/CN=Android/emailAddress=android@android.com'

The following standard test keys are currently included:

testkey -- a generic key for packages that do not otherwise specify a key.
platform -- a test key for packages that are part of the core platform.
shared -- a test key for things that are shared in the home/contacts process.
media -- a test key for packages that are part of the media/download system.

These test keys are used strictly in development, and should never be assumed
to convey any sort of validity.  When $BUILD_SECURE=true, the code should not
honor these keys in any context.


signing using the openssl commandline (for boot/system images)
--------------------------------------------------------------

1. convert pk8 format key to pem format
   % openssl pkcs8 -inform DER -nocrypt -in testkey.pk8 -out testkey.pem

2. create a signature using the pem format key
   % openssl dgst -binary -sha1 -sign testkey.pem FILE > FILE.sig

extracting public keys for embedding
------------------------------------
it's a Java tool
but it generates C code
take a look at commands/recovery/Android.mk
you'll see it running $(HOST_OUT_JAVA_LIBRARIES)/dumpkey.jar
