2018 只做nrf51

nrf51822-qfax M0 晶体16M 
n51822-qfaa 256+16 (microbit)
n51822-qfac 256+32


nRF51 Dongle: nRF51422, 包含 Jlink-OB(atmel 接口芯片)


芯片到天线之间的电路，叫 Matching network


轨迹跟踪板： nRF52832, M4 64MHz 512k+64k
nRF52832-MDK

nRFgo Studio，SEGGER J-Link, 2012-OB V7.00版实测可用
MCU有程序并锁定时，mdk无法下载调试，用nRFgo擦除flash

Cannot Load Flash Programming Algorithm:
RAM for Algorithm，size由 0x1000(4k) 改为 0x2000(8k)

ST-Link

UICR: User Information Configuration Registers
-----


https://www.techwillsaveus.com/shop/mover-kit/


---mesh---
https://devzone.nordicsemi.com/blogs/672/accessing-the-ble-mesh-via-the-spark-cloud/


--- nRF24L Series ---
nRF24L01+
nRF24LE1 = 24L01 + 8051
nRF24LU  = 24LE1 + USB

yao: STM32L051K8U6  红色标志为VCC，同面另一边为GND，中间CLK，对面中间DIO

arduino 库中有 8 个相关库

ANT is a proven, ultra low power, flexible and easy-to-use network protocol for 2.4GHz ISM band communication

nrf51822 支持 Nordic Gazell 2.4 GHz protocol stack，兼容 nRF24L 系列

无线充电：
按钮模块 不需要，一个纽扣电池 工作1年,   led 模块 耗电量大，需要充电
---------------------



SoftDevices: Nordic protocol stacks 不开源
S110/S120/S130 (nrf51822 只支持这3个) 
S210
S310

S110/120/130 只是BLE
S210 是 ANT
S310 是 ANT + BLE


那 2.4G 怎么用，不会是从0开始控制寄存器吧？

下载：
S110-SD-v8 (前面还有v1 - v7)
S120-SD-v2
S130-SD-v2

nRF5-SDK-for-Mesh : SDK for ble mesh for nRF51 and nRF52 Series

SDK 也是nRF51/52 一体的，分为 v12 和 v14， 在 nrf51822 产品页上提供的是 v12
nRF5-SDK-v12: works with S132 v3 and S130 v2( 这个前面有下载, 好乱)

nRF51 IoT SDK : for applications using IPv6 over Bluetooth low energy


nRF51 DK:  是官方 nrf51 开发板


nRF5_SDK_14.0.0_3bcc1f7/examples/peripheral/blinky_freertos/pca10040/blank/arm5_no_packs  例子可工作，灯闪了

freeRTOS  :nRF5_SDK_14.0.0_3bcc1f7/external/freertos/source

驱动：
nRF5_SDK_14.0.0_3bcc1f7/components/drivers_nrf


nRF51 DK -- PCA10028
nRF52 DK -- PCA10040
N52840(邓工)--PCA10056  接口芯片 ATSAM3U2C (atmel cortex-m3 96MHz 128+32k)

介绍：nRF51 DK 支持 BLE, ANT and 2.4GHz， 说明2.4G跟ANT 也不是一回事

-----------
目标:
先在 microbit 上把sdk V12 的例子跑起来，最好用 gcc 开发

ESB：Enhanced ShockBurst

Enhanced ShockBurstTM 模式比ShockBurst 模式多了一个确认数据传输的信号，保证数据传输的可靠性。EnhancedShockBurst 收发模式下,
使用片内的先入先出堆栈区,数据低速从微控制器送入,但高速(1Mbps)发射,这样可以尽量节能与射频协议相关的所有高速信号处理都在片内进行,这种做法有三大好处：

尽量节能。
低的系统费用(低速微处理器也能进行高速射频发射)。
数据在空中停留时间短，降低了碰撞几率，提供了抗干扰性能。

https://www.cnblogs.com/zjutlitao/p/5760295.html


sdk文档：
https://devzone.nordicsemi.com/documentation/nrf51/4.4.2/html/group__nrf__dev__radio__rx__example__main.html#gaf15ec0aba4e9ea403b83477f43dcab7b


nrf_gzll_add_packet_to_tx_fifo   (Gazell)
而
nrf_esb_add_xxxx  函数没有了


SDK/components/proprietary_rf/ 下有 esb  gzll 2个目录

Gazell is a protocol for setting up a robust wireless link between a single Host and up to eight Devices in a star network topology
. It is designed to minimize power consumption in power-sensitive wireless desktop products and is also suitable for a range of other wireless applications.



nrf_esb_init---初始化ESB
nrf_esb_enable---使能ESB
nrf_esb_add_packet_to_tx_fifo---将数据送入发送队列



重要参考资料，详细说明esb gzll的用法
http://infocenter.nordicsemi.com/index.jsp?topic=%2Fcom.nordic.infocenter.sdk51.v9.0.0%2Fgzll_02_user_guide.html

2.4G 例子：
examples\proprietary_rf



24L01 不能跑 ANT，  用2.4G  就是因为 终端传感器简单

The ESB protocol was embedded in hardware in the legacy nRF24L Series

Primary Receiver (PRX)
Primary Transmitter (PTX)

1个PRX 可以与 8个 PTX 通讯

nrf51 与nrf24 通讯的话，需要 #define NRF_ESB_LEGACY  来兼容
因为 nRF24L ESB examples do not use "payload in ACK"

nrf51一侧，就靠 nrf_esb.c 驱动


-----
先用 esb_ptx  esb_prx 2个工程，在microbit上 跑通了：


先 用2个microbit 通讯，再用microbit + 24L01



mbed Serial 驱动：mbed 官网下载



PCA10028 的 串口例子，在microbit上没有通，   mdk编译出来是 51422 的代码，改成51822_AA 也不行




microbit 可以用MDk debug， 调试器选择 CMSIS-DAP

microbit 串口可以了    RX_PIN TX_PIN 在 board.h里面配置没有生效？
