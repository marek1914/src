//打印调用堆栈
RuntimeException e = new RuntimeException("run is here");
e.fillInStackTrace();
Log.d(TAG, "xxx", e);

PRODUCT_COPY_FILES  src:des  不能写在 Android.mk中

minigzip
mkbootfs
mkbootimg
fs_config
zipalign
bsdiff
imgdiff
dumpkey.jar
signapk.jar
BootSignature.jar
mkuserimg.sh
make_ext4fs
mksquashfsimage.sh
mksquashfs
mkf2fsuserimg.sh
make_f2fs
simg2img
e2fsck
build_verity_tree
verity_signer
append2simg
img2simg
boot_signer
brillo_update_payload
lib/shflags/shflags
delta_generator

make bootimage   
make out/target/product/xxx/boot.img  showcommands
疑问：showcommands 是 modifier pseudo-target， 并非make特性， 是android的特殊写法，不管在前在后，能切换@开关
可以用在make，也可用在 mm mmm

croot/godir

CLEAR_VARS:= $(BUILD_SYSTEM)/clear_vars.mk 把各种变量赋为空
/data/local/tmp shell权限可访问

make update-api  #frameworks 定义了新公有变量、方法要提交 frameworks/base/api/current.txt

system/core/libutils/FileMap.cpp
system/core/libutils/Threads.cpp

frameword/base/libs/androidfw/ZipFileRO.cpp

RefBase子类对象第一次创建时，对象构造完成时会调用onFirstRef()   bootanimation在这里调run，构造里run不行吗

dumpsys meminfo com.xx.test  //查看内存
mstar，bootanim在init.rc里改为system uid， bootanimation从8s延长到15s
改为graphics uid ok（new时不返回）

setprop ctl.start bootanim
setprop ctl.stop bootanim

bootanimation在init.rc配置为disable，
surfaceflinger的readyToRun的startBootAnim();//通过属性值触发Init进程启动

退出靠 service.bootanim.exit == 1 或线程执行完，自然退出
没有使用 ctl.stop bootanim

void SurfaceFlinger::bootFinished()  
{  
    property_set("service.bootanim.exit", "1"); //bootanimation检测
}

调用bootFinished 是靠
native/include/gui/ISurfaceComposer.h 中的注释
        // Note: BOOT_FINISHED must remain this value, it is called from
        // Java by ActivityManagerService.
        BOOT_FINISHED = IBinder::FIRST_CALL_TRANSACTION,


base/services/java/com/android/server/wm/WindowManagerService.java:
surfaceFlinger.transact(IBinder.FIRST_CALL_TRANSACTION, // BOOT_FINISHED    靠这里触发

服务必须在 init.rc 中定义，init进程解析init.rc和启动属性服务，
属性ctl.start/ctl.stop用来启动和停止服务。
服务的启动结果放入“ init.svc.<服务名>“属性中
init.svc.<服务名> 的值可能是  stopped


1280 720 1  // 1代表 帧/s
p 0 0 part0 // 分别指循环次数（0代表无限次）和阶段间隔时间

//mstar
usleep(part.pause * ns2us(frameDuration));
可见这个间隔时间是以帧为单位，如 10帧/s，这里写20就代表暂停2s

打包的时候一定不要压缩文件(压缩比为0)。

bootanimation 启动但是run() 很晚，构造函数执行 SurfaceComposerClient()有关

const String8 path(entryName.getPathDir());
const String8 leaf(entryName.getPathLeaf());

画面显示
eglSwapBuffers(mDisplay, mSurface);

文件排序:SortedVector 可1/2/3，a/b/c

setPreviewDisplay（null）就可以不预览了

反汇编：
http://blog.csdn.net/kesenhoo/article/details/6544094
dex2jar  jd-gui

设置保存在：./data/com.android.providers.settings/databases/settings.db-journal

sqlit: .db .db-journal

https://www.sqlite.org/tempfiles.html
2.1 Rollback Journals

$dumpsys packet
service list  查看系统提供的服务
ndc : netd client
$ndc monitor
$ndc netd list
$ndc mdns mdnsd start service

android按键码的解析
/frameworks/base/include/androidfw/KeycodeLabels.h 这里解析

android:versionCode="1"
android:versionName="1.0"
android.intent.category.HOME //launcher

data目录是system权限 system 会挂载成 ro 形式。

关于android shell的权限问题

aapt :Android Asset Packaging Tool  ## frameworks/base/tools/aapt
aapt dump badging xx.apk

/etc/udev/rules.d/51-android.rules
SUBSYSTEM=="usb", ATTR{idVendor}=="17ef", ATTR{idProduct}=="7435", MODE="0666" OWNER="gaojie"
~/.android/adb_usb.ini (新版adb好像不需要)

debian(pi/virtual box)，没有.rules .init 也能连adb, 好像是debian自带的adb 而不是apt-get install的，那也应该无权才对
这是权限控制，root用户不需要添加任何文件，可我没用root权限执行adb呀

persist.service.adb.enable=1 //开启调试模式
ro.adb.secure = 1// offline，弹出提示框
adb root  -- restarts the adbd daemon with root permissions
adb remount
adb devices //List of devices attached
adb kill-server 
adb devices
adb remount //system wr
adb tcpip 5555 #adbd重新启动，监听5555
adb connect 192.168.0.101:5555
adb get-state 检查是否成功

adb -s devicename //多设备连接时选择
adb logcat <=>  adb shell; logcat 其他命令同理

adb reboot bootloader|recovery //可在非root用户下执行

Viewing stdout and stderr:
setprop log.redirect-stdio true

service.adb.tcp.port=5555
====
sbin/adbd
system/bin/adb  # device-as-host
out/host/linux-x86/bin/adb

bugreport，打印更多调试信息

错误：
[INSTALL_PARSE_FAILED_INCONSISTENT_CERTIFICATES] 之前安装了不同人编译的包名相同的apk
在/data/app下删除再安装：
[INSTALL_FAILED_UPDATE_INCOMPATIBLE] 因为apk删除不彻底,可恢复出厂


-----------
命令行启动apk
am start com.joysee.stb.tv/com.joysee.stb.tv.xxx (包名+activity名)
包名是aapt dump badging输出的 launchable-activity:字段

am bmgr bu ime input monkey pm svc 是shell脚本

INSTALL_PARSE_FAILED_NO_CERTIFICATES  //没有签名？？ 用platform.pk8 签名就好了
dumpsys package  可以打印很多信息

==property==

ro.build.version.incremental=1.0.19 版本

init用一个共享内存区存储属性

客户端以调用libcutils中的API函数以 GET/SET属性：
int property_get(const char *key, char *value, const char *default_value);
int property_set(const char *key, const char *value);

而libcutils又调用libc中的 __system_property_xxx 函数获得共享内存中的属性

属性服务调用libc中__system_property_init初始化共享内存，按顺序下列文件：
/default.prop
/system/build.prop
/system/default.prop
/data/local.prop
最后加载的属性保持在/data/property中（？）

net.dns1 = 202.106.0.20 //设置dns

system/core/init/property_service.c 里错误打印:
init: sys_prop: permission denied uid:1003  name:xx.xx.xx
权限问题

http://blog.csdn.net/jsonz/article/details/43765051  看这篇文章

PROPERTY_VALUE_MAX  android里定义为92

属性系统:
system/core/libcutils/ properties.c 
多个property_get 函数 情况不同 arm使用的是 HAVE_LIBC_SYSTEM_PROPERTIES

==========
socket 类型把AF_xx 都改成了PF_xx

广播：
ACTION_BOOT_COMPLETED = "android.intent.action.BOOT_COMPLETED"
需要RECEIVE_BOOT_COMPLETED权限
sys.boot_completed  属性
frameworks/搜索BOOT_FINISHED  找到流程

1 setting默认设置在framework里面修改，比如默认ip地址，画面尺寸等。
core/java/android/setdisplayattr/SetDisplayAttrService.java

3 dvb没在data区创建文件权限。data分区权限771，dev apk为user权限。将data
区改为777即可。但这样是否破坏android权限系统？ 可以查查平板电脑的权限如何。

udp socket创建失败，因为没有权限
在AndroidManifest.xml中，加上这一句话，取得权限。
<uses-permission android:name="android.permission.INTERNET" />

developer -  tools 下面有很多有用的工具。内存分析，cpu时间片使用等。

从Window -> preferences -> Java -> Editor -> Content assist -> Auto-Activation下，
我们可以在"."号后面加入我们需要自动提示的首字幕，比如"ahiz"。

xbmc里在 KeyPressTask extends TimerTask 里面调用的，而 TimerTask 本身也是个线程。
./libcore/luni/src/main/java/java/util/TimerTask.java

3 Preference 首选项
  Provides classes that manage application preferences and implement the preferences UI. 

4 ListActivity  extends  Activity 
   An activity that displays a list of items by binding to a data source such as an array or Cursor, 
and exposes event handlers when the user selects an item.

5  Fragment 就好比一个子 Activity。但是Activity 是Context的子类，而Fragment是由Object扩展而来。

android.graphics.drawable.shapes 这个包在
frameworks/base/graphics/java/android/graphics/drawable/shapes
这个目录中。

$ sudo mtpfs -o allow_other /media/nexus7
挂载好之后在文件浏览器应该可以看到一个新的挂载点，在里面可以任意管理里面的文件。
卸载的命令是：
$ umount /media/nexus7

init: skipping insecure file '/default.prop'
init: skipping insecure file '/init.rc'
需去除文件写权限
其实，root目录要放入到只读文件系统中。

7 一个库中添加1函数，调用此函数生成1可执行elf，然后库中此函数删除，编译拷贝，再执行elf打印：
mips_relocate_got(linker.cpp:1236): cannot locate "gaojie_test"...CANNOT LINK EXECUTABLE


每个event对象记录发生时间，在PhoneWindow.java中判断。
发生时间与当前时间之差达到一定长度就丢弃。但是电视/广播就必须在activity里面单独处理

public class KeyEvent implements Parcelable {
    /* Retrieve the time this event occurred, */
    public final long getEventTime() {
        return mEventTime;
    }
}

网络获取时间： NetworkTimeUpdateService

dalvik没有使用java字节码而是自己又定义了一套指令集
java指令集从0，1，2排到0xC9如： x4c astore_1

---
libcore
/libcore 生成：
core.jar(包含json解析)
core-libart.jar //art version core.jar
conscrypt.jar
libjavacore.so
libjavacrypto.so

JavaLibrary.mk:LOCAL_MODULE := core

---
system/etc/vold.fstab
dev_mount sdcard /mnt/sdcard auto /block/sda /block/sda/sda1
内部flash模拟sdcard，需要模拟触发vold。

暂时放这里：
ubuntu格式化u盘，不写卷标，就会分配一个UUID，挂载点：
/media/gaojie/xxxx-xxxx-xxxxxxxx (或显示卷标)

vold root权限运行，通过socket与其他的进程通讯

android的mount原理

int Volume::mountVol() 重要函数
外部可以动态挂载的都是 block 设备，
vold 支持磁盘多分区

only create android_secure on primary storage
注意，反复提到 primary storage

android上：
dev/device-mapper  10,58
./vold/cryptfs.c: if ((fd = open("/dev/device-mapper", O_RDWR)
./vold/Devmapper.cpp: if ((fd = open("/dev/device-mapper", O_RDWR)

/sys/devices/virtual  //PC kernel也有这个目录

sysfs和procfs

$man proc：
proc - process information pseudo-file system (interface to kernel data structures)
cmdline meminfo等放这里，有些牵强，但又能放哪呢？事情就是这样，任何艺术都是这个样子。

/mnt/secure/asec 这个目录是?

uevent

2 android_secure
这个文件夹里面的内容是app2sd产生的文件夹
---
frameworks/base/preloaded-classes 指定zygote预加载的类，所有apk子进程复制所有类。去掉它可提高开机速度，apk运行时再加载
模拟按键
KeyEvent mKeyEvent= new KeyEvent(KeyEvent.ACTION_DOWN, KeyEvent.KEYCODE_BACK);//new 按键
     onKeyDown(mKeyEvent.getKeyCode(),mKeyEvent);//派发给handler

截屏
frameworks/base/cmds/ 
screencap > /cache/1.bin (fb内容)
screencap   /cache/1.png
可抓视频层
screenshot                                                   
-s: play a sound effect to signal success
-i: autoincrement to avoid overwriting filename.png
screenshot -i x.png (x-1.png x-2.png x-3.png...)

I = Interface defines an object that will be accessible over binder
B = Base class implementation 
Bn = Base native (local object implementation)
Bp = Base proxy

keycode:
qwerty.kl:
# This file is no longer used as the platform's default keyboard layout.
# Refer to Generic.kl instead

android 换遥控器就是换.kl文件

输入系统由event驱动组成，包括libui库中的eventhub
eventhub 读取 *.kl文件，操作/dev/input/eventx

android java代码使用的是：
view/KeyEvent.java (跟.kl的联系？)中定义的如：
KEYCODE_DPAD_UP  19
KEYCODE_DPAD_DOWN  20  (真正在usb上的扫描码是多少？)
KeyEvent.KEYCODE_HOME

view/KeyEvent.java
interceptKeyBeforeDispatching
system/usr/keylayout/*.kl

映射关系 framework/base/data/keyboards/Generic.kl :
key 103   DPAD_UP
key 108   DPAD_DOWN
key 106   DPAD_RIGHT
而103 108 106可以通过 getevent 得到

插入usb鼠标
getevent (system/core/toolbox/getevent.c  打开 /dev/input)                                     
add device 1: /dev/input/event6
  name:     "Logitech USB Keyboard"
add device 2: /dev/input/event5
  name:     "Logitech USB Keyboard"

linux/drivers/input/keyboard/atakbd.c : (一款游戏机)
定义：
 0x67: Up       103
 0x6c: Down     108
 0x69: Left     105
 0x6a: Right    106

--logcat--
logcat *:S MountService:V
logcat MiSys:s Dvb:s //过滤

./system/core/include/log/log.h

http://elinux.org/Android_Logging_System

logcat 系统，将fd 0，1，2 重定向到 /dev/null
logcat 设备节点：
/dev/log/
events
main
radio
system

-b 切换buffer，默认是main，可切换到events或radio

init 中 open_devnull_stdio 函数重映射

logcat -s tag1:v tag2:v
logwrapper 可以把第三方使用printf的bin打印转到logcat系统

1 Log系统 system/core/liblog
  此系统既生成 .a 也生成 .so。最终生成target使用的liblog.so包括logd_write.c、logprint.c、event_tag_map.c三文件，不含fake_log_device.c
  log打印格式在logprint.c中android_log_formatLogLine函数里 D/libEGL(xxx) 括号里面的代表 pid
----------

编译apk:
include $(BUILD_PACKAGE)

import_includes
export_includes
大小0，仅做标识用
设置java环境变量:xx/bin:$PATH ，bin后不能有/，否则编译java时出错

s805:
make modules  生成了一堆，有cts，WiFiDirectDemo等(不同于kernel的make modules)

androd目录编译内核, uImage 是 android 大make的目标
make V=1 out/target/product/m200/obj/KERNEL_OBJ/arch/arm/boot/uImage

lunch : add_lunch_combo()

device目录下的各平台目录，直接影响lunch显示数量		

APK :Android Package
resources.arsc 编译后的二进制资源文件

TARGET_CC := gcc
TARGET_CXX := g++

systemimage: ext4

生成system.img在build/core/Makefile中

Yaffs2：-------------------------------------
M3 external/yaffs2 生成HOST程序mkyaffs2image
mmm external/yaffs2 成mkyaffs2image安装到out/host/linux-x86/bin
 m3没有用这个，而是预置: device/amlogic/common/tools/mkyaffsimage4k.dat & mkyaffsimage2K.dat（与ecc，nand类型导致原版不能用）
BoardConfig.mk：
TARGET_AMLOGIC_MKYAFFSIMG_TOOL := mkyaffsimage4K.dat
解开yaffs2 image用unyaffs2(不在android源码里需另找)
--------------------------------------------

BoardConfig.mk:  TARGET_USERIMAGES_USE_EXT4 := true

system/extras/ext4_utils :
host/linux-x86/bin/make_ext4fs 
system/bin/make_ext4fs //可在平台上制作img

system/extras/ext4_utils/mkuserimg.sh  安装到 out/host/linux-x86/bin/

mkuserimg.sh -s system.img ext4 system 536870912 (size:512M)

make_ext4fs -s -l 536870912 -a system system.img out/.../system  // -s sparse
simg2img system.img unsparse_system.img 
e2fsck -f -n unsparse_system.img  //检查fs

img 2种：raw和sparse 前者包含零填充，后者稀疏去除零填充

#file system.img  // data 普通文件
#file unsparse_system.img   //可 mount
ext4 filesystem data, UUID=57f8f4bc-abf4-655f-bf67-946fc0f9f25b

e2fsck :check a Linux ext2/ext3/ext4 file system

dd if=unsparse_system.img of=/dev/sdb  //ok

system/core/mkbootimg/

recovery.img

工具out/host/linux-x86/bin/

boot.img :
A20: mkbootimg --kernel kernel --ramdisk ramdisk.img --base  0x40000000 --output boot.img
805: mkbootimg --kernel kernel --ramdisk ramdisk.img --second meson.dtb --output boot.img
(meson8b_m200_1G.dtb <=> meson.dtb / acp -fp arch/arm/boot/uImage m200/kernel)

ramdisk.img (cpio + gzip) :
mkbootfs root | minigzip > ramdisk.img

gunzip ramdisk.img
cpio -i -F ../ramdisk.img

img开头"ANDROID!"



make out/target/... /ramdisk.img

Target ram disk: out/.../ramdisk.img
Target boot image: out/.../boot.img
----- Making recovery image ------
Copying baseline ramdisk...
Modifying ramdisk contents... //增加些额外文件
Made recovery image: out/.../recovery.img

mkbootfs 由 system/core/cpio/mkbootfs.c 编译，实现cpio打包
它需要引入android_filesystem_config.h(Permission.txt有说明)

mkbootfs out/.../root | minigzip > out/.../ramdisk.img

疑问：
ramdisk.img 与 kernel支持的内存文件系统有什么关系

==================================================
20160421:
s805的uboot单独处理了 "ANDROID!" 而mstar直接用uboot的image格式生成boot.img
==================================================

一、Android的编译系统
1 静态链接库 ./core/combo/TARGET_linux-arm.mk 中的

这个不是用于生成静态库的 而是用来生成.so 或者exe时候静态链接用的

静态链接为可执行文件（无需/system/bin/linker）

LOCAL_SRC_FILES := bar.c.arm #bar.c以arm模式编译
LOCAL_ARM_MODE = arm  #arm模式
LOCAL_DEX_PREOPT := false #生成完整apk，默认true，分出.odex（Optimized DEX）加速运行

repo:

1 切分支：
repo init -b 4.1.2 
repo sync (-l ??) //git<1.7.2 gc error
或：
repo forall -c git checkou xxtag

repo init -u -b (可SHA)下载repo.git 和 manifest.git
repo sync 不会自动合并本地和远程master分支，分支被切换到 a20/master 即远程master分支，即sync 不merge 本地各仓库的修改也不能自动提交。
repo forall -c command
repo help 
repo help init
repo manifest -o xx.xml -r  生成xx.xml -r 生成提交号  否则copy原manifest

--repo-url=指定repo仓库地址，代替修改repo文件REPO_URL=变量。-m default.xml链接到哪个xml

manifest 维护 default.xml
default.xml <remote  name="vc" //仓库remote名

不同项目个别仓库不同，可以通过manifest仓库，只把特定仓库建立项目分支。不必所有仓库建分支。实验证明：

开机logo:RLE(run-length encoding游程编码)
convert命令将11.jpg转化为11.raw： convert -depth 8 11.jpg rgb:11.raw
将11.raw文件转换为initlogo.rle。在raw图片文件所在目录下执行：/out/host/linux-x86/bin/rgb2565 -rle <11.raw> initlogo.rle

LOCAL_MODULE_TAGS := optional  控制是否编译
LOCAL_PROGUARD_ENABLED := disabled

3 性能测试 nbench、benchmark、smartphone bench

编译android的时候  LOCAL_ARM_MODE 是没有定义的 所以
arm_objects_mode = arm
normal_objects_mode = thumb

make 开始打印在build/core/envsetup.mk 中$(info )

为什么prebuild/android-arm/kernel/kernel-qemu kernel-qemu-armv7这几个文件呢？  从文件名字来看 应该是qemu可以模拟armv7
编译好的文件在：/out/host/linux-x86/pr/sim/obj/SHARED_LIBRARIES/xxx

Android kernel/common 项目的Goldfish分支（该分支用于构建运行在emulator上的系统内核，而主线则是用于构建运行在实际设备上的内核代码）

1 LOCAL_ARM_MODE  从android源码看 这个是加到每个Android.mk文件中的 那么怎么变成全局的呢？
LOCAL_ARM_MODE := arm
注意你同样可以在编译的时候告诉系统编译特定的类型，比如
LOCAL_SRC_FILES := foo.c bar.c.arm
./core/binary.mk:LOCAL_ARM_MODE := $(strip $(LOCAL_ARM_MODE))
./core/binary.mk:arm_objects_mode := $(if $(LOCAL_ARM_MODE),$(LOCAL_ARM_MODE),arm)
./core/binary.mk:normal_objects_mode := $(if $(LOCAL_ARM_MODE),$(LOCAL_ARM_MODE),thumb)
./core/clear_vars.mk:LOCAL_ARM_MODE:=

external/zlib/Android.mk:
# measurements show that the ARM version of ZLib is about x1.17 faster than thumb
LOCAL_ARM_MODE := arm

我在./core/clear_vars.mk:LOCAL_ARM_MODE:= arm
结果整个项目都是 target arm c/c++ 了
我就在这个目录中的Android.mk中加上  LOCAL_ARM_MODE:= 空
那么这个目录就用thumb编译了 target thumb c

Windows->Preferences->Android 选择SDK位置 下面可以看到 Android2.1 Android2.2版本 API level 分别为7，8 
Windows->Android SDK and AVD Manager 可以看到android 虚拟设备 
eclipse 可以使用自己喜欢的版本 建议3.4 以上

To start the SDK Manager, please execute the program "tools/android".  （无法直接执行）

3. 将下载的压缩包放入temp文件夹下
例如：D:\ProgramFiles\android-sdk-windows\temp
 
4. 点击SDK Manaer.exe，让其自动解压缩。  (linux版本怎么办？ 实践证明，解压缩拷贝到android-sdk目录下即可)
5.配置环境变量 PATH = D:\ProgramFiles\android-sdk-windows\tools 
    SDK安装完成
在sdk r13 中 执行 ./android (一个脚本) 会打开Android SDK and AVD Manager 但是 跟从eclipse 中打开的不一样

6 /development/samples 这个目录就是eclipse中可以单独下载的sample.tgz包

5 vendor/amlogic/prebuilt/  DLNA.apk 是 “媒体中心” 这个跟eHomeMediaCentor界面相同,但里面只有dex文件无jar包库。
RC_Client.apk  RC_Server.apk 实现手机遥控器
MiracastSink.apk 实现miracast功能

packages/amlogic/下面有些可用apk资源。
6 kernel中的 common/drivers/amlogic/display 是fb驱动

源码里面有pppoe的代码。
输入法有源码，做一下修改。
latinime.apk是手机自带的文字输入法,如果你安装有其他输入法,可以删除

在system/app下的apk包里不能包含.so,需要把so拷贝出来放到 /system/lib 目录下

整理好的 git仓库编译
build/core/java.mk:37: *** cts/apps/CtsVerifier: Invalid LOCAL_SDK_VERSION 'current' Choices are: . Stop.
原因是 prebuilt目录没有建立

python文件ota_from_target_files :
制作升级包或增量包(-i)

m3编译错误: File"ota_from_target_files" :local variable 'boot_img' referenced before assignment (版本问题?)

out/target/product/f16ref/obj/PACKAGING/target_files_intermediates/
这个目录内容会持续增加，每次编译都会留下记录

ota_from_target_files -v --amlogic -n -p out/host/linux-x86 -k build/target/product/security/testkey xx.zip xxx.zip


HOST_OS_EXTRA=Linux-3.13.0-35-generic-x86_64-with-Ubuntu-14.04-trusty 这个是怎么读出来的？

加载动态库使用/system/bin/linker而不是常用的/lib/ld.so;
prelink工具不是常用的prelink而是apriori，源码/build/tools/apriori”
strip不是/prebuilt/linux-x86/toolchain /arm-eabi-4.2.1/bin/arm-eabi-strip，而是/out/host /linux-x86/bin/soslim

frameworks/base/core/java/android/os/display/DisplayManager.java:58: warning: unmappable character for encoding UTF8
原来是gb2312有汉字，另存为UTF8即可
能否有1个命令或一个脚本把所有非utf8编码文件修正。并修改windows为linux编码
编译 framework/base/ethernet

out/target/common/obj/JAVA_LIBRARIES/framework_intermediates
framework目录编译的中间目录。 解压class.jar可见 EthernetManager.class
framework_ 不是由文件夹名决定，而是LOCAL_MODULE 决定

修改了framework目录下的某个文件的编译过程(技巧：故意将java源码改错助于露出端倪)：

java-source-list 文件生成:
framework_intermediates/classes 目录内容会变化，修改framework下某文件，然后编译make systemimage
然后盯着framework_intermediates这个目录，classes一出现就立即复制，捕捉到了java-source-list这个文件
文件包含framework下2100多java文件
仅解压class.jar 并没有这个文件，后面的部分是靠：
find ./framework_intermediates/src -name '*.java' >> ./framework_intermediates/classes/java-source-list; 

2 编译
  a. sdk全部编译： 执行 make （sdk根目录）
  b. 只编译sdk用户空间部分： 执行 make change_toolchain 或者执行 make app （sdk根目录）
  c. 编译自己的库或者测试程序： 进入自己的makefile所在目录，执行 make

ndk : prebuiltLib/libutils.so: undefined reference to `__aeabi_f2ulz'  这个函数在libgcc.a中
什么样的c描述会调用这个函数？ 貌似是浮点运算,换成ndk-r4 就没这个打印

1 build/core/combo/select.mk 定义 
  $(combo_target)SHLIB_SUFFIX := .so  
  $(combo_target)STATIC_LIB_SUFFIX := .a

2 现在我要设置 TARGET_ARCH_VARIANT = armv7-a 需要修改哪里，直接TARGET_linux-arm.mk当然是最直接的
  make TARGET_ARCH_VARIANT=armv7-a 也行。
  找到了 ./htc/passion-common/BoardConfigCommon.mk:TARGET_ARCH_VARIANT := armv7-a-neon

HOST静态库预编译：
LOCAL_PREBUILT_LIBS := ../prebuilt/libunz.a 
include $(BUILD_HOST_PREBUILT) 
这里还不能用 $(LOCAL_PATH) 用了会出现 external/webkit/external/webkit/../prebuilt 奇怪。

prebuilt.mk和multi_prebuilt.mk，对应的方法宏是BUILD_PREBUILT和 BUILD_MULTI_PREBUILT。

android中 .so里面是不包含 /system/bin/linker字符串

android 编译可执行文件

LOCAL_FORCE_STATIC_EXECUTABLE := true /*init工程加了这个*/

include $(BUILD_EXECUTABLE)
/* BUILD_EXECUTABLE:= $(BUILD_SYSTEM)/executable.mk 此文件判断 LOCAL_FORCE_STATIC_EXECUTABLE 决定静态链接还是动态链
/* 用-l 加库跟 变成.o 加在文件列表中是不同的，-l只链接用到的函数，那么.o呢？ */

LOCAL_MODULE_CLASS := ETC  //安装到system/etc目录
LOCAL_MODULE := init.godbox.sh
LOCAL_SRC_FILES := $(LOCAL_MODULE)
include $(BUILD_PREBUILT)

LOCAL_SRC_FILES:= 源文件
LOCAL_MODULE:= 生成的文件

这时mmm -B webkit 因为虽然改了权限，已经编译好的 cssparser.o 已经错误，系统不会重新编译这个.o

找不到 : export_includes
undefined reference to 'android::ITvosAudioSettingService::asInterface   //服务没有实现接口
互相依赖　export_include 找不到

types.h找不到: gcc-multilib , multilib 用于生成多平台的代码 32bit/64bit

1 编译android环境：
	libxml2-utils xsltproc g++-multilib/gcc-multilib(代替ia32-libs) gperf(makeprop.pl)
	bison flex用于aidl
	build-essential  gcc/g++ 以及相应库。
	libncurses-dev (u10.04可能自带，u14.04被摒弃) 编译kernel menuconfig使用
	gawk 4.0.x (好像不需要)

2 jdk
	open:openjdk-6/7-jdk  : /usr/lib/jvm/java-6-openjdk-amd64
	sun: oracal官网注册下载:
    jdk-6u35-linux-x64.bin(jdk1.6第35个版本)，执行并拷贝到/usr/lib/jvm(与openjdk并列)
    PATH=$PATH:/usr/lib/jdk1.6.0_35/bin 或：
	update-alternatives --install "/usr/bin/java" "java" "/usr/lib/jvm/jdk1.6.0_35/jre/bin/java" 1
	update-alternatives --install "/usr/bin/javac" "java" "/usr/lib/jvm/jdk1.6.0_35/bin/javac" 1
	java/javac 切换到sun，其他仍用open可编ics

用prebuilts/tools/gcc-sdk/gcc  脚本引导到源码自带编译器

PRIVATE_CC := $(LOCAL_CC)
HOST_CC 在 select.mk:
$(combo_target)CC := $(CC) 这里设置

# Previously the prebiult host toolchain is used only for the sdk build,
# that's why we have "sdk" in the path name.
ifeq ($(strip $(HOST_TOOLCHAIN_PREFIX)),)
HOST_TOOLCHAIN_PREFIX := prebuilts/tools/gcc-sdk  //这里赋值也不同
endif
# Don't do anything if the toolchain is not there
ifneq (,$(strip $(wildcard $(HOST_TOOLCHAIN_PREFIX)/gcc)))
HOST_CC  := $(HOST_TOOLCHAIN_PREFIX)/gcc
HOST_CXX := $(HOST_TOOLCHAIN_PREFIX)/g++
endif

endif
