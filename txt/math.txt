滤波器设计 实例 !!!

https://p5r.uk/blog/2009/filters-with-gnu-octave.html


低通滤波器用乘法累加器实现
2 order(two-pole)

Mathematica MATLAB Maple 并称三大数学软件

中文版 Mathematica 11.1,亲测可用
Mathematica 11.1注册机下载
链接: https://pan.baidu.com/s/1jI5jtXk 密码: y393
Mathematica 11.1下载地址
链接: https://pan.baidu.com/s/1dFAdrTf 密码: f38h



www.wolframalpha.com

wolfram
scilab

MathWorks公司为工程师和科学家提供数学计算软件
MATLAB
Simulink

MATLAB fdatool :Filter Design and Analysis Tool (octave无)

octave:
ssh 连接时可字符方式显示粗糙图形
包:
octave-signal 信号处理函数
octave-info  帮助信息

精度:
>>format long
>> a = pi
a =  3.14159265358979
>> format short
>> a = pi
>>a =  3.1416

二阶极零点:
zp2sos: Convert zero-pole-gain filter parameters to second-order sections form
sos2zp: Convert filter second-order section parameters to zero-pole-gain form 

方差：取平均，依次相减的平方再取平均。xuss：为啥要平方，是为了增大偏离值大的值的权重

比如：
10 12 8 14 6 均值10
10 11 9 15 5 均值10
如果不平方，方差分别是 (2+2+4+4)/5  (1+1+5+5)/5  都是12/5，而实际上第二组偏离程度更大
真正方差：8，10.4 第二个大些

sin15 = sin(45-30)

a+bi :笛卡尔复数 相对于极坐标

--mapple--
无linux版

plot(x^2, x = -1 .. 1)  输入x^2 后，按右键，切换到正常输入

solve(x^3 = 27);  能够解出3个跟：
3，-1.5-1.5*3^1/2 i



numerical analysis software


Natural logarithm

e (mathematical constant)

0.99^365= 0.025517964
1.01^365= 37.783434333

那个傅立叶变幻的动画图是怎么作出来的

小波变化被誉为“数学显微镜”

自然常数e的来源与应用(超初级超恐怖)
2.7182818284590452353 6028747135266249775711117960854 (n=1+40个0)
用 (1+1/n)^n 或1+1/(1!)+1/(2!)+......+1/(n!)

指数函数 e^x 的导数是它自己(其他函数都无此特性)

欧拉《无穷小分析引论》

a = 2^i

ln(a) = i*ln(2)

a = e^[i*ln(2)] = cos[ln(2)] + i*sin[ln(2)]

ln(2) = 0.6931....rad = 39.7144....deg

cos[ln(2)] = 0.7692...
sin[ln(2)] = 0.6389...

2^i = 0.7692... + i*0.6389...

调和级数 取值100000000  1亿时候为  18.99789641385255
得出欧拉常数：
0.57721565990019  （精确到了第七位）
取2亿，得出：19.69104359191438 （增加1亿次运算结果才增加了0.693）
得出欧拉常数：
0.57721566240207 （精确到了第八位，增加1亿次运算才精确了1位）
0.57721566490153 （正确值）

x=0:0.001:pi  // 0.001 表示精度
y=sin(x);
plot(x,y);
hold on
y=x；
hlot(x,y);

就画出了2条曲线。

axis equal  命令，保证x y 刻度相同
exp(3);  表示e^3

y=1+x+x.^2/2;    x^2  要换函数图的话  x后面要加 .  
一般地，形如y=x^a(a为常数）的函数，即以底数为自变量，幂为因变量，指数为常量的函数称为幂函数。

画圆
a=0:pi/20:2*pi;
r=2;
x=r*con(a);
x=r*cos(a);
y=r*sin(a);
plot(x,y);
axis equal

傅里叶级数
法国数学家傅里叶发现，任何周期函数都可以用正弦函数和余弦函数构成的无穷级数来表示

用MATLAB绘双扭线r^2=(a^2)*sin2t 

t = 0:.01:2*pi;
polar(t,sqrt(2^2*sin(2*t))


复数指数形式，在电学中应用广泛。就一个i^2=-1  为啥就这么大威力呢
为了计算方便。复数的代数运算和我们熟悉的实数运算相同，相当于用一个数字把向量的模和方向都表示出来了。

atan 反正切

freemat里面
log 函数以e为低
log10 函数以10为底

./share/freemat/toolbox  下面存放大量的 .m文件
可以把  dct.m  dct2.m 拷贝到 
/usr/share/freemat/toolbox/signal 下面
注意：注释符号 %  而非## 

http://users.powernet.co.uk/kienzle/octave/matcompat/scripts/signal/

dct  dct2 在freemat上没有成功

x=round(rand(4)*100)
y=dct2(x);

y=x.^2   // x后要有.  无点是对矩阵进行运算，加点是对矩阵中每元素进行运算

y=sin(x).*cos(x)  sinx乘以cosx 中间要加.

没有一个分数的值是0.999999999999999999... 因为这个值是1


window function

汉宁（hann）


List of trigonometric identities
induction formula 

奇变偶不变，符号看象限
Trigonometric functions

In mathematics, the trigonometric functions (also called the circular functions)

--
矩阵的转置就是行列互换
如
1  2  3
4  5  6
的转置就是
1  4
2  5
3  6

右上角一个T标示

opencv 能搜到 wavelet这个词

Sinc function，也记作Sa函数
sinc(x)=sin(x)/x
In dsp and information theory, the normalized sinc function is commonly defined by
 sinc(x) = sin(pi*x)/(pi*x)
可以理解为，这样定义，x=1时，sin(pi)=0 “比较规范”，:-)

并定义sinc(0) = 1;


f(x)H(x)=G(x)
H(x)是滤波器

<数字图像处理> P279



Introduction to Digital Filters: With Audio Applications  书   google  在线

--freemat
imshow 是matlab 函数  freemat 没有
Freemat has image/imagesc that can be used to display images (instead of imshow).

f = imread('1.jpg')
image(f)

imfilter也没有

Freemat does not implement the functions imfilter

digits(10)  改变精度  默认4位

难道计算机就只能精确到long型  14位精度吗？

如果我需要1000位精度怎么办


x=linspace(0,10,1000);
y=1+0*x;
y1=sin(2*x*pi/10);
y2=3*cos(2*x*pi/10);
y3=cos(4*x*pi/10+pi/2);
hold on;
plot(x,y);
plot(x,y1);
plot(x,y2);
plot(x,y3);
y4=y+y1+y2+y3;
plot(x,y4);

Matlab有FreeMat没有需要编写m-script，如FreeMat没有预设randsample.m 或 dct.m。


竖线：
y=linspace(-1.5,1.5,100);
x=2;
x=2+0*y;
plot(x,y);

hex2dec ("FF")   ⇒ 255


The Large Time/Frequency Analysis Toolbox (LTFAT) is a Matlab/Octave toolbox for working with time-frequency analysis and synthesis


Octave可用gnuplot产生图，V3.8起用OpenGL替代了gnuplot


A= imread('img.jpg')
[m,n]=size(A)
B=dct2(A)

octave:1> y=wavread('/root/Multimedia/xxx.wav')
warning: broken pipe -- some output may be lost
octave:2> y=wavread('/root/Multimedia/xxx.wav');
octave:3> plot(y)

freemat没有dct2，octave有
x=round(rand(4)*100)
y=dct2(x);
可以运算出dct2

定义二维矩阵
octave:> a=[61 19 50 20;82 26 61 45;89 90 82 43;93 59 53 97]

octave:> dct(a)
ans =

   162.5000    97.0000   123.0000   102.5000
   -22.7992   -43.4495    -7.6424   -49.7615
    -8.5000   -19.0000   -20.0000    14.5000
    -4.0862    30.9861    12.9071   -22.1426

octave:> dct2(a)
ans =

   242.5000    32.1613    22.5000    33.2212
   -61.8263     7.9246   -10.7344    30.6881
   -16.5000   -14.7549    22.5000    -6.8770
     8.8322    16.6881   -35.0610    -6.9246

surf(peaks)
contourf(peaks)

gnuplot

----------
octave解方程组:

--
http://georgehart.com/  卵形曲线  有意思
Hilbert curve也叫Hilbert space-filling curve
http://en.wikipedia.org/wiki/Mandelbrot_set

Viterbi 算法


欧拉恒等式 e^(iπ) + 1 = 0 最优美的公式之一
多元数，多阶矩阵


交流电等效电压 用最大值除以根号2的推导: 
用的是等效功率 并且是定积分
sinx 的平方 在0到pi的定积分为pi/2
所以等效电压为 1/根号2

2的2.5次幂=？
4*2^0.5

2^0.5 怎么定义的？


AWB (auto white balance) algorithms


拉格朗日算子
lagrangian

水仙花数(阿姆斯特朗数)： 135=1^3+5^3+3^  54748=5^5+4^5+7^5+4^5+8^5

Lagged Fibonacci   ffmpeg用的 产生随机数


搜索 西安电子科技大学 信号与系统 精品课

exp :以自然常数e为底的指数函数, 例如：EXP{F(X)}是e的F(X)次方

高斯函数(Gaussian function)的傅立叶变换仍是高斯函数

Gaussian function(简称Gaussian):
f(x)=a*e^(-(x-b)^2/2c^2)

x=linspace(-10,10,1000);
y=e.^(-(x-1).^2/2);
plot(x,y)


---保存为test.m(小m)，在octave中执行test
A = 1;
x0 = 0; y0 = 0;
 
sigma_x = 1;
sigma_y = 2;
 
[X, Y] = meshgrid(-5:.1:5, -5:.1:5);
 
for theta = 0:pi/100:pi
    a = cos(theta)^2/2/sigma_x^2 + sin(theta)^2/2/sigma_y^2;
    b = -sin(2*theta)/4/sigma_x^2 + sin(2*theta)/4/sigma_y^2 ;
    c = sin(theta)^2/2/sigma_x^2 + cos(theta)^2/2/sigma_y^2;
 
    Z = A*exp( - (a*(X-x0).^2 + 2*b*(X-x0).*(Y-y0) + c*(Y-y0).^2)) ;
end
 
surf(X,Y,Z);shading interp;view(-36,36)

---高斯函数的傅立叶变幻还是高斯函数-
octave:1> x=linspace(-10,10,1000);
octave:2> y=e.^(-(x-1).^2/2);
octave:3> plot(x,y);
octave:4> fx=fftshift(abs(fft(y)));
octave:5> plot(abs(fx),"o-");


高斯滤波器

f_s/2, is the Nyquist frequency 也就是说信号的最高频率是Nyquist frequency


wikipedia：

Negative frequency
Aliasing

法布里斯·贝拉（FabriceBellard）的网页计算器
http://numcalc.com/

--dct--
octave:1> a=[1 2 3 4 5 6 7 8;2 3 4 5 6 7 8 9;3 4 5 6 7 8 9 10;4 5 6 7 8 9 10 11;5 6 7 8 9 10 11 12;6 7 8 9 10 11 12 13;7 8 9 10 11 12 13 14;8 9 10 11 12 13 14 15]

octave:2> dct2(a)
ans =

   64.00000  -18.22164    0.00000   -1.90482    0.00000   -0.56824    0.00000   -0.14341
  -18.22164    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -1.90482    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.56824    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000
   -0.14341    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000    0.00000


octave:3> a=[100 -100 100 -100 100 -100 100 -100;-100 100 -100 100 -100 100 -100 100;100 -100 100 -100 100 -100 100 -100;-100 100 -100 100 -100 100 -100 100;100 -100 100 -100 100 -100 100 -100;-100 100 -100 100 -100 100 -100 100;100 -100 100 -100 100 -100 100 -100;-100 100 -100 100 -100 100 -100 100]


octave:4> dct2(a)
ans =

     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
     0.00000    25.98915     0.00000    30.65630     0.00000    45.88039     0.00000   130.65630
     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
     0.00000    30.65630     0.00000    36.16157     0.00000    54.11961     0.00000   154.11961
     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
     0.00000    45.88039     0.00000    54.11961     0.00000    80.99572     0.00000   230.65630
     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000     0.00000
     0.00000   130.65630     0.00000   154.11961     0.00000   230.65630     0.00000   656.85356

信号变化小时，数据集中在左上角，变化大时，集中在右下角。
即，左上角属于低频数据，右下角属于高频数据。
人眼对高频变化感觉不大，因此JPEG压缩，主要是略去大部份高频数值。至于如何略去高频数据是量化问题

--fft--
Unlike most other programs, most of the FFTW source code (in C) is generated automatically. 
This repository contains the generator and it does not contain the generated code. 
You cannot compile code from this repository unless you have special tools and know what you are doing.

Most users should ignore this repository, and should instead download official tarballs from http://fftw.org/, 
which contain the generated code, do not require any special tools or knowledge, 
and can be compiled on any system with a C compiler.

.mathworks.com

ocaml 正常不需要

Fastest Fourier Transform in the West

libfftw3.a  fftw3.h

gcc ff-test.c -o ff-test -lfftw3 -lm 

in[i][0] = i;
in[i][1] = 0.0;

fftw_plan_dft_1d() 对应 octave fft(a)函数

https://www.staff.ncl.ac.uk/oliver.hinton/eee305/
ncl 大学资源

DTFT (z-transform on unit-circle)  ????

问题：
ffmpeg中 showcqt fft怎么确定频率的

几个问题：
1 傅立叶级数的相位只有0 和 -pi吗？即所有
周期函数的频谱图都能用负幅值表示-pi相位？

2 FFT中，输入值一般是实数，输出是复数，一维结果再FFT，输入就是复数了

FFT用于计算DFT(discrete Fourier transform) 和IDFT，所以FFT和DFT 说的是一回事
DTFT: Discrete-time Fourier transform
DTFT（时间离散，频率连续） 
DFT（时间和频率都离散，可在计算机中处理） 
FFT（DFT的优化算法，计算量减少）



