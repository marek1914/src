                                                                           *mb*

1 Functions for Transforming Text .................................|m-function|
2 Contidith......................................................|m-condition|


Functions                                                    *m-f* *m-function*

1 Call Syntax
  $(function arguments)  or  ${function arguments}

2 String Substitution and Analysis

$(subst from,to,text)
$(patsubst pattern,replacement,text)
$(strip string)
$(findstring find,in)
$(filter pattern...,text)
$(filter-out pattern...,text)
$(sort list)
$(word n,text)
$(wordlist s,e,text)
$(words text)
$(firstword names...)
$(lastword names...)

3 File Names
$(dir names...)
$(notdir names...)
$(suffix names...)
$(basename names...)
$(addsuffix suffix,names...)
$(addprefix prefix,names...)
$(join list1,list2)
$(wildcard pattern)
$(realpath names...)
$(abspath names...)

4 Conditionals
$(if condition,then-part[,else-part])
$(or condition1[,condition2[,condition3...]])
$(and condition1[,condition2[,condition3...]])

5 The foreach Function
$(foreach var,list,text)

6 The file Function
$(file op filename[,text])

7 call Function
$(call variable,param,param,...)

8 The value Function
$(value variable)

9 The shell Function
$(shell cmd param)

7.2 Syntax of Conditionals
ifeq ifneq ifdef ifndef (c99 #if #ifdef #ifndef)

predefined variables:
CFLAGS
CXXFLAGS
LDFLAGS
LDLIBS

DATE:=$(shell date)
DATE:=`date` # 可用但make中没找到官方说明
make搜索 backquotes

4.10 Multiple Targets in a Rule 
4.11 Multiple Rules for One Target

= recursively expanded  
:= simply expanded

变量后的空格会保留

Pattern Rules

%.o:%.cpp
	$(CC) $(CPPFLAGS) -c -o $@ $<

foo.o:foo.c foo.h
    cc -c -g foo.c
	
默认规则
all: foo
执行显示：
cc foo.c -o foo

A blank line that begins with a tab is not blank: it's an empty command

6.3.1 Substitution References
递归3法：make -C dir / -f file /include
-include：文件不存在时不提示错误

4.7 Rules without Commands or(and更恰当吧) Prerequisites
If a rule has no prerequisites or commands, and the target of the rule is a nonexistent file, 
then make imagines this target to have been updated whenever its rule is run. 
This implies that all targets depending on this one will always have their commands run. 

#不严密 如果存在FORCE和all文件，且all新于FORCE，照样不执行
#没有FORCE文件或旧于all,可以执行
foo: FORCE
	@echo Hello

FORCE:

bar:
	@echo World

#特殊逻辑，只有强记
.PHONY: bar

.PHONY: FORCE
%.pem: $(DSAPARAM) FORCE

define foobar
$(shell foo $(1))
endef
	
phony target 2种方式  
1) 没有Commands和Prerequisites的Rules，习惯 FORCE:
2) Special Built-in Target .PHONY

在命令区定义变量，shell变量

$(info text...) 返回null，可写在任何地方没影响
展开阶段执行$(info ...)，输出hello

cc -MM test.cpp 生成cpp的.o的依赖关系

These variables are used specially:
MAKEFILES
MAKECMDGOALS

export是make关键词

foo=hello $1 # 必须用= 不能:=  20171024

#android 形式
define foo
$(hide) cmd1;\
        cmd2;\
endef

#20171024 实测ok
define foo
ls $1
ls $2
endif

foo:
    @$(call foo, foo.c, bar.c)



vim: tw=78 ts=8 sw=4 sts=4 et ft=help
