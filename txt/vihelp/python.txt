keyword(31):
and       del       from      not       while
as        elif      global    or        with
assert    else      if        pass      yield
break     except    import    print
class     exec      in        raise
continue  finally   is        return
def       for       lambda    try

1 不支持 ++ 运算符
2 for循环只有 for in 这一种形式

/usr/lib/python2.7/dist-packages

包:
python-pip

twisted: event-driven networking engine (异步)


os.path.abspath('.')   //获取当前的绝对路径
os.path.expanduser('~')

print ('Hello %s\n' % __name__) #3.0
print '%s %s' %(cov, n)
print "Hello World \n" *4
print 'Gaojie %d \n' % (test*4)
print 'Gaojie %d \n' % test*4   #print 4 times


https://docs.python.org/2/reference/index.html

tuple和list原生支持，array是库支持：
The Python Standard Librayr->Data Types

b=array.array('H')
b=array('H')

array(Image.open('1.jpg'))

import zipfile

Lib/zipfile.py  Read and write ZIP files

没参数：def main(args = None):
 
类方法，第一个参数必需为self（名字随意）

tempfile  标准库

cython 将py编译为.c，再将.c 编译为.so 文件
用于编写python的扩展模块，比如numpy就用到了

cv2.circle()

print "%s" % points
只打印一部分：
[[  66.94115448  164.1769104 ]
 [  60.94831848  177.5411377 ]
 [  77.13156128  155.03884888]
 ..., 
 [ 225.3085022   359.10324097]
 [ 219.10496521  369.05072021]
 [ 219.92234802  381.0814209 ]]
怎么全部打印

Multivariate normal distribution  多变量高斯分布
mean and covariance (协方差)
numpy.random.multivariate_normal(mean, cov[, size])   //size 默认1

SVDecomp   SV Decomp SV分解

奇异值分解 (singular value decomposition,SVD)

调试
python -m pdb xx.py

python -m pdb xx.py 64.jpg  //与gdb不同，可以在这里直接加参数
用法与gdb类似

easy_install pip //Mac

from PIL import Image
from pylab import *

#im = array(Image.open('1.jpg').convert('L'))

#contour(im,origin='image')

figure()
figure()
#hist(im.flatten(),128)
show()


import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation

fig, ax = plt.subplots()

x = np.arange(0, 2*np.pi, 0.01)        # x-array
line, = ax.plot(x, np.sin(x))

def animate(i):
    line.set_ydata(np.sin(x+i/10.0))  # update the data
    return line,

#Init only required for blitting to give a clean slate.
def init():
    line.set_ydata(np.ma.array(x, mask=True))
    return line,

ani = animation.FuncAnimation(fig, animate, np.arange(1, 200), init_func=init,
    interval=25, blit=True)
plt.show()

###
class test:
  def f():
    print "Hello"
  
###  hanoi
m=0
def hanoi(n, one, two, three):
  if n==1:
    move(one, three)
  else:
    hanoi(n-1, one, three, two)
    move(one, three)
    hanoi(n-1, two, one, three)

def move(x, y):
  global m
  m+=1
  print '%c --> %c  %d' %(x, y, m)

hanoi(5, 'A', 'B', 'C')


###  iterator

line_list = [' line1', '   line2', "     line3  i ", "   line4"]

# Generator expression -- returns iterator
stripped_iter = (line.strip() for line in line_list)

# List comprehension -- returns list
stripped_list = [line.strip() for line in line_list]

s = [line for line in open("4k")]  读取数据到列表

import cv2
#import cv2.cv as cv
im = cv2.imread('./1.jpg')
h,w = im.shape[:2]
print h,w

cv2.imwrite('result.png',im)

for i in range(1, 5):

get attribute
__subclasshook__
__reduce_ex__

C-x x-o 识别不出类型的时候，就显示这些，这些是？





open len iter 等都是 内建 build-in 函数

f=open()  返回file对象，这个对象没有迭代器，iter(f) 返回的还是file对象，但是这个文件对象有 next 方法，
而其他的对象比如 str，iter会返回迭代器对象，迭代器里面有 next方法

python2 是 next(), python3 是 __next__()



---json---
python标准库就支持 json
import json

json的一个 object 对应 python的 dict



bit.ly 例子
{"_heartbeat_":1331923261}

