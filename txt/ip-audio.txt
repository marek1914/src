ST:
Audio ICs -> Audio Amplifiers -> Class-D Audio Power Amplifiers

SGM8904:
2Vrms Output into 2.5kΩ Load with 3.3V Supply Voltage
3Vrms Output into 2.5kΩ Load with 5V Supply Voltage

那这个算功放芯片吗？ 算几瓦呢？ 
那个nanopi用的
PAM8403 3W D类音频功率放大器

0-pi sinx 平方的积分为 ip/2, 推算出等效电压 根号1/2

SRAM 分同步和异步

STM429开发板 ISSI IS42S16400 是同步型

SPI SRAM 没合适芯片:
Microchip 23LC1024 128K byte 容量小 10+，有arduino shield 用4片组成512k
ISSI IS62WVS5128   5128前面的S 代表serial 即spi 淘宝没有买的
cypress CY15B104Q 4MBit F-RAM(铁电RAM) 不是sram

48pin 的需要借助 373锁存器
F103RC(256+48) 降成本可被选

总硬件成本 30元
F401RC(256+64 RMB:9.0)/F401RB(128+64) 
W5500(RMB:10) + IS62WV5128BLL-55HLI (RMB:6+) + cs4344 + SGM8904

256kByte 应该也够用， 只是用来缓冲ip包，能缓冲10s，

如果用G711 编码， 单 F103C 也不够，因为f103C 只有20k ram， 实在太小了
8k采样x1字节 = 8k字节/s   64kbs
 
用G723/G729  64K内存也够

G723 还是G729呢？   我不知道到了实际环境中， 具有缓冲5s数据能力，够不够
用UDP推流

用了G723/9 后 只有 <8kbps   每秒 1K 字节，内存足够了，  需要比较强的运算能力，而这正式F401的强项

还是要有缓存，网络环境复杂，没有足够的缓冲绝对不行，大不了到时候不焊接！

256Kx8 有啥区别
IS62WV2568ALL/BLL
IS62WV2568EALL/EBLL
IS62WV2568FALL/FBLL

IS62WV2568BLL  RMB:7+

同样是 -2568或 -5128 官网有很多类型: High Speed, PowerSaver  还分 62/65 不知道哪个最便宜

5128BLL 还分多种封装
-55T2LI 1.27间距，20x11 mm 太大了(资料Page3 右面原理图)
-55HLI  0.5间距  13x8mm   应该要这个(资料Page3 左面原理图 sTSOP ok)
-55TLI  0.5间距  20x8mm 

F407-Disc  用的 CS43L22

st官方f103 用的 AK4343 有I2c 配置接口
cs4344 和 cs43l22 有啥区别，为啥参考设计用后者

用cs4344 实现mp3播放
http://www.stmcu.org/module/forum/thread-599855-1-1.html
http://www.openedv.com/posts/list/5143.htm
https://www.amobbs.com/thread-4288855-1-1.html?_dsign=dac01d7b

PT8211/TM8211

pwm DAC 好像只能实现到8bit

从垃圾堆里 拆出了  CE2752  和  CS4354  还都是 SOP 大封装，，，， 可以实验了

---- I2S ----
为啥会有 时钟误差呢？  cube -> configuration 选项卡 点击 I2S 会看到各种频率下的误差

F401RC 有专门的 i2s clk 输入引脚，能产生比较精确的
F103RC 没有这个引脚


github.com/adafruit/Ethernet2
github.com/njh/EtherSia


----软件----
freertos  g723/g729  

g723/g729 还是复杂，就G711 ，先把东西做出来，已经很累了，我的能力也就这样，

20171127 最终决定加 512k内存 大不了不贴 ，用G711 编码，这样前端也简单
就算16k采样 16k字节/s  也足够缓冲的了

必要时可考虑 373锁存器

--- 硬件 ---
1 使用内部晶体 16MHz 主频工作在 84MHz(直接输入
2 I2S 晶振配置为:
  50MHz时 fs=22k 误差 0.03%
100M 或者50M  8k 16k 总能找到一个 误差比较低的
3 32.768 晶体要不要，以后如果需要时间戳，是不是需要准确的 时间 要也可以，正好研究一下 rtc，一直不明白
4  PA0-15  用作 地址线  PB0-7 数据 用 I2S2 half-duplex master  主时钟2输出，  SPI3（片选信号不能用， 可以一直片选状态   uart6 异步) 
5 g711 + rtp F0系列也可以
6 用25MHz 时钟，然后主时钟输出 到 w5500, 应该能行
  用f401 内部时钟，也可以输出25M，但是ppm可能差一些

7 w5500 3个配置引脚，各接一个电阻拉高， 3引脚连一起1个电阻拉高，等效吗？应该可以，可以用手里的2个板子 试验一下
  就算1个电阻能行，我用 io口控制，也能省一个电阻， 连3条线 还是1条线？ 3条还能强制10M 网络
    

g723.1 vs g729:

-------rtp-----
直接 udp 的话 需要推 ts 流 

最小 rtp 实现
http://blog.csdn.net/leixiaohua1020/article/details/50535230

udp 不需要回应，才可以在终端不接收的情况下，向它推数据
udp 推流和rtp 推流有啥区别

ffmpeg:
g723_1.c
g723_1dec.c
g723_1enc.c
g723_1.h
g729data.h
g729dec.c
g729.h
g729_parser.c
g729postfilter.c
g729postfilter.h

ffmpeg:
rtp.c  默认支持了 g711 g723 g729  
其他的格式支持靠独立文件 如 rtp_enh264.c

doubango 只支持g729  没有g723

ffmpeg encoders:
 A..... g723_1               G.723.1
 A..... pcm_alaw             PCM A-law / G.711 A-law
 A..... pcm_mulaw            PCM mu-law / G.711 mu-law

decoders:
 A..... g723_1               G.723.1
 A....D g729                 G.729

g723.1 跟 g723 是完全两码事

常用的2个：
g723.1  和 g729a

g723.1:
6.3 kbit/s (using 24 byte frames) using a MPC-MLQ algorithm (MOS 3.9)
5.3 kbit/s (using 20 byte frames) using an ACELP algorithm (MOS 3.62)

g729a:
Sampling frequency 8 kHz/16-bit (80 samples for 10 ms frames)
Fixed bit rate (8 kbit/s 10 ms frames)  比723.1 的 6.3 5.3 大些

理想条件；
g711u  64kbit/s       MOS: 4.45
g729a  8kbit/s        MOS: 4.04
g723.1 6.3kbit/s版本  MOS: 4.08 

-----------
MOS: Mean Opinion Score 主观质量评分 

ffmpeg -re -i ~/av.mp3 -vn -ar 8000 -f mulaw -f rtp rtp://10.3.57.235:1234

这样默认还是 立体声  -ac 1 变为单声道， 就可以 ffplay rtp:// 播放了

并且提示  Guessing on RTP content    这个是 rtsp.c 中，为啥跟 rtsp掺和在一起呢？

rtp 提示 sdp 97 

rtp push:
rtp://@ip:port
udp push
udp://ip:port

vlc:
rtsp://server:8080/test.sdp  // 为什么这样？？  rtsp 跟sdp 啥关系

20171202 在公司加班，无聊无助，压抑，万念成灰

ffmpeg 测试， rtp推流，可以直接播放，  udp推流，必须是ts流形式才能播放


最终的形式可能是， 舍弃一点点音质，使用g729压缩， F401RC 完全有能力解码，然后不用外扩内存
那我不如先做软件，然后再弄硬件，反正硬件很容易弄


G726 32kbps  所以，完全可以不要  512k内存

飞思卡尔M4，官方提供语音压缩算法


ffmpeg -re -i chunwan.h264 -vcodec copy -f h264 udp://233.233.233.223:6666 
ffplay -f h264 udp://233.233.233.223:6666    //播放 h264 裸流，， h264裸流能 播放


关于 sdp 的说明
http://blog.csdn.net/leixiaohua1020/article/details/38283297

http://blog.csdn.net/leixiaohua1020/article/details/38283297
http://blog.csdn.net/u014516174/article/details/70338655

 -protocol_whitelist “file,http,https,rtp,udp,tcp,tls” test.sdp

./ffplay -protocol_whitelist "rtp,file,udp" play.sdp  // ok!

-----

[file @ 0x7fece4005760] Setting default whitelist 'file,crypto'/0


目标：F4 上，利用它的 dsp，高效的解码，各码率
nanopi.io
github.com/friendlyarm

NanoPi NEO
Allwinner H3 4核 cortex-A7 1.2GHz  256MB   u-boot + ubuntucore


BakeBit ...


老姜 操作 音频节点
File descriptor in bad state  问题
https://www.raspberrypi.org/forums/viewtopic.php?t=15614

https://forum.arduino.cc/index.php?topic=338956.0


HR891153C
HR931147C
HR891156C  OK 7+ (TCT/RCT连一起了，怎么处理)
w5500 参考 TCT 10R上拉，22nF 下拉，RCT 10nF 下拉，可这个POE 插座 TCT RCT
是连在一起的

TCT和RCT是变压器发送端和接收端的中心抽头，接3.3V拉高

-----
PAM8403 3W D类音频功率放大器

Class-D amplifier:
靠电子开关(PWM) 而不是线性设备放大

http://www.analog.com/en/analog-dialogue/articles/class-d-audio-amplifiers.html

TPA3122

nanopi pcb 1mm

拾音器  就是个普通 柱状 mic 加一个  TI N5532  是个运算放大器

功放部分，有音频再开启，平时关闭状态， 继电器控制
应该是 主控板 PoE，整个功放板 从220 入口处 就 继电器控制



----
1 pcb 做1mm厚
2 2.0间距排针 板间距6.3mm，太小，2.54间距排针 板间距11mm，太大，现在所选器件最高的是470uF电容，7.7mm，
  底板以上总空间也就是 rg45头的高度13mm,如果用2.54的，板间距11+1mm子板厚度，上面还有1mm，不够放器件的高度
  可以上下都用长排针，灵活调整板间距，或者用比现在大一号的 模具外壳，用单层板子，或者以后选择小一点的电容电感（需要日后调试）
3 买的3402B 引脚质量一般般，可能不好焊接呀








!!!!!!!!!!!!!
INT RST   Pin!!!!




---------------
CF卡转接
A0-A11  D0-D15， 这个可以用锁存器复用，尽量不用2片，因为中间涉及到 spi 通讯也麻烦
用个 64pin 的应该就可以了，48pin的 肯定紧张
初步确定用 64pin F4

pcmcia 转 网口
机器看到还是 cf卡，但是数据在服务器上，这个绝对能做到


