C++11: ISO/IEC 14882:2011 Information technology-Programming languages C++

C++ 11 (73):
alignas    continue     friend    register         true
alignof    decltype     goto      reinterpret_cast try
asm        default      if        return           typedef
auto       delete       inline    short            typeid
bool       do           int       signed           typename
break      double       long      sizeof           union
case       dynamic_cast mutable   static           unsigned
catch      else         namespace static_assert    using
char       enum         new       static_cast      virtual
char16_t   explicit     noexcept  struct           void
char32_t   export       nullptr   switch           volatile
class      extern       operator  template         wchar_t
const      false        private   this             while
constexpr  float        protected thread_local
const_cast for          public    throw


In addition to the facilities provided by C, C ++ provides additional data types, 
classes, templates, exceptions, namespaces, operator overloading, function name overloading, 
references, free store management operators, and additional library facilities.

三种继承方式：私有成员都变不可用
公有继承，公有保护保持原样，保护继承公有保护全保护，私有继承公有保护全私有。
不派生时，保护与私有的地位一致，类外都无法访问，但保护成员可以被派生类的成员函数引用。

Java继承不分共有私有保护，简化了继承关系处理，但也能解决实际问题

虚函数，继承类默认都是虚函数，virtual关键词 可写可不写，写了看着结构更清晰


在继承链中，虚函数重定义，回调到最远处，普通函数重定义，调用最近即最新定义


2个基本形式：
1 定义虚函数基类，继承他，第三方位置定义基类指针，->引用，然后赋值为 继承类指针
2 基类内部，通过 this 指针达到同样效果 类内直接调用 如 foo(); 等价于 this->foo()

第二类用法 android Threads类用了，android的aidl生成的的 Stub，java代码用到了 this.xxx

增加 .*  ->*
C++将前++/-- 和后++/-- 分为不同优先级
C++ 前++/-- 定为第一有限级，跟. [] () 同级，C没有这种情况

// 16.8 Predefined macro names
#if defined __cplusplus
#endif

boost (libboost-dev)

libstdc++  GNU 实现
libc++     LLVM实现 libcxx.llvm.org/

1 类中类，结构体中结构体
3 .C/.cc(C with classes)/.cpp(C plus plus)/.CPP/.c++/.cp/.cxx
4 non-const references can't bind temp objects.  Foo &obj = Foo(); 

ISO C++ 14882:
7.3 Namespaces
27.8.2  C Library files
6.5.4 The range-based for statement

标准头文件位置：
/usr/include/c++/4.8
文件头注释：
forwarding header (转接头文件)


const_cast<>
reinterpret_cast<>
dynamic_cast<>
static_cast<> 类型转换
用于类层次结构中基类和派生类之间指针或引用的转换。进行上行转换
（把派生类的指针或引用转换成基类表示）是安全的；进行下行转换（把基
类指针或引用转换成派生类表示）时，由于没有动态类型检查，所以是不安全的

Python，C++(raise) exception handling代替error code，分离错误处理代码，增加可读性

-------
Threads.cpp

Derived class implement threadLoop().
1) loop: if threadLoop() returns true 
2) once: if threadLoop() returns false

virtual bool threadLoop() = 0; 

创建的线程是 _threadLoop(void* user) 调threadLoop() 
res = createThreadEtc(_threadLoop, this, name, priority, stack, &mThread);
this指针传到 pthread_create 的arg参数,即_threadLoop(void* user) 的user 

//一个函数设置标志，另一个函数检查标志
virtual void requestExit();
bool exitPending() const;


构造函数初始化基类
BoototAnimation::BootAnimation() : Thread(false) {

}

基类可以定义默认值：
Thread(bool canCallJava = true);

否则编译提示：
error: constructor for 'android::AudioPlayer' must explicitly initialize the base 
class 'android::Thread' which does not have a default constructor


有时候觉得C++挺扯蛋的。。。

TwoWire Wire = TwoWire();  // 调用构造函数的一种方式

