priority -50

snippet def
#define ${1}
endsnippet

snippet #ifndef "#ifndef ... #define ... #endif"
#ifndef ${1/([A-Za-z0-9_]+).*/$1/}
#define ${1:SYMBOL} ${2:value}
#endif /* ifndef $1 */
endsnippet

snippet #if "#if #endif" b
#if ${1:0}
${VISUAL}${0}
#endif
endsnippet

snippet mark "#pragma mark (mark)"
#if 0
${1:#pragma mark -
}#pragma mark $2
#endif

$0
endsnippet

snippet main "main() (main)"
int main(int argc, char *argv[])
{
	${0}
	return 0;
}
endsnippet

snippet mainn "mainn() (mainn)"
int main(void)
{
	${0}
	return 0;
}
endsnippet

snippet for "for loop (for)"
for (${2:i} = 0; $2 < ${1:count}; ${3:$2++}) {
	${VISUAL}${0}
}
endsnippet

snippet fori "for int loop (fori)"
for (int i = 0; i < ${1:count}; i++) {
	${VISUAL}${0}
}
endsnippet

snippet wh "while"
while (${1}) {
	${2}
}
endsnippet

snippet do "do... while"
do {
	${1}
} while (${2});
${0}
endsnippet

snippet inc "#include <...>"
#include <${1:stdio}.h>
${0}
endsnippet

snippet Inc "#include"
#include "${1}"
${0}
endsnippet

#snippet once "Include header once only"
##ifndef ${1:`!p
#if not snip.c:
#	import random, string
#	name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
#	rand = ''.join(random.sample(string.ascii_letters+string.digits, 8))
#	snip.rv = ('%s_%s' % (name,rand)).upper()
#else:
#	snip.rv = snip.c`}
##define $1
#${VISUAL}${0}
#
##endif /* $1 */
#endsnippet

snippet once "Include header once only"
#ifndef ${1:`!p
import string
name = re.sub(r'[^A-Za-z0-9]+','_', snip.fn).upper()
snip.rv = ('_%s_' % name)`}
#define $1

${VISUAL}${0}
#endif /* $1 */
endsnippet


snippet fprintf "fprintf ..."
fprintf(${1:stderr}, "${2:%s}\n"${2/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$3${2/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf "printf .. (printf)"
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)/}$2${1/([^%]|%%)*(%.)?.*/(?2:\);)/}
endsnippet

snippet printf1
printf("${1:%s}\n"${1/([^%]|%%)*(%.)?.*/(?2:, :\);)
endsnippet


snippet if
if (${1}) {
	${VISUAL}${0}
}
endsnippet

snippet ife
if (${1}) {
	${2}
} else {
	${0}
}
endsnippet

snippet el
else {
	${0}
}
endsnippet

snippet eli "else if .. (eli)"
else if (${1}) {
	${VISUAL}${0}
}
endsnippet

snippet switch
switch (${1:/* variable */}) {
	case ${2:/* variable case */}:
		${3}
		${4:break;}${5}
	default:
		${6}
}
endsnippet

snippet st-ori "struct"
struct ${1:`!p snip.rv = (snip.basename or "name") + "_t"`} {
	${2}
} ${0};
endsnippet

snippet st "struct"
struct ${1} {
	${2}
}${3};
${0}
endsnippet

snippet enum "enum"
enum ${1:name} {${2}};
endsnippet

snippet tds "typedef struct"
typedef struct ${1}{
	${2}
} $1_t;
endsnippet

snippet tde "typedef enum"
typedef enum {
	${1}
} ${2:foo};
endsnippet	

snippet fun "function" b
${1:void} ${2:function_name}(${3})
{
	${VISUAL}${0}
}
endsnippet

snippet fund "function declaration" b
${1:void} ${2:function_name}(${3});
endsnippet

snippet dumpdata "dump array data"
for (int i = 0; i < ${1:size}; i++) {
	if (!(i % 16)) {
		puts("");
	}
	printf("0x%02x ", ${2:data}[i]);
}
puts("");
${0}
endsnippet

snippet cut "count cut"
if (${1:count} > ${2})
	$1 = $2;
${0}
endsnippet

snippet endian
${1:uint32_t} change_endian($1 value)
{
	$1 tmp = 0;
	tmp |= (value & 0x000000ff) << 24;
	tmp |= (value & 0x0000ff00) << 8;
	tmp |= (value & 0x00ff0000) >> 8;
	tmp |= (value & 0xff000000) >> 24;
	return tmp;
}
${0}
endsnippet

snippet sort "sort char/short/int"
#define SIZE(x) (sizeof(x) / sizeof((x)[0]))

int compare(const void* a, const void* b) {
	return *(${1:int}*)a > *($1*)b;
}
${0}qsort(${2:base}, ${3:SIZE($2)}, sizeof($1), compare);
endsnippet

snippet sortstr "sort string point"
#define SIZE(x) (sizeof(x) / sizeof((x)[0]))
int cmpstrp(const void *p1, const void *p2) 
{
	return strcmp(*(char *const*)p1, *(char *const*)p2);
}
${0}qsort(${1:pointers to pointers to char}, ${2:SIZE($1)}, sizeof(char*), cmpstrp);
endsnippet

snippet duiqi
len = (len+2^n-1) & ~(2^n-1);
len = (len+n-1)/n*n;
count = (count+n-1)/n;
endsnippet

snippet file "open file"
endsnippet

snippet list

#include "list.h"
#include "list_sort.h"

struct ${1:node} {
	struct list_head sort;
	char word[16];
};

LIST_HEAD(sort_head);

struct $1 *$1;
struct list_head *pos;
	

$1 = malloc(sizeof(*$1));
//strcpy(string->word, tmp);
//list_add_tail(&string->unsort, &unsort_head);
list_add(&string->sort, &sort_head);

	
list_for_each(pos, &sort_head) {
	string = list_entry(pos, struct $1, unsort);
	printf("%s", string->word);
}

endsnippet

snippet title "Titelize in the Transformation"
${1:a text}
${1/\w+\s*/\u$0/g}
endsnippet

snippet arraysize
#define ARRAY_SIZE(x) (sizeof(x) / sizeof((x)[0]))
${0}
endsnippet

snippet strtok
for (i = 0; i < count; i++, p = NULL) {
	s_crc = strtok(p, "\n ");
	slice_crc[i] = strtol(s_crc, NULL, 16);
}
endsnippet

snippet strcmp
if (!strcmp(s, "true")) {
	
} 
endsnippet

snippet va_list
void foo(char* fmt, ...)
{
    va_list ap; 
    va_start(ap, fmt);
    printf("foo:");
    vfprintf(stdout, fmt, ap);
    va_end(ap);
    puts("");
}
endsnippet

# vim:ft=snippets:
