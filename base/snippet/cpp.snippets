# TextMate Snippets
priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49

snippet incc
#include <${1:iostream}>
endsnippet

snippet binc
#include <boost/${1:shared_ptr}.hpp>
endsnippet	

## Access Modifiers
snippet pri "private"
private
endsnippet

snippet pro "protected"
protected
endsnippet

snippet pub "public"
public
endsnippet

snippet fr "friend"
friend
endsnippet
	
#### STL
snippet array
std::array<${1:T}, ${2:N}> ${3};
endsnippet

snippet deque
std::deque<${1:T}> ${2};
endsnippet

snippet flist "forward_list"
std::forward_list<${1:T}> ${2};
endsnippet

snippet list
std::list<${1:T}> ${2};
endsnippet

snippet set
std::set<${1:T}> ${2};
endsnippet

snippet map
std::map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet mset "multiset"
std::multiset<${1:T}> ${2};
endsnippet

snippet mmap "multimap"
std::multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet uset "unordered_set"
std::unordered_set<${1:T}> ${2};
endsnippet

snippet umap "unordered_map"
std::unordered_map<${1:Key}, ${2:T}> ${3};
endsnippet

snippet umset "unordered_multiset"
std::unordered_multiset<${1:T}> ${2};
endsnippet

snippet ummap "unordered_multimap"
std::unordered_multimap<${1:Key}, ${2:T}> ${3};
endsnippet

snippet stack "stack"
std::stack<${1:T}> ${2};
endsnippet

snippet queue "queue"
std::queue<${1:T}> ${2};
endsnippet

snippet pqueue "priority_queue"
std::priority_queue<${1:T}> ${2};
endsnippet
########end stl

## Casts
snippet sca "static"
static_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet dca "dynamic"
dynamic_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
 
snippet rca "reinterpret"
reinterpret_cast<${1:unsigned}>(${2:expr})${3}
endsnippet

snippet cca "const"
const_cast<${1:unsigned}>(${2:expr})${3}
endsnippet
## end Casts


## Iteration
snippet fori
for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) {
	${4}
}
endsnippet

snippet fore "foreach"
for (${1:auto} ${2:i} : ${3:container}) {
	${4}
}
endsnippet

snippet iter "iterator"
for (${1:std::vector}<${2:type}>::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) {
	${6}
}
endsnippet

snippet itera "auto iterator"
for (auto ${1:i} = ${2:container}.begin(); $1 != $2.end(); ++$1) {
	${3:std::cout << *$1 << std::endl;}
}
endsnippet

## Input/Output
snippet cout "std::cout"
std::cout << ${1} << std::endl;
endsnippet

snippet cin "std::cin"
std::cin >> ${1};
endsnippet
##

## Lambdas
snippet ld "lamda (one line)"
[${1}](${2}){${3}};
endsnippet

snippet lld "lambda (multi-line)"
[${1}](${2}){
	${3}
};
endsnippet
	

snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}${0}
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r")) {
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector
std::vector<${1:T}> ${2};
${0}
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	${3}

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet


snippet mfun "member function impl"
${4:void} ${1:`vim_snippets#Filename('$1', 'ClassName')`}::${2:memberFunction}(${3}) {
	${0}
}
endsnippet	

# vim:ft=snippets:
