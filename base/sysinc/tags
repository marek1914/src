!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ARCH_HAS_PREFETCH	list.h	18;"	d
CLOCKS_PER_SEC	time.h	47;"	d
CLOCK_MONOTONIC	time.h	52;"	d
CLOCK_MONOTONIC_HR	time.h	56;"	d
CLOCK_PROCESS_CPUTIME_ID	time.h	53;"	d
CLOCK_REALTIME	time.h	51;"	d
CLOCK_REALTIME_HR	time.h	55;"	d
CLOCK_THREAD_CPUTIME_ID	time.h	54;"	d
ContainerID	libusb/libusb.h	/^	uint8_t  ContainerID[16];$/;"	m	struct:libusb_container_id_descriptor
DIR	dirent.h	/^typedef struct DIR DIR;$/;"	t	typeref:struct:DIR
DT_BLK	dirent.h	6;"	d
DT_CHR	dirent.h	4;"	d
DT_DIR	dirent.h	5;"	d
DT_FIFO	dirent.h	3;"	d
DT_LNK	dirent.h	8;"	d
DT_REG	dirent.h	7;"	d
DT_SOCK	dirent.h	9;"	d
DT_UNKNOWN	dirent.h	2;"	d
DT_WHT	dirent.h	10;"	d
F_OK	unistd.h	76;"	d
HLIST_HEAD	list.h	551;"	d
HLIST_HEAD_INIT	list.h	550;"	d
INIT_HLIST_HEAD	list.h	552;"	d
INIT_HLIST_NODE	list.h	/^static inline void INIT_HLIST_NODE(struct hlist_node *h)$/;"	f
INIT_LIST_HEAD	list.h	/^static inline void INIT_LIST_HEAD(struct list_head *list)$/;"	f
INT16_C	stdint.h	108;"	d
INT16_MAX	stdint.h	96;"	d
INT16_MIN	stdint.h	95;"	d
INT32_C	stdint.h	141;"	d
INT32_MAX	stdint.h	129;"	d
INT32_MIN	stdint.h	128;"	d
INT64_C	stdint.h	177;"	d
INT64_MAX	stdint.h	162;"	d
INT64_MIN	stdint.h	161;"	d
INT8_C	stdint.h	75;"	d
INT8_MAX	stdint.h	63;"	d
INT8_MIN	stdint.h	62;"	d
INTMAX_C	stdint.h	225;"	d
INTMAX_MAX	stdint.h	220;"	d
INTMAX_MIN	stdint.h	219;"	d
INTPTR_C	stdint.h	206;"	d
INTPTR_MAX	stdint.h	199;"	d
INTPTR_MIN	stdint.h	198;"	d
INT_FAST16_C	stdint.h	110;"	d
INT_FAST16_MAX	stdint.h	100;"	d
INT_FAST16_MIN	stdint.h	99;"	d
INT_FAST32_C	stdint.h	143;"	d
INT_FAST32_MAX	stdint.h	133;"	d
INT_FAST32_MIN	stdint.h	132;"	d
INT_FAST64_C	stdint.h	179;"	d
INT_FAST64_MAX	stdint.h	166;"	d
INT_FAST64_MIN	stdint.h	165;"	d
INT_FAST8_C	stdint.h	77;"	d
INT_FAST8_MAX	stdint.h	67;"	d
INT_FAST8_MIN	stdint.h	66;"	d
INT_LEAST16_C	stdint.h	109;"	d
INT_LEAST16_MAX	stdint.h	98;"	d
INT_LEAST16_MIN	stdint.h	97;"	d
INT_LEAST32_C	stdint.h	142;"	d
INT_LEAST32_MAX	stdint.h	131;"	d
INT_LEAST32_MIN	stdint.h	130;"	d
INT_LEAST64_C	stdint.h	178;"	d
INT_LEAST64_MAX	stdint.h	164;"	d
INT_LEAST64_MIN	stdint.h	163;"	d
INT_LEAST8_C	stdint.h	76;"	d
INT_LEAST8_MAX	stdint.h	65;"	d
INT_LEAST8_MIN	stdint.h	64;"	d
LIBUSBX_API_VERSION	libusb/libusb.h	147;"	d
LIBUSB_BM_LPM_SUPPORT	libusb/libusb.h	/^	LIBUSB_BM_LPM_SUPPORT = 2,$/;"	e	enum:libusb_usb_2_0_extension_attributes
LIBUSB_BM_LTM_SUPPORT	libusb/libusb.h	/^	LIBUSB_BM_LTM_SUPPORT = 2,$/;"	e	enum:libusb_ss_usb_device_capability_attributes
LIBUSB_BT_CONTAINER_ID	libusb/libusb.h	/^	LIBUSB_BT_CONTAINER_ID				= 4,$/;"	e	enum:libusb_bos_type
LIBUSB_BT_CONTAINER_ID_SIZE	libusb/libusb.h	303;"	d
LIBUSB_BT_SS_USB_DEVICE_CAPABILITY	libusb/libusb.h	/^	LIBUSB_BT_SS_USB_DEVICE_CAPABILITY		= 3,$/;"	e	enum:libusb_bos_type
LIBUSB_BT_SS_USB_DEVICE_CAPABILITY_SIZE	libusb/libusb.h	302;"	d
LIBUSB_BT_USB_2_0_EXTENSION	libusb/libusb.h	/^	LIBUSB_BT_USB_2_0_EXTENSION			= 2,$/;"	e	enum:libusb_bos_type
LIBUSB_BT_USB_2_0_EXTENSION_SIZE	libusb/libusb.h	301;"	d
LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY	libusb/libusb.h	/^	LIBUSB_BT_WIRELESS_USB_DEVICE_CAPABILITY	= 1,$/;"	e	enum:libusb_bos_type
LIBUSB_CALL	libusb/libusb.h	119;"	d
LIBUSB_CALL	libusb/libusb.h	121;"	d
LIBUSB_CAP_HAS_CAPABILITY	libusb/libusb.h	/^	LIBUSB_CAP_HAS_CAPABILITY = 0x0000,$/;"	e	enum:libusb_capability
LIBUSB_CAP_HAS_HID_ACCESS	libusb/libusb.h	/^	LIBUSB_CAP_HAS_HID_ACCESS = 0x0100,$/;"	e	enum:libusb_capability
LIBUSB_CAP_HAS_HOTPLUG	libusb/libusb.h	/^	LIBUSB_CAP_HAS_HOTPLUG = 0x0001,$/;"	e	enum:libusb_capability
LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER	libusb/libusb.h	/^	LIBUSB_CAP_SUPPORTS_DETACH_KERNEL_DRIVER = 0x0101$/;"	e	enum:libusb_capability
LIBUSB_CLASS_APPLICATION	libusb/libusb.h	/^	LIBUSB_CLASS_APPLICATION = 0xfe,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_AUDIO	libusb/libusb.h	/^	LIBUSB_CLASS_AUDIO = 1,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_COMM	libusb/libusb.h	/^	LIBUSB_CLASS_COMM = 2,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_CONTENT_SECURITY	libusb/libusb.h	/^	LIBUSB_CLASS_CONTENT_SECURITY = 0x0d,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_DATA	libusb/libusb.h	/^	LIBUSB_CLASS_DATA = 10,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_DIAGNOSTIC_DEVICE	libusb/libusb.h	/^	LIBUSB_CLASS_DIAGNOSTIC_DEVICE = 0xdc,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_HID	libusb/libusb.h	/^	LIBUSB_CLASS_HID = 3,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_HUB	libusb/libusb.h	/^	LIBUSB_CLASS_HUB = 9,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_IMAGE	libusb/libusb.h	/^	LIBUSB_CLASS_IMAGE = 6,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_MASS_STORAGE	libusb/libusb.h	/^	LIBUSB_CLASS_MASS_STORAGE = 8,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PERSONAL_HEALTHCARE	libusb/libusb.h	/^	LIBUSB_CLASS_PERSONAL_HEALTHCARE = 0x0f,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PER_INTERFACE	libusb/libusb.h	/^	LIBUSB_CLASS_PER_INTERFACE = 0,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PHYSICAL	libusb/libusb.h	/^	LIBUSB_CLASS_PHYSICAL = 5,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PRINTER	libusb/libusb.h	/^	LIBUSB_CLASS_PRINTER = 7,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_PTP	libusb/libusb.h	/^	LIBUSB_CLASS_PTP = 6, \/* legacy name from libusb-0.1 usb.h *\/$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_SMART_CARD	libusb/libusb.h	/^	LIBUSB_CLASS_SMART_CARD = 0x0b,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_VENDOR_SPEC	libusb/libusb.h	/^	LIBUSB_CLASS_VENDOR_SPEC = 0xff$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_VIDEO	libusb/libusb.h	/^	LIBUSB_CLASS_VIDEO = 0x0e,$/;"	e	enum:libusb_class_code
LIBUSB_CLASS_WIRELESS	libusb/libusb.h	/^	LIBUSB_CLASS_WIRELESS = 0xe0,$/;"	e	enum:libusb_class_code
LIBUSB_CONTROL_SETUP_SIZE	libusb/libusb.h	890;"	d
LIBUSB_DEPRECATED_FOR	libusb/libusb.h	80;"	d
LIBUSB_DEPRECATED_FOR	libusb/libusb.h	83;"	d
LIBUSB_DT_BOS	libusb/libusb.h	/^	LIBUSB_DT_BOS = 0x0f,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_BOS_MAX_SIZE	libusb/libusb.h	306;"	d
LIBUSB_DT_BOS_SIZE	libusb/libusb.h	297;"	d
LIBUSB_DT_CONFIG	libusb/libusb.h	/^	LIBUSB_DT_CONFIG = 0x02,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_CONFIG_SIZE	libusb/libusb.h	291;"	d
LIBUSB_DT_DEVICE	libusb/libusb.h	/^	LIBUSB_DT_DEVICE = 0x01,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_DEVICE_CAPABILITY	libusb/libusb.h	/^	LIBUSB_DT_DEVICE_CAPABILITY = 0x10,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_DEVICE_CAPABILITY_SIZE	libusb/libusb.h	298;"	d
LIBUSB_DT_DEVICE_SIZE	libusb/libusb.h	290;"	d
LIBUSB_DT_ENDPOINT	libusb/libusb.h	/^	LIBUSB_DT_ENDPOINT = 0x05,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_ENDPOINT_AUDIO_SIZE	libusb/libusb.h	294;"	d
LIBUSB_DT_ENDPOINT_SIZE	libusb/libusb.h	293;"	d
LIBUSB_DT_HID	libusb/libusb.h	/^	LIBUSB_DT_HID = 0x21,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_HUB	libusb/libusb.h	/^	LIBUSB_DT_HUB = 0x29,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_HUB_NONVAR_SIZE	libusb/libusb.h	295;"	d
LIBUSB_DT_INTERFACE	libusb/libusb.h	/^	LIBUSB_DT_INTERFACE = 0x04,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_INTERFACE_SIZE	libusb/libusb.h	292;"	d
LIBUSB_DT_PHYSICAL	libusb/libusb.h	/^	LIBUSB_DT_PHYSICAL = 0x23,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_REPORT	libusb/libusb.h	/^	LIBUSB_DT_REPORT = 0x22,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_SS_ENDPOINT_COMPANION	libusb/libusb.h	/^	LIBUSB_DT_SS_ENDPOINT_COMPANION = 0x30$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_SS_ENDPOINT_COMPANION_SIZE	libusb/libusb.h	296;"	d
LIBUSB_DT_STRING	libusb/libusb.h	/^	LIBUSB_DT_STRING = 0x03,$/;"	e	enum:libusb_descriptor_type
LIBUSB_DT_SUPERSPEED_HUB	libusb/libusb.h	/^	LIBUSB_DT_SUPERSPEED_HUB = 0x2a,$/;"	e	enum:libusb_descriptor_type
LIBUSB_ENDPOINT_ADDRESS_MASK	libusb/libusb.h	311;"	d
LIBUSB_ENDPOINT_DIR_MASK	libusb/libusb.h	312;"	d
LIBUSB_ENDPOINT_IN	libusb/libusb.h	/^	LIBUSB_ENDPOINT_IN = 0x80,$/;"	e	enum:libusb_endpoint_direction
LIBUSB_ENDPOINT_OUT	libusb/libusb.h	/^	LIBUSB_ENDPOINT_OUT = 0x00$/;"	e	enum:libusb_endpoint_direction
LIBUSB_ERROR_ACCESS	libusb/libusb.h	/^	LIBUSB_ERROR_ACCESS = -3,$/;"	e	enum:libusb_error
LIBUSB_ERROR_BUSY	libusb/libusb.h	/^	LIBUSB_ERROR_BUSY = -6,$/;"	e	enum:libusb_error
LIBUSB_ERROR_COUNT	libusb/libusb.h	1099;"	d
LIBUSB_ERROR_INTERRUPTED	libusb/libusb.h	/^	LIBUSB_ERROR_INTERRUPTED = -10,$/;"	e	enum:libusb_error
LIBUSB_ERROR_INVALID_PARAM	libusb/libusb.h	/^	LIBUSB_ERROR_INVALID_PARAM = -2,$/;"	e	enum:libusb_error
LIBUSB_ERROR_IO	libusb/libusb.h	/^	LIBUSB_ERROR_IO = -1,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NOT_FOUND	libusb/libusb.h	/^	LIBUSB_ERROR_NOT_FOUND = -5,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NOT_SUPPORTED	libusb/libusb.h	/^	LIBUSB_ERROR_NOT_SUPPORTED = -12,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NO_DEVICE	libusb/libusb.h	/^	LIBUSB_ERROR_NO_DEVICE = -4,$/;"	e	enum:libusb_error
LIBUSB_ERROR_NO_MEM	libusb/libusb.h	/^	LIBUSB_ERROR_NO_MEM = -11,$/;"	e	enum:libusb_error
LIBUSB_ERROR_OTHER	libusb/libusb.h	/^	LIBUSB_ERROR_OTHER = -99,$/;"	e	enum:libusb_error
LIBUSB_ERROR_OVERFLOW	libusb/libusb.h	/^	LIBUSB_ERROR_OVERFLOW = -8,$/;"	e	enum:libusb_error
LIBUSB_ERROR_PIPE	libusb/libusb.h	/^	LIBUSB_ERROR_PIPE = -9,$/;"	e	enum:libusb_error
LIBUSB_ERROR_TIMEOUT	libusb/libusb.h	/^	LIBUSB_ERROR_TIMEOUT = -7,$/;"	e	enum:libusb_error
LIBUSB_FULL_SPEED_OPERATION	libusb/libusb.h	/^	LIBUSB_FULL_SPEED_OPERATION  = 2,$/;"	e	enum:libusb_supported_speed
LIBUSB_H	libusb/libusb.h	25;"	d
LIBUSB_HIGH_SPEED_OPERATION	libusb/libusb.h	/^	LIBUSB_HIGH_SPEED_OPERATION  = 4,$/;"	e	enum:libusb_supported_speed
LIBUSB_HOTPLUG_ENUMERATE	libusb/libusb.h	/^	LIBUSB_HOTPLUG_ENUMERATE = 1,$/;"	e	enum:__anon1
LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED	libusb/libusb.h	/^	LIBUSB_HOTPLUG_EVENT_DEVICE_ARRIVED = 0x01,$/;"	e	enum:__anon2
LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT	libusb/libusb.h	/^	LIBUSB_HOTPLUG_EVENT_DEVICE_LEFT    = 0x02,$/;"	e	enum:__anon2
LIBUSB_HOTPLUG_MATCH_ANY	libusb/libusb.h	1865;"	d
LIBUSB_ISO_SYNC_TYPE_ADAPTIVE	libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_ADAPTIVE = 2,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_ASYNC	libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_ASYNC = 1,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_MASK	libusb/libusb.h	430;"	d
LIBUSB_ISO_SYNC_TYPE_NONE	libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_NONE = 0,$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_SYNC_TYPE_SYNC	libusb/libusb.h	/^	LIBUSB_ISO_SYNC_TYPE_SYNC = 3$/;"	e	enum:libusb_iso_sync_type
LIBUSB_ISO_USAGE_TYPE_DATA	libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_DATA = 0,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_FEEDBACK	libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_FEEDBACK = 1,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_IMPLICIT	libusb/libusb.h	/^	LIBUSB_ISO_USAGE_TYPE_IMPLICIT = 2,$/;"	e	enum:libusb_iso_usage_type
LIBUSB_ISO_USAGE_TYPE_MASK	libusb/libusb.h	451;"	d
LIBUSB_LOG_LEVEL_DEBUG	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_DEBUG,$/;"	e	enum:libusb_log_level
LIBUSB_LOG_LEVEL_ERROR	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_ERROR,$/;"	e	enum:libusb_log_level
LIBUSB_LOG_LEVEL_INFO	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_INFO,$/;"	e	enum:libusb_log_level
LIBUSB_LOG_LEVEL_NONE	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_NONE = 0,$/;"	e	enum:libusb_log_level
LIBUSB_LOG_LEVEL_WARNING	libusb/libusb.h	/^	LIBUSB_LOG_LEVEL_WARNING,$/;"	e	enum:libusb_log_level
LIBUSB_LOW_SPEED_OPERATION	libusb/libusb.h	/^	LIBUSB_LOW_SPEED_OPERATION   = 1,$/;"	e	enum:libusb_supported_speed
LIBUSB_RECIPIENT_DEVICE	libusb/libusb.h	/^	LIBUSB_RECIPIENT_DEVICE = 0x00,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_ENDPOINT	libusb/libusb.h	/^	LIBUSB_RECIPIENT_ENDPOINT = 0x02,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_INTERFACE	libusb/libusb.h	/^	LIBUSB_RECIPIENT_INTERFACE = 0x01,$/;"	e	enum:libusb_request_recipient
LIBUSB_RECIPIENT_OTHER	libusb/libusb.h	/^	LIBUSB_RECIPIENT_OTHER = 0x03,$/;"	e	enum:libusb_request_recipient
LIBUSB_REQUEST_CLEAR_FEATURE	libusb/libusb.h	/^	LIBUSB_REQUEST_CLEAR_FEATURE = 0x01,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_CONFIGURATION	libusb/libusb.h	/^	LIBUSB_REQUEST_GET_CONFIGURATION = 0x08,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_DESCRIPTOR	libusb/libusb.h	/^	LIBUSB_REQUEST_GET_DESCRIPTOR = 0x06,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_INTERFACE	libusb/libusb.h	/^	LIBUSB_REQUEST_GET_INTERFACE = 0x0A,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_GET_STATUS	libusb/libusb.h	/^	LIBUSB_REQUEST_GET_STATUS = 0x00,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_ADDRESS	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_ADDRESS = 0x05,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_CONFIGURATION	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_CONFIGURATION = 0x09,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_DESCRIPTOR	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_DESCRIPTOR = 0x07,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_FEATURE	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_FEATURE = 0x03,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_INTERFACE	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_INTERFACE = 0x0B,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SET_SEL	libusb/libusb.h	/^	LIBUSB_REQUEST_SET_SEL = 0x30,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_SYNCH_FRAME	libusb/libusb.h	/^	LIBUSB_REQUEST_SYNCH_FRAME = 0x0C,$/;"	e	enum:libusb_standard_request
LIBUSB_REQUEST_TYPE_CLASS	libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_CLASS = (0x01 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_RESERVED	libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_RESERVED = (0x03 << 5)$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_STANDARD	libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_STANDARD = (0x00 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_REQUEST_TYPE_VENDOR	libusb/libusb.h	/^	LIBUSB_REQUEST_TYPE_VENDOR = (0x02 << 5),$/;"	e	enum:libusb_request_type
LIBUSB_SET_ISOCH_DELAY	libusb/libusb.h	/^	LIBUSB_SET_ISOCH_DELAY = 0x31,$/;"	e	enum:libusb_standard_request
LIBUSB_SPEED_FULL	libusb/libusb.h	/^	LIBUSB_SPEED_FULL = 2,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_HIGH	libusb/libusb.h	/^	LIBUSB_SPEED_HIGH = 3,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_LOW	libusb/libusb.h	/^	LIBUSB_SPEED_LOW = 1,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_SUPER	libusb/libusb.h	/^	LIBUSB_SPEED_SUPER = 4,$/;"	e	enum:libusb_speed
LIBUSB_SPEED_UNKNOWN	libusb/libusb.h	/^	LIBUSB_SPEED_UNKNOWN = 0,$/;"	e	enum:libusb_speed
LIBUSB_SUCCESS	libusb/libusb.h	/^	LIBUSB_SUCCESS = 0,$/;"	e	enum:libusb_error
LIBUSB_SUPER_SPEED_OPERATION	libusb/libusb.h	/^	LIBUSB_SUPER_SPEED_OPERATION = 8,$/;"	e	enum:libusb_supported_speed
LIBUSB_TRANSFER_ADD_ZERO_PACKET	libusb/libusb.h	/^	LIBUSB_TRANSFER_ADD_ZERO_PACKET = 1 << 3,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_CANCELLED	libusb/libusb.h	/^	LIBUSB_TRANSFER_CANCELLED,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_COMPLETED	libusb/libusb.h	/^	LIBUSB_TRANSFER_COMPLETED,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_ERROR	libusb/libusb.h	/^	LIBUSB_TRANSFER_ERROR,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_FREE_BUFFER	libusb/libusb.h	/^	LIBUSB_TRANSFER_FREE_BUFFER = 1<<1,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_FREE_TRANSFER	libusb/libusb.h	/^	LIBUSB_TRANSFER_FREE_TRANSFER = 1<<2,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_NO_DEVICE	libusb/libusb.h	/^	LIBUSB_TRANSFER_NO_DEVICE,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_OVERFLOW	libusb/libusb.h	/^	LIBUSB_TRANSFER_OVERFLOW,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_SHORT_NOT_OK	libusb/libusb.h	/^	LIBUSB_TRANSFER_SHORT_NOT_OK = 1<<0,$/;"	e	enum:libusb_transfer_flags
LIBUSB_TRANSFER_STALL	libusb/libusb.h	/^	LIBUSB_TRANSFER_STALL,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_TIMED_OUT	libusb/libusb.h	/^	LIBUSB_TRANSFER_TIMED_OUT,$/;"	e	enum:libusb_transfer_status
LIBUSB_TRANSFER_TYPE_BULK	libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_BULK = 2,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_CONTROL	libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_CONTROL = 0,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_INTERRUPT	libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_INTERRUPT = 3$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_ISOCHRONOUS	libusb/libusb.h	/^	LIBUSB_TRANSFER_TYPE_ISOCHRONOUS = 1,$/;"	e	enum:libusb_transfer_type
LIBUSB_TRANSFER_TYPE_MASK	libusb/libusb.h	326;"	d
LIST_HEAD	list.h	38;"	d
LIST_HEAD_INIT	list.h	36;"	d
LIST_POISON1	list.h	9;"	d
LIST_POISON2	list.h	10;"	d
MaxPower	libusb/libusb.h	/^	uint8_t  MaxPower;$/;"	m	struct:libusb_config_descriptor
PTRDIFF_C	stdint.h	208;"	d
PTRDIFF_MAX	stdint.h	202;"	d
PTRDIFF_MIN	stdint.h	201;"	d
R_OK	unistd.h	73;"	d
SEEK_CUR	stdio.h	2;"	d
SEEK_CUR	unistd.h	2;"	d
SEEK_END	stdio.h	3;"	d
SEEK_END	unistd.h	3;"	d
SEEK_SET	stdio.h	1;"	d
SEEK_SET	unistd.h	1;"	d
SIG_ATOMIC_MAX	stdint.h	232;"	d
SIG_ATOMIC_MIN	stdint.h	231;"	d
UINT16_C	stdint.h	112;"	d
UINT16_MAX	stdint.h	102;"	d
UINT32_C	stdint.h	145;"	d
UINT32_MAX	stdint.h	135;"	d
UINT64_C	stdint.h	181;"	d
UINT64_MAX	stdint.h	167;"	d
UINT8_C	stdint.h	79;"	d
UINT8_MAX	stdint.h	69;"	d
UINTMAX_C	stdint.h	226;"	d
UINTMAX_MAX	stdint.h	221;"	d
UINTPTR_C	stdint.h	207;"	d
UINTPTR_MAX	stdint.h	200;"	d
UINT_FAST16_C	stdint.h	114;"	d
UINT_FAST16_MAX	stdint.h	104;"	d
UINT_FAST32_C	stdint.h	147;"	d
UINT_FAST32_MAX	stdint.h	137;"	d
UINT_FAST64_C	stdint.h	183;"	d
UINT_FAST64_MAX	stdint.h	170;"	d
UINT_FAST8_C	stdint.h	81;"	d
UINT_FAST8_MAX	stdint.h	71;"	d
UINT_LEAST16_C	stdint.h	113;"	d
UINT_LEAST16_MAX	stdint.h	103;"	d
UINT_LEAST32_C	stdint.h	146;"	d
UINT_LEAST32_MAX	stdint.h	136;"	d
UINT_LEAST64_C	stdint.h	182;"	d
UINT_LEAST64_MAX	stdint.h	169;"	d
UINT_LEAST8_C	stdint.h	80;"	d
UINT_LEAST8_MAX	stdint.h	70;"	d
WCHAR_MAX	stdint.h	240;"	d
WCHAR_MIN	stdint.h	239;"	d
WINT_MAX	stdint.h	247;"	d
WINT_MIN	stdint.h	246;"	d
W_OK	unistd.h	74;"	d
X_OK	unistd.h	75;"	d
_BITSIZE	stdint.h	256;"	d
_SSIZE_T_DEFINED	libusb/libusb.h	34;"	d
_SSIZE_T_DEFINED_	stdint.h	252;"	d
_STDINT_H	stdint.h	29;"	d
__BIT_TYPES_DEFINED__	stdint.h	259;"	d
__INT64_C	stdint.h	173;"	d
__LIST_H	list.h	2;"	d
__PRI64_RANK	stdint.h	186;"	d
__PRIFAST_RANK	stdint.h	187;"	d
__PRIPTR_RANK	stdint.h	188;"	d
__STDINT_LIMITS	stdint.h	35;"	d
__STDINT_MACROS	stdint.h	39;"	d
__UINT64_C	stdint.h	174;"	d
__brk	unistd.h	/^void *__brk(void *);$/;"	p
__hlist_del	list.h	/^static inline void __hlist_del(struct hlist_node *n)$/;"	f
__list_add	list.h	/^static inline void __list_add(struct list_head *new,$/;"	f
__list_cut_position	list.h	/^static inline void __list_cut_position(struct list_head *list,$/;"	f
__list_del	list.h	/^static inline void __list_del(struct list_head *prev, struct list_head *next)$/;"	f
__list_for_each	list.h	369;"	d
__list_splice	list.h	/^static inline void __list_splice(const struct list_head *list,$/;"	f
_exit	unistd.h	/^__noreturn void _exit(int);$/;"	p
abort	stdlib.h	/^void abort(void);$/;"	p
access	unistd.h	/^int access(const char *, int);$/;"	p
acct	unistd.h	/^int  acct(const char*  filepath);$/;"	p
acos	math.h	/^double	acos(double);$/;"	p
acosf	math.h	/^float	acosf(float);$/;"	p
acosh	math.h	/^double	acosh(double);$/;"	p
acoshf	math.h	/^float	acoshf(float);$/;"	p
acoshl	math.h	/^long double	acoshl(long double);$/;"	p
acosl	math.h	/^long double	acosl(long double);$/;"	p
actual_length	libusb/libusb.h	/^	int actual_length;$/;"	m	struct:libusb_transfer
actual_length	libusb/libusb.h	/^	unsigned int actual_length;$/;"	m	struct:libusb_iso_packet_descriptor
alarm	unistd.h	/^unsigned int alarm(unsigned int);$/;"	p
alphasort	dirent.h	/^int alphasort(const void *a, const void *b);$/;"	p
altsetting	libusb/libusb.h	/^	const struct libusb_interface_descriptor *altsetting;$/;"	m	struct:libusb_interface	typeref:struct:libusb_interface::libusb_interface_descriptor
arc4random	stdlib.h	/^unsigned int arc4random(void);$/;"	p
arc4random_addrandom	stdlib.h	/^void arc4random_addrandom(unsigned char *, int);$/;"	p
arc4random_stir	stdlib.h	/^void arc4random_stir(void);$/;"	p
asctime	time.h	/^char *asctime(const struct tm *tm);$/;"	p
asctime_r	time.h	/^char *asctime_r(const struct tm *tm, char *buf);$/;"	p
asin	math.h	/^double	asin(double);$/;"	p
asinf	math.h	/^float	asinf(float);$/;"	p
asinh	math.h	/^double	asinh(double);$/;"	p
asinhf	math.h	/^float	asinhf(float);$/;"	p
asinhl	math.h	/^long double	asinhl(long double);$/;"	p
asinl	math.h	/^long double	asinl(long double);$/;"	p
assert	assert.h	/^void assert(scalar expression);$/;"	p
atan	math.h	/^double	atan(double);$/;"	p
atan2	math.h	/^double	atan2(double, double);$/;"	p
atan2f	math.h	/^float	atan2f(float, float);$/;"	p
atan2l	math.h	/^long double	atan2l(long double, long double);$/;"	p
atanf	math.h	/^float	atanf(float);$/;"	p
atanh	math.h	/^double	atanh(double);$/;"	p
atanhf	math.h	/^float	atanhf(float);$/;"	p
atanhl	math.h	/^long double	atanhl(long double);$/;"	p
atanl	math.h	/^long double	atanl(long double);$/;"	p
atexit	stdlib.h	/^int atexit(void (*)(void));$/;"	p
atoi	stdlib.h	/^int atoi(const char *);$/;"	p
atol	stdlib.h	/^long atol(const char *);$/;"	p
atoll	stdlib.h	/^long long atoll(const char *);$/;"	p
bAlternateSetting	libusb/libusb.h	/^	uint8_t  bAlternateSetting;$/;"	m	struct:libusb_interface_descriptor
bConfigurationValue	libusb/libusb.h	/^	uint8_t  bConfigurationValue;$/;"	m	struct:libusb_config_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_bos_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_config_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_container_id_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_device_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_endpoint_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_interface_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t  bDescriptorType;$/;"	m	struct:libusb_usb_2_0_extension_descriptor
bDescriptorType	libusb/libusb.h	/^	uint8_t bDescriptorType;$/;"	m	struct:libusb_bos_dev_capability_descriptor
bDevCapabilityType	libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_container_id_descriptor
bDevCapabilityType	libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bDevCapabilityType	libusb/libusb.h	/^	uint8_t  bDevCapabilityType;$/;"	m	struct:libusb_usb_2_0_extension_descriptor
bDevCapabilityType	libusb/libusb.h	/^	uint8_t bDevCapabilityType;$/;"	m	struct:libusb_bos_dev_capability_descriptor
bDeviceClass	libusb/libusb.h	/^	uint8_t  bDeviceClass;$/;"	m	struct:libusb_device_descriptor
bDeviceProtocol	libusb/libusb.h	/^	uint8_t  bDeviceProtocol;$/;"	m	struct:libusb_device_descriptor
bDeviceSubClass	libusb/libusb.h	/^	uint8_t  bDeviceSubClass;$/;"	m	struct:libusb_device_descriptor
bEndpointAddress	libusb/libusb.h	/^	uint8_t  bEndpointAddress;$/;"	m	struct:libusb_endpoint_descriptor
bFunctionalitySupport	libusb/libusb.h	/^	uint8_t  bFunctionalitySupport;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bInterfaceClass	libusb/libusb.h	/^	uint8_t  bInterfaceClass;$/;"	m	struct:libusb_interface_descriptor
bInterfaceNumber	libusb/libusb.h	/^	uint8_t  bInterfaceNumber;$/;"	m	struct:libusb_interface_descriptor
bInterfaceProtocol	libusb/libusb.h	/^	uint8_t  bInterfaceProtocol;$/;"	m	struct:libusb_interface_descriptor
bInterfaceSubClass	libusb/libusb.h	/^	uint8_t  bInterfaceSubClass;$/;"	m	struct:libusb_interface_descriptor
bInterval	libusb/libusb.h	/^	uint8_t  bInterval;$/;"	m	struct:libusb_endpoint_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_bos_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_config_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_container_id_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_device_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_endpoint_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_interface_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bLength	libusb/libusb.h	/^	uint8_t  bLength;$/;"	m	struct:libusb_usb_2_0_extension_descriptor
bLength	libusb/libusb.h	/^	uint8_t bLength;$/;"	m	struct:libusb_bos_dev_capability_descriptor
bMaxBurst	libusb/libusb.h	/^	uint8_t  bMaxBurst;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
bMaxPacketSize0	libusb/libusb.h	/^	uint8_t  bMaxPacketSize0;$/;"	m	struct:libusb_device_descriptor
bNumConfigurations	libusb/libusb.h	/^	uint8_t  bNumConfigurations;$/;"	m	struct:libusb_device_descriptor
bNumDeviceCaps	libusb/libusb.h	/^	uint8_t  bNumDeviceCaps;$/;"	m	struct:libusb_bos_descriptor
bNumEndpoints	libusb/libusb.h	/^	uint8_t  bNumEndpoints;$/;"	m	struct:libusb_interface_descriptor
bNumInterfaces	libusb/libusb.h	/^	uint8_t  bNumInterfaces;$/;"	m	struct:libusb_config_descriptor
bRefresh	libusb/libusb.h	/^	uint8_t  bRefresh;$/;"	m	struct:libusb_endpoint_descriptor
bRequest	libusb/libusb.h	/^	uint8_t  bRequest;$/;"	m	struct:libusb_control_setup
bReserved	libusb/libusb.h	/^	uint8_t bReserved;$/;"	m	struct:libusb_container_id_descriptor
bSynchAddress	libusb/libusb.h	/^	uint8_t  bSynchAddress;$/;"	m	struct:libusb_endpoint_descriptor
bU1DevExitLat	libusb/libusb.h	/^	uint8_t  bU1DevExitLat;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bU2DevExitLat	libusb/libusb.h	/^	uint16_t bU2DevExitLat;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bcdDevice	libusb/libusb.h	/^	uint16_t bcdDevice;$/;"	m	struct:libusb_device_descriptor
bcdUSB	libusb/libusb.h	/^	uint16_t bcdUSB;$/;"	m	struct:libusb_device_descriptor
bmAttributes	libusb/libusb.h	/^	uint32_t  bmAttributes;$/;"	m	struct:libusb_usb_2_0_extension_descriptor
bmAttributes	libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_config_descriptor
bmAttributes	libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_endpoint_descriptor
bmAttributes	libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
bmAttributes	libusb/libusb.h	/^	uint8_t  bmAttributes;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
bmRequestType	libusb/libusb.h	/^	uint8_t  bmRequestType;$/;"	m	struct:libusb_control_setup
brk	unistd.h	/^int brk(void *);$/;"	p
bsearch	stdlib.h	/^void *bsearch(const void *key, const void *base0, size_t nmemb, size_t size, int (*compar)(const void *, const void *));$/;"	p
buffer	libusb/libusb.h	/^	unsigned char *buffer;$/;"	m	struct:libusb_transfer
cacheflush	unistd.h	/^int cacheflush(long start, long end, long flags);$/;"	p
callback	libusb/libusb.h	/^	libusb_transfer_cb_fn callback;$/;"	m	struct:libusb_transfer
calloc	stdlib.h	/^void *calloc(size_t nmemb, size_t size);$/;"	p
capget	unistd.h	/^int capget(cap_user_header_t hdrp, cap_user_data_t datap);$/;"	p
capset	unistd.h	/^int capset(cap_user_header_t hdrp, const cap_user_data_t datap);$/;"	p
cbrt	math.h	/^double	cbrt(double);$/;"	p
cbrtf	math.h	/^float	cbrtf(float);$/;"	p
cbrtl	math.h	/^long double	cbrtl(long double);$/;"	p
ceil	math.h	/^double	ceil(double);$/;"	p
ceilf	math.h	/^float	ceilf(float);$/;"	p
ceill	math.h	/^long double	ceill(long double);$/;"	p
chdir	unistd.h	/^int chdir(const char *);$/;"	p
chown	unistd.h	/^int chown(const char *, uid_t, gid_t);$/;"	p
chroot	unistd.h	/^int chroot(const char *);$/;"	p
clearenv	stdlib.h	/^int clearenv(void);$/;"	p
clearerr	stdio.h	/^void clearerr(FILE *stream);$/;"	p
clock	time.h	/^clock_t   clock(void);$/;"	p
clock_getres	time.h	/^int clock_getres(clockid_t clk_id, struct timespec *res);$/;"	p
clock_gettime	time.h	/^int clock_gettime(clockid_t clk_id, struct timespec *tp);$/;"	p
clock_settime	time.h	/^int clock_settime(clockid_t clk_id, const struct timespec *tp);$/;"	p
close	unistd.h	/^int close(int);$/;"	p
closedir	dirent.h	/^int closedir(DIR *dirp);$/;"	p
container_of	list.h	12;"	d
copysign	math.h	/^double	copysign(double, double);$/;"	p
copysignf	math.h	/^float	copysignf(float, float);$/;"	p
copysignl	math.h	/^long double	copysignl(long double, long double);$/;"	p
cos	math.h	/^double	cos(double);$/;"	p
cosf	math.h	/^float	cosf(float);$/;"	p
cosh	math.h	/^double	cosh(double);$/;"	p
coshf	math.h	/^float	coshf(float);$/;"	p
coshl	math.h	/^long double	coshl(long double);$/;"	p
cosl	math.h	/^long double	cosl(long double);$/;"	p
creat	fcntl.h	/^int creat(const char *pathname, mode_t mode);$/;"	p
ctime	time.h	/^char *ctime(const time_t *timep);$/;"	p
ctime_r	time.h	/^char *ctime_r(const time_t *timep, char *buf);$/;"	p
d_ino	dirent.h	/^  uint64_t         d_ino;$/;"	m	struct:dirent
d_name	dirent.h	/^  char             d_name[256];$/;"	m	struct:dirent
d_off	dirent.h	/^  int64_t          d_off;$/;"	m	struct:dirent
d_reclen	dirent.h	/^  unsigned short   d_reclen;$/;"	m	struct:dirent
d_type	dirent.h	/^  unsigned char    d_type;$/;"	m	struct:dirent
daemon	unistd.h	/^int daemon(int, int);$/;"	p
daylight	time.h	/^int       daylight;$/;"	v
describe	libusb/libusb.h	/^	const char* describe;$/;"	m	struct:libusb_version
dev_capability	libusb/libusb.h	/^	struct libusb_bos_dev_capability_descriptor *dev_capability$/;"	m	struct:libusb_bos_descriptor	typeref:struct:libusb_bos_descriptor::libusb_bos_dev_capability_descriptor
dev_capability_data	libusb/libusb.h	/^	uint8_t dev_capability_data$/;"	m	struct:libusb_bos_dev_capability_descriptor
dev_handle	libusb/libusb.h	/^	libusb_device_handle *dev_handle;$/;"	m	struct:libusb_transfer
difftime	time.h	/^double difftime(time_t time1, time_t time0);$/;"	p
dirent	dirent.h	/^struct dirent {$/;"	s
dirfd	dirent.h	/^int dirfd(DIR *dirp);$/;"	p
drand48	stdlib.h	/^double drand48(void);$/;"	p
drem	math.h	/^double	drem(double, double);$/;"	p
dremf	math.h	/^float	dremf(float, float);$/;"	p
dup	unistd.h	/^int dup(int);$/;"	p
dup2	unistd.h	/^int dup2(int, int);$/;"	p
endpoint	libusb/libusb.h	/^	const struct libusb_endpoint_descriptor *endpoint;$/;"	m	struct:libusb_interface_descriptor	typeref:struct:libusb_interface_descriptor::libusb_endpoint_descriptor
endpoint	libusb/libusb.h	/^	unsigned char endpoint;$/;"	m	struct:libusb_transfer
endusershell	unistd.h	/^void endusershell(void);$/;"	p
environ	unistd.h	/^char **environ;$/;"	v
erand48	stdlib.h	/^double erand48(unsigned short xsubi[3]);$/;"	p
erf	math.h	/^double	erf(double);$/;"	p
erfc	math.h	/^double	erfc(double);$/;"	p
erfcf	math.h	/^float	erfcf(float);$/;"	p
erfcl	math.h	/^long double	erfcl(long double);$/;"	p
erff	math.h	/^float	erff(float);$/;"	p
erfl	math.h	/^long double	erfl(long double);$/;"	p
events	libusb/libusb.h	/^	short events;$/;"	m	struct:libusb_pollfd
execl	unistd.h	/^int execl(const char *, const char *, ...);$/;"	p
execle	unistd.h	/^int execle(const char *, const char *, ...);$/;"	p
execlp	unistd.h	/^int execlp(const char *, const char *, ...);$/;"	p
execv	unistd.h	/^int execv(const char *, char * const *);$/;"	p
execve	unistd.h	/^int execve(const char *, char * const *, char * const *);$/;"	p
execvp	unistd.h	/^int execvp(const char *, char * const *);$/;"	p
exit	stdlib.h	/^void exit(int);$/;"	p
exp	math.h	/^double	exp(double);$/;"	p
exp2	math.h	/^double	exp2(double);$/;"	p
exp2f	math.h	/^float	exp2f(float);$/;"	p
exp2l	math.h	/^long double	exp2l(long double);$/;"	p
expf	math.h	/^float	expf(float);$/;"	p
expl	math.h	/^long double	expl(long double);$/;"	p
expm1	math.h	/^double	expm1(double);$/;"	p
expm1f	math.h	/^float	expm1f(float);$/;"	p
expm1l	math.h	/^long double	expm1l(long double);$/;"	p
extra	libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_config_descriptor
extra	libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_endpoint_descriptor
extra	libusb/libusb.h	/^	const unsigned char *extra;$/;"	m	struct:libusb_interface_descriptor
extra_length	libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_config_descriptor
extra_length	libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_endpoint_descriptor
extra_length	libusb/libusb.h	/^	int extra_length;$/;"	m	struct:libusb_interface_descriptor
fabs	math.h	/^double	fabs(double);$/;"	p
fabsf	math.h	/^float	fabsf(float);$/;"	p
fabsl	math.h	/^long double	fabsl(long double);$/;"	p
fchdir	unistd.h	/^int fchdir(int);$/;"	p
fchown	unistd.h	/^int fchown(int, uid_t, gid_t);$/;"	p
fclose	stdio.h	/^int fclose(FILE *fp);$/;"	p
fcntl	fcntl.h	/^int fcntl(int fd, int cmd, ...);$/;"	p
fcntl	unistd.h	/^int fcntl(int, int, ...);$/;"	p
fd	libusb/libusb.h	/^	int fd;$/;"	m	struct:libusb_pollfd
fdatasync	unistd.h	/^int fdatasync(int);$/;"	p
fdim	math.h	/^double	fdim(double, double);$/;"	p
fdimf	math.h	/^float	fdimf(float, float);$/;"	p
fdiml	math.h	/^long double	fdiml(long double, long double);$/;"	p
fdopendir	dirent.h	/^DIR *fdopendir(int fd);$/;"	p
feof	stdio.h	/^int feof(FILE *stream);$/;"	p
ferror	stdio.h	/^int ferror(FILE *stream);$/;"	p
fflush	stdio.h	/^int fflush(FILE *stream);$/;"	p
fgetc	stdio.h	/^int fgetc(FILE *stream);$/;"	p
fgetpos	stdio.h	/^int fgetpos(FILE *stream, fpos_t *pos);$/;"	p
fgets	stdio.h	/^char *fgets(char *s, int size, FILE *stream);$/;"	p
finite	math.h	/^int	finite(double);$/;"	p
finitef	math.h	/^int		finitef(float);$/;"	p
first	list.h	/^	struct hlist_node *first;$/;"	m	struct:hlist_head	typeref:struct:hlist_head::hlist_node
flags	libusb/libusb.h	/^	uint8_t flags;$/;"	m	struct:libusb_transfer
flock	unistd.h	/^int flock(int, int);$/;"	p
floor	math.h	/^double	floor(double);$/;"	p
floorf	math.h	/^float	floorf(float);$/;"	p
floorl	math.h	/^long double	floorl(long double);$/;"	p
fma	math.h	/^double	fma(double, double, double);$/;"	p
fmaf	math.h	/^float	fmaf(float, float, float);$/;"	p
fmal	math.h	/^long double	fmal(long double, long double, long double);$/;"	p
fmax	math.h	/^double	fmax(double, double);$/;"	p
fmaxf	math.h	/^float	fmaxf(float, float);$/;"	p
fmaxl	math.h	/^long double	fmaxl(long double, long double);$/;"	p
fmin	math.h	/^double	fmin(double, double);$/;"	p
fminf	math.h	/^float	fminf(float, float);$/;"	p
fminl	math.h	/^long double	fminl(long double, long double);$/;"	p
fmod	math.h	/^double	fmod(double, double);$/;"	p
fmodf	math.h	/^float	fmodf(float, float);$/;"	p
fmodl	math.h	/^long double	fmodl(long double, long double);$/;"	p
fopen	stdio.h	/^FILE *fopen(const char *path, const char *mode);$/;"	p
fork	unistd.h	/^pid_t  fork(void);$/;"	p
fprintf	stdio.h	/^int fprintf(FILE *stream, const char *format, ...);$/;"	p
fputc	stdio.h	/^int fputc(int c, FILE *stream);$/;"	p
fputs	stdio.h	/^int fputs(const char *s, FILE *stream);$/;"	p
fread	stdio.h	/^size_t fread(void *ptr, size_t size, size_t nmemb, FILE *stream);$/;"	p
free	stdlib.h	/^void free(void *ptr);$/;"	p
freopen	stdio.h	/^FILE *freopen(const char *path, const char *mode, FILE *stream);$/;"	p
frexp	math.h	/^double	frexp(double, int *);$/;"	p
frexpf	math.h	/^float	frexpf(float, int *);$/;"	p
frexpl	math.h	/^long double	frexpl(long double value, int *); $/;"	p
fscanf	stdio.h	/^int fscanf(FILE *stream, const char *format, ...);$/;"	p
fseek	stdio.h	/^int fseek(FILE *stream, long offset, int whence);$/;"	p
fseeko	stdio.h	/^int fseeko(FILE *stream, off_t offset, int whence);$/;"	p
fsetpos	stdio.h	/^int fsetpos(FILE *stream, fpos_t *pos);$/;"	p
fstat	unistd.h	/^int fstat(int fd, struct stat *buf);$/;"	p
fsync	unistd.h	/^int fsync(int);$/;"	p
ftell	stdio.h	/^long ftell(FILE *stream);$/;"	p
ftello	stdio.h	/^off_t ftello(FILE *stream);$/;"	p
ftruncate	unistd.h	/^int ftruncate(int, off_t);$/;"	p
fwrite	stdio.h	/^size_t fwrite(const void *ptr, size_t size, size_t nmemb, FILE *stream);$/;"	p
gamma	math.h	/^double	gamma(double);$/;"	p
gamma_r	math.h	/^double	gamma_r(double, int *);$/;"	p
gammaf	math.h	/^float	gammaf(float);$/;"	p
gammaf_r	math.h	/^float	gammaf_r(float, int *);$/;"	p
getc	stdio.h	/^int getc(FILE *stream);$/;"	p
getchar	stdio.h	/^int getchar(void);$/;"	p
getcwd	unistd.h	/^char *getcwd(char *, size_t);$/;"	p
getdelim	stdio.h	/^ssize_t getdelim(char **lineptr, size_t *n, int delim, FILE *stream);$/;"	p
getdents	dirent.h	/^int getdents(unsigned int, struct dirent*, unsigned int);$/;"	p
getdtablesize	unistd.h	/^int getdtablesize(void);$/;"	p
getegid	unistd.h	/^gid_t getegid(void);$/;"	p
getenv	stdlib.h	/^char *getenv(const char *);$/;"	p
geteuid	unistd.h	/^uid_t geteuid(void);$/;"	p
getgid	unistd.h	/^gid_t getgid(void);$/;"	p
getgroups	unistd.h	/^int getgroups(int, gid_t *);$/;"	p
gethostname	unistd.h	/^int gethostname(char *, size_t);$/;"	p
getline	stdio.h	/^ssize_t getline(char **lineptr, size_t *n, FILE *stream);$/;"	p
getlogin	unistd.h	/^char* getlogin(void);$/;"	p
getopt	unistd.h	/^int getopt(int, char * const *, const char *);$/;"	p
getpgid	unistd.h	/^pid_t  getpgid(pid_t);$/;"	p
getpgrp	unistd.h	/^pid_t  getpgrp(void);$/;"	p
getpid	unistd.h	/^pid_t  getpid(void);$/;"	p
getppid	unistd.h	/^pid_t  getppid(void);$/;"	p
getpt	stdlib.h	/^int    getpt(void);$/;"	p
getresgid	unistd.h	/^int getresgid(gid_t *rgid, gid_t *egid, gid_t *sgid);$/;"	p
getresuid	unistd.h	/^int getresuid(uid_t *ruid, uid_t *euid, uid_t *suid);$/;"	p
gets	stdio.h	/^char *gets(char *s);$/;"	p
gettid	unistd.h	/^pid_t  gettid(void);$/;"	p
gettimeofday	time.h	/^int gettimeofday(struct timeval *tv, struct timezone *tz);$/;"	p
getuid	unistd.h	/^uid_t getuid(void);$/;"	p
getusershell	unistd.h	/^char* getusershell(void);$/;"	p
gmtime	time.h	/^struct tm *gmtime(const time_t *timep);$/;"	p
gmtime_r	time.h	/^struct tm *gmtime_r(const time_t *timep, struct tm *result);$/;"	p
grantpt	stdlib.h	/^int grantpt(int fd);$/;"	p
hlist_add_after	list.h	/^static inline void hlist_add_after(struct hlist_node *n,$/;"	f
hlist_add_before	list.h	/^static inline void hlist_add_before(struct hlist_node *n,$/;"	f
hlist_add_head	list.h	/^static inline void hlist_add_head(struct hlist_node *n, struct hlist_head *h)$/;"	f
hlist_del	list.h	/^static inline void hlist_del(struct hlist_node *n)$/;"	f
hlist_del_init	list.h	/^static inline void hlist_del_init(struct hlist_node *n)$/;"	f
hlist_empty	list.h	/^static inline int hlist_empty(const struct hlist_head *h)$/;"	f
hlist_entry	list.h	624;"	d
hlist_for_each	list.h	626;"	d
hlist_for_each_entry	list.h	641;"	d
hlist_for_each_entry_continue	list.h	653;"	d
hlist_for_each_entry_from	list.h	665;"	d
hlist_for_each_entry_safe	list.h	678;"	d
hlist_for_each_safe	list.h	630;"	d
hlist_head	list.h	/^struct hlist_head {$/;"	s
hlist_node	list.h	/^struct hlist_node {$/;"	s
hlist_unhashed	list.h	/^static inline int hlist_unhashed(const struct hlist_node *h)$/;"	f
hypot	math.h	/^double	hypot(double, double);$/;"	p
hypotf	math.h	/^float	hypotf(float, float);$/;"	p
hypotl	math.h	/^long double	hypotl(long double, long double);$/;"	p
iConfiguration	libusb/libusb.h	/^	uint8_t  iConfiguration;$/;"	m	struct:libusb_config_descriptor
iInterface	libusb/libusb.h	/^	uint8_t  iInterface;$/;"	m	struct:libusb_interface_descriptor
iManufacturer	libusb/libusb.h	/^	uint8_t  iManufacturer;$/;"	m	struct:libusb_device_descriptor
iProduct	libusb/libusb.h	/^	uint8_t  iProduct;$/;"	m	struct:libusb_device_descriptor
iSerialNumber	libusb/libusb.h	/^	uint8_t  iSerialNumber;$/;"	m	struct:libusb_device_descriptor
idProduct	libusb/libusb.h	/^	uint16_t idProduct;$/;"	m	struct:libusb_device_descriptor
idVendor	libusb/libusb.h	/^	uint16_t idVendor;$/;"	m	struct:libusb_device_descriptor
ilogb	math.h	/^int	ilogb(double);$/;"	p
ilogbf	math.h	/^int		ilogbf(float);$/;"	p
ilogbl	math.h	/^int			ilogbl(long double);$/;"	p
index	string.h	/^char *index(const char *s, int c);$/;"	p
inline	libusb/libusb.h	30;"	d
int16_t	stdint.h	/^typedef __int16_t     int16_t;$/;"	t
int32_t	stdint.h	/^typedef __int32_t     int32_t;$/;"	t
int64_t	stdint.h	/^typedef __int64_t     int64_t;$/;"	t
int8_t	stdint.h	/^typedef __int8_t      int8_t;$/;"	t
int_fast16_t	stdint.h	/^typedef int32_t       int_fast16_t;$/;"	t
int_fast32_t	stdint.h	/^typedef int32_t       int_fast32_t;$/;"	t
int_fast64_t	stdint.h	/^typedef int64_t       int_fast64_t;$/;"	t
int_fast8_t	stdint.h	/^typedef int8_t        int_fast8_t;$/;"	t
int_least16_t	stdint.h	/^typedef int16_t       int_least16_t;$/;"	t
int_least32_t	stdint.h	/^typedef int32_t       int_least32_t;$/;"	t
int_least64_t	stdint.h	/^typedef int64_t       int_least64_t;$/;"	t
int_least8_t	stdint.h	/^typedef int8_t        int_least8_t;$/;"	t
interface	libusb/libusb.h	/^	const struct libusb_interface *interface;$/;"	m	struct:libusb_config_descriptor	typeref:struct:libusb_config_descriptor::libusb_interface
interface	libusb/libusb.h	72;"	d
intmax_t	stdint.h	/^typedef int64_t  intmax_t;$/;"	t
intptr_t	stdint.h	/^typedef int           intptr_t;$/;"	t
ioctl	unistd.h	/^int ioctl(int, int, ...);$/;"	p
isatty	unistd.h	/^int isatty(int);$/;"	p
isinf	math.h	/^int	(isinf)(double);$/;"	p
isnan	math.h	/^int	(isnan)(double);$/;"	p
isnanf	math.h	/^int	isnanf(float);$/;"	p
iso_packet_desc	libusb/libusb.h	/^	struct libusb_iso_packet_descriptor iso_packet_desc$/;"	m	struct:libusb_transfer	typeref:struct:libusb_transfer::libusb_iso_packet_descriptor
issetugid	unistd.h	/^int issetugid(void);$/;"	p
j0	math.h	/^double	j0(double);$/;"	p
j0f	math.h	/^float	j0f(float);$/;"	p
j1	math.h	/^double	j1(double);$/;"	p
j1f	math.h	/^float	j1f(float);$/;"	p
jn	math.h	/^double	jn(int, double);$/;"	p
jnf	math.h	/^float	jnf(int, float);$/;"	p
jrand48	stdlib.h	/^long jrand48(unsigned short *);$/;"	p
lchown	unistd.h	/^int lchown(const char *, uid_t, gid_t);$/;"	p
ldexp	math.h	/^double	ldexp(double, int);$/;"	p
ldexpf	math.h	/^float	ldexpf(float, int);$/;"	p
ldexpl	math.h	/^long double	ldexpl(long double, int);$/;"	p
length	libusb/libusb.h	/^	int length;$/;"	m	struct:libusb_transfer
length	libusb/libusb.h	/^	unsigned int length;$/;"	m	struct:libusb_iso_packet_descriptor
lgamma	math.h	/^double	lgamma(double);$/;"	p
lgamma_r	math.h	/^double	lgamma_r(double, int *);$/;"	p
lgammaf	math.h	/^float	lgammaf(float);$/;"	p
lgammaf_r	math.h	/^float	lgammaf_r(float, int *);$/;"	p
lgammal	math.h	/^long double	lgammal(long double);$/;"	p
libusb_alloc_transfer	libusb/libusb.h	/^struct libusb_transfer * LIBUSB_CALL libusb_alloc_transfer(int iso_packets);$/;"	p
libusb_attach_kernel_driver	libusb/libusb.h	/^int LIBUSB_CALL libusb_attach_kernel_driver(libusb_device_handle *dev,$/;"	p
libusb_bos_descriptor	libusb/libusb.h	/^struct libusb_bos_descriptor {$/;"	s
libusb_bos_dev_capability_descriptor	libusb/libusb.h	/^struct libusb_bos_dev_capability_descriptor {$/;"	s
libusb_bos_type	libusb/libusb.h	/^enum libusb_bos_type {$/;"	g
libusb_bulk_transfer	libusb/libusb.h	/^int LIBUSB_CALL libusb_bulk_transfer(libusb_device_handle *dev_handle,$/;"	p
libusb_cancel_transfer	libusb/libusb.h	/^int LIBUSB_CALL libusb_cancel_transfer(struct libusb_transfer *transfer);$/;"	p
libusb_capability	libusb/libusb.h	/^enum libusb_capability {$/;"	g
libusb_claim_interface	libusb/libusb.h	/^int LIBUSB_CALL libusb_claim_interface(libusb_device_handle *dev,$/;"	p
libusb_class_code	libusb/libusb.h	/^enum libusb_class_code {$/;"	g
libusb_clear_halt	libusb/libusb.h	/^int LIBUSB_CALL libusb_clear_halt(libusb_device_handle *dev,$/;"	p
libusb_close	libusb/libusb.h	/^void LIBUSB_CALL libusb_close(libusb_device_handle *dev_handle);$/;"	p
libusb_config_descriptor	libusb/libusb.h	/^struct libusb_config_descriptor {$/;"	s
libusb_container_id_descriptor	libusb/libusb.h	/^struct libusb_container_id_descriptor {$/;"	s
libusb_context	libusb/libusb.h	/^typedef struct libusb_context libusb_context;$/;"	t	typeref:struct:libusb_context
libusb_control_setup	libusb/libusb.h	/^struct libusb_control_setup {$/;"	s
libusb_control_transfer	libusb/libusb.h	/^int LIBUSB_CALL libusb_control_transfer(libusb_device_handle *dev_handle,$/;"	p
libusb_control_transfer_get_data	libusb/libusb.h	/^static inline unsigned char *libusb_control_transfer_get_data($/;"	f
libusb_control_transfer_get_setup	libusb/libusb.h	/^static inline struct libusb_control_setup *libusb_control_transfer_get_setup($/;"	f
libusb_cpu_to_le16	libusb/libusb.h	/^static inline uint16_t libusb_cpu_to_le16(const uint16_t x)$/;"	f
libusb_descriptor_type	libusb/libusb.h	/^enum libusb_descriptor_type {$/;"	g
libusb_detach_kernel_driver	libusb/libusb.h	/^int LIBUSB_CALL libusb_detach_kernel_driver(libusb_device_handle *dev,$/;"	p
libusb_device	libusb/libusb.h	/^typedef struct libusb_device libusb_device;$/;"	t	typeref:struct:libusb_device
libusb_device_descriptor	libusb/libusb.h	/^struct libusb_device_descriptor {$/;"	s
libusb_device_handle	libusb/libusb.h	/^typedef struct libusb_device_handle libusb_device_handle;$/;"	t	typeref:struct:libusb_device_handle
libusb_endpoint_descriptor	libusb/libusb.h	/^struct libusb_endpoint_descriptor {$/;"	s
libusb_endpoint_direction	libusb/libusb.h	/^enum libusb_endpoint_direction {$/;"	g
libusb_error	libusb/libusb.h	/^enum libusb_error {$/;"	g
libusb_error_name	libusb/libusb.h	/^const char * LIBUSB_CALL libusb_error_name(int errcode);$/;"	p
libusb_event_handler_active	libusb/libusb.h	/^int LIBUSB_CALL libusb_event_handler_active(libusb_context *ctx);$/;"	p
libusb_event_handling_ok	libusb/libusb.h	/^int LIBUSB_CALL libusb_event_handling_ok(libusb_context *ctx);$/;"	p
libusb_exit	libusb/libusb.h	/^void LIBUSB_CALL libusb_exit(libusb_context *ctx);$/;"	p
libusb_fill_bulk_transfer	libusb/libusb.h	/^static inline void libusb_fill_bulk_transfer(struct libusb_transfer *transfer,$/;"	f
libusb_fill_control_setup	libusb/libusb.h	/^static inline void libusb_fill_control_setup(unsigned char *buffer,$/;"	f
libusb_fill_control_transfer	libusb/libusb.h	/^static inline void libusb_fill_control_transfer($/;"	f
libusb_fill_interrupt_transfer	libusb/libusb.h	/^static inline void libusb_fill_interrupt_transfer($/;"	f
libusb_fill_iso_transfer	libusb/libusb.h	/^static inline void libusb_fill_iso_transfer(struct libusb_transfer *transfer,$/;"	f
libusb_free_bos_descriptor	libusb/libusb.h	/^void LIBUSB_CALL libusb_free_bos_descriptor(struct libusb_bos_descriptor *bos);$/;"	p
libusb_free_config_descriptor	libusb/libusb.h	/^void LIBUSB_CALL libusb_free_config_descriptor($/;"	p
libusb_free_container_id_descriptor	libusb/libusb.h	/^void LIBUSB_CALL libusb_free_container_id_descriptor($/;"	p
libusb_free_device_list	libusb/libusb.h	/^void LIBUSB_CALL libusb_free_device_list(libusb_device **list,$/;"	p
libusb_free_ss_endpoint_companion_descriptor	libusb/libusb.h	/^void LIBUSB_CALL libusb_free_ss_endpoint_companion_descriptor($/;"	p
libusb_free_ss_usb_device_capability_descriptor	libusb/libusb.h	/^void LIBUSB_CALL libusb_free_ss_usb_device_capability_descriptor($/;"	p
libusb_free_transfer	libusb/libusb.h	/^void LIBUSB_CALL libusb_free_transfer(struct libusb_transfer *transfer);$/;"	p
libusb_free_usb_2_0_extension_descriptor	libusb/libusb.h	/^void LIBUSB_CALL libusb_free_usb_2_0_extension_descriptor($/;"	p
libusb_get_active_config_descriptor	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_active_config_descriptor(libusb_device *dev,$/;"	p
libusb_get_bos_descriptor	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_bos_descriptor(libusb_device_handle *handle,$/;"	p
libusb_get_bus_number	libusb/libusb.h	/^uint8_t LIBUSB_CALL libusb_get_bus_number(libusb_device *dev);$/;"	p
libusb_get_config_descriptor	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_config_descriptor(libusb_device *dev,$/;"	p
libusb_get_config_descriptor_by_value	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_config_descriptor_by_value(libusb_device *dev,$/;"	p
libusb_get_configuration	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_configuration(libusb_device_handle *dev,$/;"	p
libusb_get_container_id_descriptor	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_container_id_descriptor(struct libusb_context *ctx,$/;"	p
libusb_get_descriptor	libusb/libusb.h	/^static inline int libusb_get_descriptor(libusb_device_handle *dev,$/;"	f
libusb_get_device	libusb/libusb.h	/^libusb_device * LIBUSB_CALL libusb_get_device(libusb_device_handle *dev_handle);$/;"	p
libusb_get_device_address	libusb/libusb.h	/^uint8_t LIBUSB_CALL libusb_get_device_address(libusb_device *dev);$/;"	p
libusb_get_device_descriptor	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_device_descriptor(libusb_device *dev,$/;"	p
libusb_get_device_list	libusb/libusb.h	/^ssize_t LIBUSB_CALL libusb_get_device_list(libusb_context *ctx,$/;"	p
libusb_get_device_speed	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_device_speed(libusb_device *dev);$/;"	p
libusb_get_iso_packet_buffer	libusb/libusb.h	/^static inline unsigned char *libusb_get_iso_packet_buffer($/;"	f
libusb_get_iso_packet_buffer_simple	libusb/libusb.h	/^static inline unsigned char *libusb_get_iso_packet_buffer_simple($/;"	f
libusb_get_max_iso_packet_size	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_max_iso_packet_size(libusb_device *dev,$/;"	p
libusb_get_max_packet_size	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_max_packet_size(libusb_device *dev,$/;"	p
libusb_get_next_timeout	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_next_timeout(libusb_context *ctx,$/;"	p
libusb_get_parent	libusb/libusb.h	/^libusb_device * LIBUSB_CALL libusb_get_parent(libusb_device *dev);$/;"	p
libusb_get_pollfds	libusb/libusb.h	/^const struct libusb_pollfd ** LIBUSB_CALL libusb_get_pollfds($/;"	p
libusb_get_port_number	libusb/libusb.h	/^uint8_t LIBUSB_CALL libusb_get_port_number(libusb_device *dev);$/;"	p
libusb_get_port_numbers	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_port_numbers(libusb_device *dev, uint8_t* port_numbers, int port_numbers_len);$/;"	p
libusb_get_port_path	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_port_path(libusb_context *ctx, libusb_device *dev, uint8_t* path, uint8_t path_length);$/;"	p
libusb_get_ss_endpoint_companion_descriptor	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_ss_endpoint_companion_descriptor($/;"	p
libusb_get_ss_usb_device_capability_descriptor	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_ss_usb_device_capability_descriptor($/;"	p
libusb_get_string_descriptor	libusb/libusb.h	/^static inline int libusb_get_string_descriptor(libusb_device_handle *dev,$/;"	f
libusb_get_string_descriptor_ascii	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_string_descriptor_ascii(libusb_device_handle *dev,$/;"	p
libusb_get_usb_2_0_extension_descriptor	libusb/libusb.h	/^int LIBUSB_CALL libusb_get_usb_2_0_extension_descriptor($/;"	p
libusb_get_version	libusb/libusb.h	/^const struct libusb_version * LIBUSB_CALL libusb_get_version(void);$/;"	p
libusb_handle_events	libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events(libusb_context *ctx);$/;"	p
libusb_handle_events_completed	libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events_completed(libusb_context *ctx, int *completed);$/;"	p
libusb_handle_events_locked	libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events_locked(libusb_context *ctx,$/;"	p
libusb_handle_events_timeout	libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events_timeout(libusb_context *ctx,$/;"	p
libusb_handle_events_timeout_completed	libusb/libusb.h	/^int LIBUSB_CALL libusb_handle_events_timeout_completed(libusb_context *ctx,$/;"	p
libusb_has_capability	libusb/libusb.h	/^int LIBUSB_CALL libusb_has_capability(uint32_t capability);$/;"	p
libusb_hotplug_callback_fn	libusb/libusb.h	/^typedef int (LIBUSB_CALL *libusb_hotplug_callback_fn)(libusb_context *ctx,$/;"	t
libusb_hotplug_callback_handle	libusb/libusb.h	/^typedef int libusb_hotplug_callback_handle;$/;"	t
libusb_hotplug_deregister_callback	libusb/libusb.h	/^void LIBUSB_CALL libusb_hotplug_deregister_callback(libusb_context *ctx,$/;"	p
libusb_hotplug_event	libusb/libusb.h	/^} libusb_hotplug_event;$/;"	t	typeref:enum:__anon2
libusb_hotplug_flag	libusb/libusb.h	/^} libusb_hotplug_flag;$/;"	t	typeref:enum:__anon1
libusb_hotplug_register_callback	libusb/libusb.h	/^int LIBUSB_CALL libusb_hotplug_register_callback(libusb_context *ctx,$/;"	p
libusb_init	libusb/libusb.h	/^int LIBUSB_CALL libusb_init(libusb_context **ctx);$/;"	p
libusb_interface	libusb/libusb.h	/^struct libusb_interface {$/;"	s
libusb_interface_descriptor	libusb/libusb.h	/^struct libusb_interface_descriptor {$/;"	s
libusb_interrupt_transfer	libusb/libusb.h	/^int LIBUSB_CALL libusb_interrupt_transfer(libusb_device_handle *dev_handle,$/;"	p
libusb_iso_packet_descriptor	libusb/libusb.h	/^struct libusb_iso_packet_descriptor {$/;"	s
libusb_iso_sync_type	libusb/libusb.h	/^enum libusb_iso_sync_type {$/;"	g
libusb_iso_usage_type	libusb/libusb.h	/^enum libusb_iso_usage_type {$/;"	g
libusb_kernel_driver_active	libusb/libusb.h	/^int LIBUSB_CALL libusb_kernel_driver_active(libusb_device_handle *dev,$/;"	p
libusb_le16_to_cpu	libusb/libusb.h	180;"	d
libusb_lock_event_waiters	libusb/libusb.h	/^void LIBUSB_CALL libusb_lock_event_waiters(libusb_context *ctx);$/;"	p
libusb_lock_events	libusb/libusb.h	/^void LIBUSB_CALL libusb_lock_events(libusb_context *ctx);$/;"	p
libusb_log_level	libusb/libusb.h	/^enum libusb_log_level {$/;"	g
libusb_open	libusb/libusb.h	/^int LIBUSB_CALL libusb_open(libusb_device *dev, libusb_device_handle **handle);$/;"	p
libusb_open_device_with_vid_pid	libusb/libusb.h	/^libusb_device_handle * LIBUSB_CALL libusb_open_device_with_vid_pid($/;"	p
libusb_pollfd	libusb/libusb.h	/^struct libusb_pollfd {$/;"	s
libusb_pollfd_added_cb	libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_pollfd_added_cb)(int fd, short events,$/;"	t
libusb_pollfd_removed_cb	libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_pollfd_removed_cb)(int fd, void *user_data);$/;"	t
libusb_pollfds_handle_timeouts	libusb/libusb.h	/^int LIBUSB_CALL libusb_pollfds_handle_timeouts(libusb_context *ctx);$/;"	p
libusb_ref_device	libusb/libusb.h	/^libusb_device * LIBUSB_CALL libusb_ref_device(libusb_device *dev);$/;"	p
libusb_release_interface	libusb/libusb.h	/^int LIBUSB_CALL libusb_release_interface(libusb_device_handle *dev,$/;"	p
libusb_request_recipient	libusb/libusb.h	/^enum libusb_request_recipient {$/;"	g
libusb_request_type	libusb/libusb.h	/^enum libusb_request_type {$/;"	g
libusb_reset_device	libusb/libusb.h	/^int LIBUSB_CALL libusb_reset_device(libusb_device_handle *dev);$/;"	p
libusb_set_auto_detach_kernel_driver	libusb/libusb.h	/^int LIBUSB_CALL libusb_set_auto_detach_kernel_driver($/;"	p
libusb_set_configuration	libusb/libusb.h	/^int LIBUSB_CALL libusb_set_configuration(libusb_device_handle *dev,$/;"	p
libusb_set_debug	libusb/libusb.h	/^void LIBUSB_CALL libusb_set_debug(libusb_context *ctx, int level);$/;"	p
libusb_set_interface_alt_setting	libusb/libusb.h	/^int LIBUSB_CALL libusb_set_interface_alt_setting(libusb_device_handle *dev,$/;"	p
libusb_set_iso_packet_lengths	libusb/libusb.h	/^static inline void libusb_set_iso_packet_lengths($/;"	f
libusb_set_pollfd_notifiers	libusb/libusb.h	/^void LIBUSB_CALL libusb_set_pollfd_notifiers(libusb_context *ctx,$/;"	p
libusb_setlocale	libusb/libusb.h	/^int LIBUSB_CALL libusb_setlocale(const char *locale);$/;"	p
libusb_speed	libusb/libusb.h	/^enum libusb_speed {$/;"	g
libusb_ss_endpoint_companion_descriptor	libusb/libusb.h	/^struct libusb_ss_endpoint_companion_descriptor {$/;"	s
libusb_ss_usb_device_capability_attributes	libusb/libusb.h	/^enum libusb_ss_usb_device_capability_attributes {$/;"	g
libusb_ss_usb_device_capability_descriptor	libusb/libusb.h	/^struct libusb_ss_usb_device_capability_descriptor {$/;"	s
libusb_standard_request	libusb/libusb.h	/^enum libusb_standard_request {$/;"	g
libusb_strerror	libusb/libusb.h	/^const char * LIBUSB_CALL libusb_strerror(enum libusb_error errcode);$/;"	p
libusb_submit_transfer	libusb/libusb.h	/^int LIBUSB_CALL libusb_submit_transfer(struct libusb_transfer *transfer);$/;"	p
libusb_supported_speed	libusb/libusb.h	/^enum libusb_supported_speed {$/;"	g
libusb_transfer	libusb/libusb.h	/^struct libusb_transfer {$/;"	s
libusb_transfer_cb_fn	libusb/libusb.h	/^typedef void (LIBUSB_CALL *libusb_transfer_cb_fn)(struct libusb_transfer *transfer);$/;"	t
libusb_transfer_flags	libusb/libusb.h	/^enum libusb_transfer_flags {$/;"	g
libusb_transfer_status	libusb/libusb.h	/^enum libusb_transfer_status {$/;"	g
libusb_transfer_type	libusb/libusb.h	/^enum libusb_transfer_type {$/;"	g
libusb_try_lock_events	libusb/libusb.h	/^int LIBUSB_CALL libusb_try_lock_events(libusb_context *ctx);$/;"	p
libusb_unlock_event_waiters	libusb/libusb.h	/^void LIBUSB_CALL libusb_unlock_event_waiters(libusb_context *ctx);$/;"	p
libusb_unlock_events	libusb/libusb.h	/^void LIBUSB_CALL libusb_unlock_events(libusb_context *ctx);$/;"	p
libusb_unref_device	libusb/libusb.h	/^void LIBUSB_CALL libusb_unref_device(libusb_device *dev);$/;"	p
libusb_usb_2_0_extension_attributes	libusb/libusb.h	/^enum libusb_usb_2_0_extension_attributes {$/;"	g
libusb_usb_2_0_extension_descriptor	libusb/libusb.h	/^struct libusb_usb_2_0_extension_descriptor {$/;"	s
libusb_version	libusb/libusb.h	/^struct libusb_version {$/;"	s
libusb_wait_for_event	libusb/libusb.h	/^int LIBUSB_CALL libusb_wait_for_event(libusb_context *ctx, struct timeval *tv);$/;"	p
link	unistd.h	/^int link(const char *, const char *);$/;"	p
list_add	list.h	/^static inline void list_add(struct list_head *new, struct list_head *head)$/;"	f
list_add_tail	list.h	/^static inline void list_add_tail(struct list_head *new, struct list_head *head)$/;"	f
list_cut_position	list.h	/^static inline void list_cut_position(struct list_head *list,$/;"	f
list_del	list.h	/^static inline void list_del(struct list_head *entry)$/;"	f
list_del_init	list.h	/^static inline void list_del_init(struct list_head *entry)$/;"	f
list_empty	list.h	/^static inline int list_empty(const struct list_head *head)$/;"	f
list_empty_careful	list.h	/^static inline int list_empty_careful(const struct list_head *head)$/;"	f
list_entry	list.h	336;"	d
list_first_entry	list.h	347;"	d
list_for_each	list.h	355;"	d
list_for_each_entry	list.h	408;"	d
list_for_each_entry_continue	list.h	444;"	d
list_for_each_entry_continue_reverse	list.h	458;"	d
list_for_each_entry_from	list.h	471;"	d
list_for_each_entry_reverse	list.h	419;"	d
list_for_each_entry_safe	list.h	482;"	d
list_for_each_entry_safe_continue	list.h	498;"	d
list_for_each_entry_safe_from	list.h	514;"	d
list_for_each_entry_safe_reverse	list.h	529;"	d
list_for_each_prev	list.h	377;"	d
list_for_each_prev_safe	list.h	397;"	d
list_for_each_safe	list.h	387;"	d
list_head	list.h	/^struct list_head {$/;"	s
list_is_last	list.h	/^static inline int list_is_last(const struct list_head *list,$/;"	f
list_is_singular	list.h	/^static inline int list_is_singular(const struct list_head *head)$/;"	f
list_move	list.h	/^static inline void list_move(struct list_head *list, struct list_head *head)$/;"	f
list_move_tail	list.h	/^static inline void list_move_tail(struct list_head *list,$/;"	f
list_prepare_entry	list.h	432;"	d
list_replace	list.h	/^static inline void list_replace(struct list_head *old,$/;"	f
list_replace_init	list.h	/^static inline void list_replace_init(struct list_head *old,$/;"	f
list_splice	list.h	/^static inline void list_splice(const struct list_head *list,$/;"	f
list_splice_init	list.h	/^static inline void list_splice_init(struct list_head *list,$/;"	f
list_splice_tail	list.h	/^static inline void list_splice_tail(struct list_head *list,$/;"	f
list_splice_tail_init	list.h	/^static inline void list_splice_tail_init(struct list_head *list,$/;"	f
llrint	math.h	/^long long llrint(double);$/;"	p
llrintf	math.h	/^long long llrintf(float);$/;"	p
llrintl	math.h	/^long long	llrintl(long double);$/;"	p
llround	math.h	/^long long llround(double);$/;"	p
llroundf	math.h	/^long long llroundf(float);$/;"	p
llroundl	math.h	/^long long	llroundl(long double);$/;"	p
localtime	time.h	/^struct tm *localtime(const time_t *timep);$/;"	p
localtime_r	time.h	/^struct tm *localtime_r(const time_t *timep, struct tm *result);$/;"	p
log	math.h	/^double	log(double);$/;"	p
log10	math.h	/^double	log10(double);$/;"	p
log10f	math.h	/^float	log10f(float);$/;"	p
log10l	math.h	/^long double	log10l(long double);$/;"	p
log1p	math.h	/^double	log1p(double);$/;"	p
log1pf	math.h	/^float	log1pf(float);$/;"	p
log1pl	math.h	/^long double	log1pl(long double);$/;"	p
log2	math.h	/^double	log2(double);$/;"	p
log2f	math.h	/^float	log2f(float);$/;"	p
log2l	math.h	/^long double	log2l(long double);$/;"	p
logb	math.h	/^double	logb(double);$/;"	p
logbf	math.h	/^float	logbf(float);$/;"	p
logbl	math.h	/^long double	logbl(long double);$/;"	p
logf	math.h	/^float	logf(float);$/;"	p
logl	math.h	/^long double	logl(long double);$/;"	p
lrand48	stdlib.h	/^long lrand48(void);$/;"	p
lrint	math.h	/^long	lrint(double);$/;"	p
lrintf	math.h	/^long	lrintf(float);$/;"	p
lrintl	math.h	/^long		lrintl(long double);$/;"	p
lround	math.h	/^long	lround(double);$/;"	p
lroundf	math.h	/^long	lroundf(float);$/;"	p
lroundl	math.h	/^long		lroundl(long double);$/;"	p
lseek	unistd.h	/^off_t lseek(int fd, off_t offset, int whence);$/;"	p
lseek64	unistd.h	/^off64_t lseek64(int fd, off64_t offset, int whence);$/;"	p
lstat	unistd.h	/^int lstat(const char *path, struct stat *buf);$/;"	p
major	libusb/libusb.h	/^	const uint16_t major;$/;"	m	struct:libusb_version
malloc	stdlib.h	/^void *malloc(size_t size);$/;"	p
mblen	stdlib.h	/^int      mblen(const char *, size_t);$/;"	p
mbstowcs	stdlib.h	/^size_t   mbstowcs(wchar_t *, const char *, size_t);$/;"	p
mbtowc	stdlib.h	/^int      mbtowc(wchar_t *, const char *, size_t);$/;"	p
memccpy	string.h	/^void *memccpy(void *dest, const void *src, int c, size_t n);$/;"	p
memchr	string.h	/^void *memchr(const void *s, int c, size_t n);$/;"	p
memcmp	string.h	/^int memcmp(const void *s1, const void *s2, size_t n);$/;"	p
memcpy	string.h	/^void *memcpy(void *dest, const void *src, size_t n);$/;"	p
memmem	string.h	/^void *memmem(const void *haystack, size_t haystacklen, const void *needle, size_t needlelen);$/;"	p
memmove	string.h	/^void *memmove(void *dest, const void *src, size_t n);$/;"	p
memrchr	string.h	/^void *memrchr(const void *s, int c, size_t n);$/;"	p
memset	string.h	/^void *memset(void *s, int c, size_t n);$/;"	p
micro	libusb/libusb.h	/^	const uint16_t micro;$/;"	m	struct:libusb_version
minor	libusb/libusb.h	/^	const uint16_t minor;$/;"	m	struct:libusb_version
mkstemp	stdlib.h	/^int mkstemp (char *);$/;"	p
mktemp	stdlib.h	/^char *mktemp (char *);$/;"	p
mktime	time.h	/^time_t mktime(struct tm *tm);$/;"	p
modf	math.h	/^double	modf(double, double *);$/;"	p
modff	math.h	/^float	modff(float, float *);$/;"	p
modfl	math.h	/^long double	modfl(long double, long double *); $/;"	p
mrand48	stdlib.h	/^long mrand48(void);$/;"	p
nan	math.h	/^double	nan(const char *);$/;"	p
nanf	math.h	/^float	nanf(const char *);$/;"	p
nanl	math.h	/^long double	nanl(const char *);$/;"	p
nano	libusb/libusb.h	/^	const uint16_t nano;$/;"	m	struct:libusb_version
nanosleep	time.h	/^int nanosleep(const struct timespec *req, struct timespec *rem);$/;"	p
nearbyint	math.h	/^double	nearbyint(double);$/;"	p
nearbyintf	math.h	/^float	nearbyintf(float);$/;"	p
nearbyintl	math.h	/^long double	nearbyintl(long double);$/;"	p
next	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::hlist_node
next	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::list_head
nextafter	math.h	/^double	nextafter(double, double);$/;"	p
nextafterf	math.h	/^float	nextafterf(float, float);$/;"	p
nextafterl	math.h	/^long double	nextafterl(long double, long double);$/;"	p
nexttoward	math.h	/^double		nexttoward(double, long double);$/;"	p
nexttowardf	math.h	/^float		nexttowardf(float, long double);$/;"	p
nexttowardl	math.h	/^long double	nexttowardl(long double, long double);$/;"	p
nice	unistd.h	/^int nice(int);$/;"	p
nrand48	stdlib.h	/^long nrand48(unsigned short *);$/;"	p
num_altsetting	libusb/libusb.h	/^	int num_altsetting;$/;"	m	struct:libusb_interface
num_iso_packets	libusb/libusb.h	/^	int num_iso_packets;$/;"	m	struct:libusb_transfer
open	fcntl.h	/^int open(const char *pathname, int flags);$/;"	p
open	fcntl.h	/^int open(const char *pathname, int flags, mode_t mode);$/;"	p
openat	fcntl.h	/^int openat(int dirfd, const char *pathname, int flags);$/;"	p
openat	fcntl.h	/^int openat(int dirfd, const char *pathname, int flags, mode_t mode);$/;"	p
opendir	dirent.h	/^DIR *opendir(const char *name);$/;"	p
optarg	unistd.h	/^char *optarg;$/;"	v
opterr	unistd.h	/^int optind, opterr, optopt;$/;"	v
optind	unistd.h	/^int optind, opterr, optopt;$/;"	v
optopt	unistd.h	/^int optind, opterr, optopt;$/;"	v
pause	unistd.h	/^int pause(void);$/;"	p
perror	stdio.h	/^void perror(const char *s);$/;"	p
pipe	unistd.h	/^int pipe(int *);$/;"	p
pipe2	unistd.h	/^int pipe2(int *, int);$/;"	p
pow	math.h	/^double	pow(double, double);$/;"	p
powf	math.h	/^float	powf(float, float);$/;"	p
powl	math.h	/^long double	powl(long double, long double);$/;"	p
pprev	list.h	/^	struct hlist_node *next, **pprev;$/;"	m	struct:hlist_node	typeref:struct:hlist_node::
prctl	unistd.h	/^int prctl(int  option, ...);$/;"	p
pread	unistd.h	/^ssize_t pread(int, void *, size_t, off_t);$/;"	p
prefetch	list.h	/^static inline void prefetch(const void *x) {;}$/;"	f
prev	list.h	/^	struct list_head *next, *prev;$/;"	m	struct:list_head	typeref:struct:list_head::
printf	stdio.h	/^int printf(const char *format, ...);$/;"	p
ptsname	stdlib.h	/^char*  ptsname(int);$/;"	p
ptsname_r	stdlib.h	/^int    ptsname_r(int, char*, size_t);$/;"	p
putc	stdio.h	/^int putc(int c, FILE *stream);$/;"	p
putchar	stdio.h	/^int putchar(int c);$/;"	p
putenv	stdlib.h	/^int putenv(const char *);$/;"	p
puts	stdio.h	/^int puts(const char *s);$/;"	p
pwrite	unistd.h	/^ssize_t pwrite(int, const void *, size_t, off_t);$/;"	p
qsort	stdlib.h	/^void qsort(void *, size_t, size_t, int (*)(const void *, const void *));$/;"	p
rand	stdlib.h	/^int rand(void);$/;"	p
random	stdlib.h	/^long int random(void);$/;"	p
rc	libusb/libusb.h	/^	const char *rc;$/;"	m	struct:libusb_version
read	unistd.h	/^ssize_t read(int, void *, size_t);$/;"	p
readdir	dirent.h	/^struct dirent* readdir(DIR* dirp);$/;"	p
readdir_r	dirent.h	/^int readdir_r(DIR *dirp, struct dirent *entry, struct dirent **result);$/;"	p
readlink	unistd.h	/^int readlink(const char *, char *, size_t);$/;"	p
realloc	stdlib.h	/^void *realloc(void *ptr, size_t size);$/;"	p
realpath	stdlib.h	/^char *realpath(const char *path, char *resolved);$/;"	p
remainder	math.h	/^double	remainder(double, double);$/;"	p
remainderf	math.h	/^float	remainderf(float, float);$/;"	p
remainderl	math.h	/^long double	remainderl(long double, long double);$/;"	p
remove	stdio.h	/^int remove(const char *pathname);$/;"	p
remquo	math.h	/^double	remquo(double, double, int *);$/;"	p
remquof	math.h	/^float	remquof(float, float, int *);$/;"	p
remquol	math.h	/^long double	remquol(long double, long double, int *);$/;"	p
rename	stdio.h	/^int rename(const char *oldpath, const char *newpath);$/;"	p
rewind	stdio.h	/^void rewind(FILE *stream);$/;"	p
rewinddir	dirent.h	/^void rewinddir(DIR *dirp);$/;"	p
rindex	string.h	/^char *rindex(const char *s, int c);$/;"	p
rint	math.h	/^double	rint(double);$/;"	p
rintf	math.h	/^float	rintf(float);$/;"	p
rintl	math.h	/^long double	rintl(long double);$/;"	p
rmdir	unistd.h	/^int rmdir(const char *);$/;"	p
round	math.h	/^double	round(double);$/;"	p
roundf	math.h	/^float	roundf(float);$/;"	p
roundl	math.h	/^long double	roundl(long double);$/;"	p
sbrk	unistd.h	/^void *sbrk(ptrdiff_t);$/;"	p
scalb	math.h	/^double	scalb(double, double);$/;"	p
scalbf	math.h	/^float	scalbf(float, float);$/;"	p
scalbln	math.h	/^double	scalbln(double, long);$/;"	p
scalblnf	math.h	/^float	scalblnf(float, long);$/;"	p
scalblnl	math.h	/^long double	scalblnl(long double, long);$/;"	p
scalbn	math.h	/^double	scalbn(double, int);$/;"	p
scalbnf	math.h	/^float	scalbnf(float, int);$/;"	p
scalbnl	math.h	/^long double	scalbnl(long double, int);$/;"	p
scandir	dirent.h	/^int scandir(const char *dirp, struct dirent ***namelist,$/;"	p
scanf	stdio.h	/^int scanf(const char *format, ...);$/;"	p
seed48	stdlib.h	/^unsigned short *seed48(unsigned short*);$/;"	p
setbuf	stdio.h	/^void setbuf(FILE *stream, char *buf);$/;"	p
setegid	unistd.h	/^int setegid(gid_t);$/;"	p
setenv	stdlib.h	/^int setenv(const char *, const char *, int);$/;"	p
seteuid	unistd.h	/^int seteuid(uid_t);$/;"	p
setgid	unistd.h	/^int setgid(gid_t);$/;"	p
setgroups	unistd.h	/^int setgroups(size_t, const gid_t *);$/;"	p
setpgid	unistd.h	/^int    setpgid(pid_t, pid_t);$/;"	p
setpgrp	unistd.h	/^int    setpgrp(void);$/;"	p
setregid	unistd.h	/^int setregid(gid_t, gid_t);$/;"	p
setresgid	unistd.h	/^int setresgid(gid_t, gid_t, gid_t);$/;"	p
setresuid	unistd.h	/^int setresuid(uid_t, uid_t, uid_t);$/;"	p
setreuid	unistd.h	/^int setreuid(uid_t, uid_t);$/;"	p
setsid	unistd.h	/^pid_t  setsid(void);$/;"	p
settimeofday	time.h	/^int settimeofday(const struct timeval *tv, const struct timezone *tz);$/;"	p
setuid	unistd.h	/^int setuid(uid_t);$/;"	p
setusershell	unistd.h	/^void setusershell(void);$/;"	p
setvbuf	stdio.h	/^int setvbuf(FILE *stream, char *buf, int mode, size_t size);$/;"	p
significand	math.h	/^double	significand(double);$/;"	p
significandf	math.h	/^float	significandf(float);$/;"	p
sin	math.h	/^double	sin(double);$/;"	p
sinf	math.h	/^float	sinf(float);$/;"	p
sinh	math.h	/^double	sinh(double);$/;"	p
sinhf	math.h	/^float	sinhf(float);$/;"	p
sinhl	math.h	/^long double	sinhl(long double);$/;"	p
sinl	math.h	/^long double	sinl(long double);$/;"	p
sleep	unistd.h	/^unsigned int sleep(unsigned int);$/;"	p
snprintf	stdio.h	/^int snprintf(char *str, size_t size, const char *format, ...);$/;"	p
sprintf	stdio.h	/^int sprintf(char *str, const char *format, ...);$/;"	p
sqrt	math.h	/^double	sqrt(double);$/;"	p
sqrtf	math.h	/^float	sqrtf(float);$/;"	p
sqrtl	math.h	/^long double	sqrtl(long double);$/;"	p
srand	stdlib.h	/^void srand(unsigned int seed);$/;"	p
srand48	stdlib.h	/^void srand48(long);$/;"	p
srandom	stdlib.h	/^void srandom(unsigned int seed);$/;"	p
sscanf	stdio.h	/^int sscanf(const char *str, const char *format, ...);$/;"	p
ssize_t	libusb/libusb.h	/^  typedef __int64 ssize_t;$/;"	t
ssize_t	libusb/libusb.h	/^  typedef int ssize_t;$/;"	t
ssize_t	libusb/libusb.h	35;"	d
ssize_t	stdint.h	/^typedef long int  ssize_t;$/;"	t
st_atime	unistd.h	/^   time_t    st_atime;   \/* time of last access *\/$/;"	m	struct:stat
st_blksize	unistd.h	/^   blksize_t st_blksize; \/* blocksize for filesystem I\/O *\/$/;"	m	struct:stat
st_blocks	unistd.h	/^   blkcnt_t  st_blocks;  \/* number of 512B blocks allocated *\/$/;"	m	struct:stat
st_ctime	unistd.h	/^   time_t    st_ctime;   \/* time of last status change *\/$/;"	m	struct:stat
st_dev	unistd.h	/^   dev_t     st_dev;     \/* ID of device containing file *\/$/;"	m	struct:stat
st_gid	unistd.h	/^   gid_t     st_gid;     \/* group ID of owner *\/$/;"	m	struct:stat
st_ino	unistd.h	/^   ino_t     st_ino;     \/* inode number *\/$/;"	m	struct:stat
st_mode	unistd.h	/^   mode_t    st_mode;    \/* protection *\/$/;"	m	struct:stat
st_mtime	unistd.h	/^   time_t    st_mtime;   \/* time of last modification *\/$/;"	m	struct:stat
st_nlink	unistd.h	/^   nlink_t   st_nlink;   \/* number of hard links *\/$/;"	m	struct:stat
st_rdev	unistd.h	/^   dev_t     st_rdev;    \/* device ID (if special file) *\/$/;"	m	struct:stat
st_size	unistd.h	/^   off_t     st_size;    \/* total size, in bytes *\/$/;"	m	struct:stat
st_uid	unistd.h	/^   uid_t     st_uid;     \/* user ID of owner *\/$/;"	m	struct:stat
stat	unistd.h	/^int stat(const char *path, struct stat *buf);$/;"	p
stat	unistd.h	/^struct stat {$/;"	s
status	libusb/libusb.h	/^	enum libusb_transfer_status status;$/;"	m	struct:libusb_iso_packet_descriptor	typeref:enum:libusb_iso_packet_descriptor::libusb_transfer_status
status	libusb/libusb.h	/^	enum libusb_transfer_status status;$/;"	m	struct:libusb_transfer	typeref:enum:libusb_transfer::libusb_transfer_status
strcasecmp	string.h	/^int strcasecmp(const char *s1, const char *s2);$/;"	p
strcasestr	string.h	/^char *strcasestr(const char *haystack, const char *needle);$/;"	p
strcat	string.h	/^char *strcat(char *dest, const char *src);$/;"	p
strchr	string.h	/^char *strchr(const char *s, int c);$/;"	p
strcmp	string.h	/^int strcmp(const char *s1, const char *s2);$/;"	p
strcoll	string.h	/^int    strcoll(const char *, const char *);$/;"	p
strcpy	string.h	/^char *strcpy(char *dest, const char *src);$/;"	p
strcspn	string.h	/^size_t strcspn(const char *, const char *);$/;"	p
strdup	string.h	/^char *strdup(const char *s);$/;"	p
strerror	string.h	/^char *strerror(int errnum);$/;"	p
strerror_r	string.h	/^int strerror_r(int errnum, char *buf, size_t buflen);$/;"	p
strftime	time.h	/^size_t strftime(char *s, size_t max, const char *format, const struct tm *tm);$/;"	p
strlcat	string.h	/^size_t strlcat(char* , const char* , size_t);$/;"	p
strlcpy	string.h	/^size_t strlcpy(char* , const char* , size_t);$/;"	p
strlen	string.h	/^size_t strlen(const char *s);$/;"	p
strncasecmp	string.h	/^int strncasecmp(const char *s1, const char *s2, size_t n);$/;"	p
strncat	string.h	/^char *strncat(char *dest, const char *src, size_t n);$/;"	p
strncmp	string.h	/^int    strncmp(const char *, const char *, size_t);$/;"	p
strncpy	string.h	/^char*  strncpy(char* , const char* , size_t);$/;"	p
strndup	string.h	/^char*  strndup(const char *, size_t);$/;"	p
strnlen	string.h	/^size_t strnlen(const char *s, size_t maxlen);$/;"	p
strpbrk	string.h	/^char*  strpbrk(const char *, const char *);$/;"	p
strptime	time.h	/^char *strptime(const char *s, const char *format, struct tm *tm);$/;"	p
strrchr	string.h	/^char *strrchr(const char *s, int c);$/;"	p
strsep	string.h	/^char*  strsep(char** , const char* );$/;"	p
strsignal	string.h	/^char*  strsignal(int  sig);$/;"	p
strspn	string.h	/^size_t strspn(const char *, const char *);$/;"	p
strstr	string.h	/^char *strstr(const char *haystack, const char *needle);$/;"	p
strtod	stdlib.h	/^double strtod(const char *nptr, char **endptr);$/;"	p
strtof	stdlib.h	/^float strtof(const char *nptr, char **endptr);$/;"	p
strtok	string.h	/^char *strtok(char *str, const char *delim);$/;"	p
strtok_r	string.h	/^char *strtok_r(char *str, const char *delim, char **saveptr);$/;"	p
strtol	stdlib.h	/^long strtol(const char *, char **, int);$/;"	p
strtoll	stdlib.h	/^long long strtoll(const char *, char **, int);$/;"	p
strtoul	stdlib.h	/^unsigned long strtoul(const char *, char **, int);$/;"	p
strtoull	stdlib.h	/^unsigned long long strtoull(const char *, char **, int);$/;"	p
strxfrm	string.h	/^size_t strxfrm(char* , const char* , size_t);$/;"	p
symlink	unistd.h	/^int symlink(const char *, const char *);$/;"	p
sync	unistd.h	/^int sync(void);$/;"	p
sysconf	unistd.h	/^int sysconf(int  name);$/;"	p
system	stdlib.h	/^int system(const char * string);$/;"	p
tan	math.h	/^double	tan(double);$/;"	p
tanf	math.h	/^float	tanf(float);$/;"	p
tanh	math.h	/^double	tanh(double);$/;"	p
tanhf	math.h	/^float	tanhf(float);$/;"	p
tanhl	math.h	/^long double	tanhl(long double);$/;"	p
tanl	math.h	/^long double	tanl(long double);$/;"	p
tcgetpgrp	unistd.h	/^pid_t tcgetpgrp(int fd);$/;"	p
tcsetpgrp	unistd.h	/^int   tcsetpgrp(int fd, pid_t _pid);$/;"	p
tgamma	math.h	/^double	tgamma(double);$/;"	p
tgammaf	math.h	/^float	tgammaf(float);$/;"	p
tgammal	math.h	/^long double	tgammal(long double);$/;"	p
time	time.h	/^time_t time(time_t *t);$/;"	p
timeout	libusb/libusb.h	/^	unsigned int timeout;$/;"	m	struct:libusb_transfer
timer_create	time.h	/^int timer_create(clockid_t clockid, struct sigevent *sevp, timer_t *timerid);$/;"	p
timer_delete	time.h	/^int timer_delete(timer_t timerid);$/;"	p
timer_getoverrun	time.h	/^int timer_getoverrun(timer_t timerid);$/;"	p
timer_gettime	time.h	/^int timer_gettime(timer_t timerid, struct itimerspec *curr_value);$/;"	p
timer_settime	time.h	/^int timer_settime(timer_t timerid, int flags, const struct itimerspec *new_value, struct itimerspec * old_value);$/;"	p
timezone	time.h	/^long int  timezone;$/;"	v
tm	time.h	/^struct tm {$/;"	s
tm_gmtoff	time.h	/^   long int tm_gmtoff;     \/* Seconds east of UTC.  *\/$/;"	m	struct:tm
tm_hour	time.h	/^   int     tm_hour;        \/* hours *\/$/;"	m	struct:tm
tm_isdst	time.h	/^   int     tm_isdst;       \/* daylight saving time *\/$/;"	m	struct:tm
tm_mday	time.h	/^   int     tm_mday;        \/* day of the month *\/$/;"	m	struct:tm
tm_min	time.h	/^   int     tm_min;         \/* minutes *\/$/;"	m	struct:tm
tm_mon	time.h	/^   int     tm_mon;         \/* month *\/$/;"	m	struct:tm
tm_sec	time.h	/^   int     tm_sec;         \/* seconds *\/$/;"	m	struct:tm
tm_wday	time.h	/^   int     tm_wday;        \/* day of the week *\/$/;"	m	struct:tm
tm_yday	time.h	/^   int     tm_yday;        \/* day in the year *\/$/;"	m	struct:tm
tm_year	time.h	/^   int     tm_year;        \/* year *\/$/;"	m	struct:tm
tm_zone	time.h	/^   const char *tm_zone;    \/* Timezone abbreviation.  *\/$/;"	m	struct:tm
tmpfile	stdio.h	/^FILE *tmpfile(void);$/;"	p
tmpnam	stdio.h	/^char *tmpnam(char *s);$/;"	p
trunc	math.h	/^double	trunc(double);$/;"	p
truncate	unistd.h	/^int truncate(const char *, off_t);$/;"	p
truncf	math.h	/^float	truncf(float);$/;"	p
truncl	math.h	/^long double	truncl(long double);$/;"	p
ttyname	unistd.h	/^char* ttyname(int);$/;"	p
ttyname_r	unistd.h	/^int ttyname_r(int, char*, size_t);$/;"	p
type	libusb/libusb.h	/^	unsigned char type;$/;"	m	struct:libusb_transfer
tzname	time.h	/^char*     tzname[];$/;"	v
tzset	time.h	/^void  tzset(void);$/;"	p
uint16_t	libusb/libusb.h	/^typedef unsigned __int16  uint16_t;$/;"	t
uint16_t	stdint.h	/^typedef __uint16_t    uint16_t;$/;"	t
uint32_t	libusb/libusb.h	/^typedef unsigned __int32  uint32_t;$/;"	t
uint32_t	stdint.h	/^typedef __uint32_t    uint32_t;$/;"	t
uint64_t	stdint.h	/^typedef __uint64_t    uint64_t;$/;"	t
uint8_t	libusb/libusb.h	/^typedef unsigned __int8   uint8_t;$/;"	t
uint8_t	stdint.h	/^typedef __uint8_t     uint8_t;$/;"	t
uint_fast16_t	stdint.h	/^typedef uint32_t      uint_fast16_t;$/;"	t
uint_fast32_t	stdint.h	/^typedef uint32_t      uint_fast32_t;$/;"	t
uint_fast64_t	stdint.h	/^typedef uint64_t      uint_fast64_t;$/;"	t
uint_fast8_t	stdint.h	/^typedef uint8_t       uint_fast8_t;$/;"	t
uint_least16_t	stdint.h	/^typedef uint16_t      uint_least16_t;$/;"	t
uint_least32_t	stdint.h	/^typedef uint32_t      uint_least32_t;$/;"	t
uint_least64_t	stdint.h	/^typedef uint64_t      uint_least64_t;$/;"	t
uint_least8_t	stdint.h	/^typedef uint8_t       uint_least8_t;$/;"	t
uintmax_t	stdint.h	/^typedef uint64_t uintmax_t;$/;"	t
uintptr_t	stdint.h	/^typedef unsigned int  uintptr_t;$/;"	t
ungetc	stdio.h	/^int ungetc(int c, FILE *stream);$/;"	p
unlink	unistd.h	/^int unlink(const char *);$/;"	p
unlinkat	fcntl.h	/^int unlinkat(int dirfd, const char *pathname, int flags);$/;"	p
unlockpt	stdlib.h	/^int    unlockpt(int);$/;"	p
unsetenv	stdlib.h	/^int unsetenv(const char *);$/;"	p
user_data	libusb/libusb.h	/^	void *user_data;$/;"	m	struct:libusb_transfer
usleep	unistd.h	/^int usleep(unsigned long);$/;"	p
vfork	unistd.h	/^pid_t  vfork(void);$/;"	p
vfprintf	stdio.h	/^int vfprintf(FILE *stream, const char *format, va_list ap);$/;"	p
vprintf	stdio.h	/^int vprintf(const char *format, va_list ap);$/;"	p
vsnprintf	stdio.h	/^int vsnprintf(char *str, size_t size, const char *format, va_list ap);$/;"	p
vsprintf	stdio.h	/^int vsprintf(char *str, const char *format, va_list ap);$/;"	p
wBytesPerInterval	libusb/libusb.h	/^	uint16_t wBytesPerInterval;$/;"	m	struct:libusb_ss_endpoint_companion_descriptor
wIndex	libusb/libusb.h	/^	uint16_t wIndex;$/;"	m	struct:libusb_control_setup
wLength	libusb/libusb.h	/^	uint16_t wLength;$/;"	m	struct:libusb_control_setup
wMaxPacketSize	libusb/libusb.h	/^	uint16_t wMaxPacketSize;$/;"	m	struct:libusb_endpoint_descriptor
wSpeedSupported	libusb/libusb.h	/^	uint16_t wSpeedSupported;$/;"	m	struct:libusb_ss_usb_device_capability_descriptor
wTotalLength	libusb/libusb.h	/^	uint16_t wTotalLength;$/;"	m	struct:libusb_bos_descriptor
wTotalLength	libusb/libusb.h	/^	uint16_t wTotalLength;$/;"	m	struct:libusb_config_descriptor
wValue	libusb/libusb.h	/^	uint16_t wValue;$/;"	m	struct:libusb_control_setup
wcstombs	stdlib.h	/^size_t	wcstombs(char *, const wchar_t *, size_t);$/;"	p
wctomb	stdlib.h	/^int	wctomb(char *, wchar_t);$/;"	p
write	unistd.h	/^ssize_t write(int, const void *, size_t);$/;"	p
y0	math.h	/^double	y0(double);$/;"	p
y0f	math.h	/^float	y0f(float);$/;"	p
y1	math.h	/^double	y1(double);$/;"	p
y1f	math.h	/^float	y1f(float);$/;"	p
yn	math.h	/^double	yn(int, double);$/;"	p
ynf	math.h	/^float	ynf(int, float);$/;"	p
