vim: tw=80
VI之漫路即为禅修，皈依gnu

ignorecase/noic 忽略大小写

.c文件用2个空格替换tab:
// vim:set ts=2 sw=2 expandtab:

v characterwise-visual
V linewise-visual
CTRL-V blockwise-visual

ctrl-v I // esc   批量注释C/C++

http://www.cnblogs.com/songfy/p/5635757.html

:help complete
:help cpt (有2个complete入口，如何区分?)

vim.base Huge version
vim.tiny Small version

vim-nor // support python

gcc -fpreprocessed -dD -E foo.c 删除注释

打分号问题，没完美解决

brew install vim

3 自带netrw足够好，不用nerdtree

foldmethod   怎么用
foldlevelstart

rtp :runtimepath

ultisnips 与 vim-snippets 配套使用
ftplugin : filetype plugin

completeopt
preview-window
ft-c-omni (ft:filetypes)

---
Omnicomplete(category) 是一类使用 Vim's omnicompletion feature 的插件
Omnicppcompleter: C/C++ omni-completion with ctags 
AutoComplPop : Automatically opens popup menu for completions

ctags - Generate tag files for source code
ctags -R -f ~/.vim/systags /usr/include /usr/local/include
ctags -R

cscope - interactively examine a C program
cscope -bkq -i cscope.files
-b Build the cross-reference only
-k Kernel Mode, turns off the use of the default include dir (/usr/include)
-q Enable  fast symbol lookup via an inverted index. 
   This option causes cscope to create 2 more files (cscope.in.out and cscope.po.out )
   This allows a faster symbol search algorithm that provides
   noticeably faster lookup performance for large projects.
-i all files listed in namefile



默认对 c++ 支持不好  :h cs 可见：
Also you can download cscope 13.x and mlcscope 14.x (multi-lingual cscope
which supports C, C++, Java, lex, yacc, breakpoint listing, Ingres, and SDL)
from World-Wide Exptools Open Source packages page:

V15.8，已扫描 .cpp，但不识别 namespace 关键字包裹部分，去掉namespace 就好了
导致 调用谁 和 被谁调用 命令不能用，但 s命令即 搜索字符串可用
实际上当时用 source insight 确定谁调用这个函数，也是全局搜索的

我修改了cscope(fscan.l 和 scan.l 仿照class 增加 namespace)，能识别 
namespace android {
}

但匿名namespace 和 嵌套namespace 仍然无法识别


ctags -R --c++-kinds=+px --fields=+iaS --extra=+q   // C++ 支持




:helptags {dir} 

默认插件：
/usr/share/vim/vim74/ 

ccomplete.vim中的ccomplete#Complete(findstart, base)

omnifunc=ccomplete#Complete

g:AutoPairsCenterLine 保持编辑代码位置保持在中间位置

formatoptions 默认tcq 不能自动添加 // 和 *  
但我的vi值是 croql  (不知道谁改的)，
vimrc中并未配置  (help formatoptions 貌似与compitable有关)


:help <leader>

cindent模式

ultisnips 默认：
let g:UltiSnipsExpandTrigger="<tab>"
let g:UltiSnipsJumpForwardTrigger="<c-b>"
let g:UltiSnipsJumpBackwardTrigger="<c-z>"

/usr/share/vim/vim74/colors  README
:colorscheme
colorscheme koehler

改不了背景色
需要修改terminal程序的背景色
atom背景色： #282c34

set background=dark/light


—- python complete —-
Pydiction
默认Tab 和 Shift+Tab 代替了C-P和C-N
由于Tab与snippet冲突，改为 C-P,和S-Tab （也不合理）
pythoncomplete.vim(vim自带，足够用)
Jedi

pythoncomplete 和jedi同样问题：
c = range(1,5)
c.reverse() # c. C-x C-o 不提示（程序不运行无法判断c的类型？）
sqlite3 函数返回变量. 不提示
import sys
sys. 提示
c = list()
c. 提示

折衷办法：
c = range(1,50)
c = list()
c. 提示后再删除c=list 行


K: .c触发man/ .py触发pydoc


Pydiction 利用 iskeyword 可以在c-n中识别 . 和( ,可以我增加 32(空格)，确还是不行
